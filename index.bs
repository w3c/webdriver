<pre class=metadata>
Title: WebDriver
Level: 2
Shortname: webdriver
Status: ED
TR: https://www.w3.org/TR/webdriver/
Group: browser-testing-tools
URL: https://w3c.github.io/webdriver/
Repository: w3c/webdriver
Editor: Simon Stewart, Apple https://www.apple.com/, http://www.rocketpoweredjetpants.com/, w3cid 50228
Editor: David Burns, BrowserStack https://www.browserstack.com/, http://www.theautomatedtester.co.uk/, w3cid 50184
!Channel: <a href="https://www.w3.org/wiki/IRC">#webdriver on irc.w3.org</a>
Abstract: WebDriver is a remote control interface
Abstract: that enables introspection and control of user agents.
Abstract: It provides a platform- and language-neutral wire protocol
Abstract: as a way for out-of-process programs
Abstract: to remotely instruct the behavior of web browsers.
Abstract:
Abstract: Provided is a set of interfaces
Abstract: to discover and manipulate DOM elements in web documents
Abstract: and to control the behavior of a user agent.
Abstract: It is primarily intended to allow web authors to write tests
Abstract: that automate a user agent from a separate controlling process,
Abstract: but may also be used in such a way as to allow in-browser scripts
Abstract: to control a — possibly separate — browser.
Boilerplate: conformance no, index no, idl-index no, issues-index no
Indent: 2
</pre>

<pre class=biblio>
{
  "RFC6265bis": {
    "authors": [
      "M. West",
      "J. Wilander"
    ],
    "href": "https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-05",
    "title": "Cookies: HTTP State Management Mechanism",
    "status": "Draft",
    "publisher": "IETF"
  }
}
</pre>

<script src=issue.js></script>

<style>
/* ul.brief to create inline comma separated lists */
ul.brief::before {
  content: '\21D2\A0';
  font: 1.2em/1.45 Helvetica Neue, sans-serif;
}
ul.brief li { display: inline }
ul.brief li::after { content: ", " }
ul.brief li:last-child::after { content: "" }

/* dl.subcategories when the definition list subdivides a definition */
dl.subcategories { margin-left: 2em }

/* table.simple for more readable tables
   Source: https://github.com/w3c/respec/blob/7faae154e57d4af864a83b50adf744029fbd7496/assets/respec.css */
table.simple {
  border-spacing: 0;
  border-collapse: collapse;
  border-bottom: 3px solid #005a9c;
}
.simple th {
  background: #005a9c;
  color: #fff;
  padding: 3px 5px;
  text-align: left;
}
.simple th a {
  color: #fff;
  padding: 3px 5px;
  text-align: left;
}
.simple th[scope="row"] {
  background: inherit;
  color: inherit;
  border-top: 1px solid #ddd;
}
.simple td {
  padding: 3px 10px;
  border-top: 1px solid #ddd;
}
.simple tr:nth-child(even) {
  background: #f0f6ff;
}
</style>

<section>
<h2 id=design>Design</h2>

<p>
<em>This section is non-normative.</em>

<p>
The WebDriver standard attempts to follow a number of design goals:

<section>
<h3 id=compatibility>Compatibility</h3>

<p>
This specification is derived from the popular
<a href=https://selenium.dev>Selenium WebDriver</a> browser automation framework.
Selenium is a long-lived project,
and due to its age and breadth of use
it has a wide range of expected functionality.
This specification uses these expectations to inform its design.
Where improvements or clarifications have been made,
they have been made with care to allow existing users of Selenium WebDriver
to avoid unexpected breakages.
</section>

<section>
<h3 id=simplicity>Simplicity</h3>

<p>
The largest intended group of users of this specification
are software developers and testers
writing automated tests and other tooling,
such as monitoring or load testing, that relies on automating a browser.
As such, care has been taken to provide commands
that simplify common tasks such as <a lt="Element Send Keys">typing into</a>
and <a lt="Element Click">clicking</a> elements.
</section>

<section>
<h3 id=extensions>Extensions</h3>

<p>
WebDriver provides a mechanism for others to define extensions to the protocol
for the purposes of automating functionality that cannot be implemented entirely
in <a href=https://tc39.github.io/ecma262/>ECMAScript</a>. This allows other
web standards to support the automation of new platform features. It also
allows vendors to expose functionality that is specific to their browser.
</section>
</section> <!-- /Design Notes -->


<section>
<h2 id=conformance>Conformance</h2>
<p>
As well as sections marked as non-normative, all authoring guidelines, diagrams,
examples, and notes in this specification are non-normative. Everything else in
this specification is normative.

<p>
Conformance requirements phrased as algorithms
or specific steps may be implemented in any manner,
so long as the end result is equivalent.
Algorithms in this document are typically written with readability,
rather than performance, in mind.
</section>


<section>
<h2 id=terminology>Terminology</h2>

<p>
In equations, all numbers are integers,
addition is represented by “+”,
subtraction by “−”,
division by “÷”,
and bitwise OR by “|”.
The characters “(” and “)” are used to provide logical grouping in these contexts.

<p>
The mathematical function
<dfn>min</dfn>(<var>value</var>, <var>value</var>[, <var>value</var>])
returns the smallest item of two or more values.
Conversely, the function
<dfn>max</dfn>(<var>value</var>, <var>value</var>[, <var>value</var>])
returns the largest item of two or more values.

<p>
The mathematical function <dfn>floor</dfn>(<var>value</var>)
produces the largest integer, closest to positive infinity,
that is not larger than <var>value</var>.

<p>
A <dfn lt=uuid>Universally Unique IDentifier (UUID)</dfn>
is a 128 bits long URN that requires no central registration process.
<dfn>Generating a UUID</dfn> means
<i>Creating a UUID From Truly Random or Pseudo-Random Numbers</i>,
and converting it to the string representation.
[[RFC4122]]

<p>
The <dfn lt="Unix timestamp|Unix Epoch">Unix Epoch</dfn>
is a value that approximates the number of seconds
that have elapsed since the Epoch,
as described by The Open Group Base Specifications Issue 7
<a href=https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_15>section 4.15</a> (IEEE Std 1003.1).

<p>
An <dfn>integer</dfn> is a <a>Number</a> that is unchanged
under the <a>ToInteger</a> operation.

<p>
The <dfn>initial value</dfn> of an ECMAScript property
is the value defined by the platform for that property,
i.e. the value it would have in the absence of any shadowing by content script.

<!--
‘Chrome’ definition is borrowed
from Web Security Context: User Interface Guidelines:
https://www.w3.org/TR/wsc-ui/#def-chrome
-->
<p>
The <dfn>browser chrome</dfn> is a non-normative term
to refer to the representation through which the user
interacts with the user agent itself,
as distinct from the accessed web content.
Examples of <dfn lt="browser chrome element">browser chrome elements</dfn>
include, but are not limited to,
toolbars (such as the bookmark toolbar),
menus (such as the file or context menu),
buttons (such as the back and forward buttons),
door hangers (such as security and certificate indicators),
and decorations (such as operating system widget borders).
</section> <!-- /Terminology -->


<section>
<h2 id=interface>Interface</h2>

<p>
The <dfn>webdriver-active flag</dfn>
is set to true when the user agent is under remote control.
It is initially false.

<pre class=idl>
interface mixin NavigatorAutomationInformation {
  readonly attribute boolean webdriver;
};
Navigator includes NavigatorAutomationInformation;
</pre>

<p class=note>
The {{NavigatorAutomationInformation}} interface
should not be exposed on {{WorkerNavigator}}.

<dl>
<dt><dfn>webdriver</dfn>
<dd>
<p>Returns true if <a>webdriver-active flag</a> is set, false otherwise.
</dl>

<aside class=example>
<p>
For web authors (non-normative):

<dl>
<dt><code>navigator</code>.<a><code>webdriver</code></a>
<dd><p>
Defines a standard way for co-operating user agents
to inform the document that it is controlled by WebDriver,
for example so that alternate code paths can be triggered during automation.
</dl>
</aside>

<p style="display: none">
It is acknowledged that this is complementary to the Evil Bit [[RFC3514]].
</section>

<section>
<h2 id=nodes>Nodes</h2>

<p>The WebDriver protocol consists of communication between:

<dl>
 <dt><dfn lt="local ends|local">Local end</dfn>
 <dd><p>The local end represents the client side of the protocol,
  which is usually in the form of language-specific libraries
  providing an API on top of the WebDriver <a href=#protocol>protocol</a>.
  This specification does not place any restrictions on the details of those libraries
  above the level of the wire protocol.

 <dt><dfn lt="remote ends|remote">Remote end</dfn>
 <dd>The remote end hosts the server side of the <a href=#protocol>protocol</a>.
  Defining the behavior of a remote end in response to the WebDriver protocol
  forms the largest part of this specification.
</dl>

<p>For <a>remote ends</a> the standard defines two broad conformance
 classes, known as <dfn lt="node type">node types</dfn>:

<dl>
 <dt><dfn lt="intermediary nodes">Intermediary node</dfn>
 <dd>Intermediary nodes are those that act as proxies, implementing
  both the <a>local end</a> and <a>remote end</a> of
  the <a href=#protocol>protocol</a>.  However they are not expected
  to implement <a>remote end steps</a> directly. All nodes between a
  specific <a>intermediary node</a> and a <a>local end</a> are said to
  be <dfn noexport lt="downstream node">downstream</dfn> of that
  node. Conversely, any nodes between a specific <a>intermediary
  node</a> and an <a>endpoint node</a> are said to
  be <dfn lt="upstream node|upstream">upstream</dfn>.

 <dt><dfn>Endpoint node</dfn>
 <dd>An endpoint node is the final <a>remote end</a>
  in a chain of nodes that is not an <a>intermediary node</a>.
  The endpoint node is implemented by a user agent or a similar program.
</dl>

<p>All remote end <a>node types</a> must be black-box indistinguishable
  from a <a>remote end</a>, from the point of view of <a>local end</a>,
  and so are bound by the requirements on a <a>remote end</a> in terms
  of the wire protocol.

<p>
The <dfn>readiness state</dfn> of a <a>remote end</a>
indicates whether it is free to accept new connections.
It must be false if the maximum <a>active sessions</a>
is equal to the length of the list of <a>active sessions</a>,
or if the node is an <a>intermediary node</a>
and is known to be in a state in which attempting to create <a>new sessions</a> would fail.
In all other cases it must be true.

<p class=example>If the <a>intermediary node</a>
 is a multiplexer that manages
 multiple <a lt="endpoint node">endpoint nodes</a>,
 this might indicate its ability to purvey more <a>sessions</a>,
 for example if it has hit its maximum capacity.
</section> <!-- /Nodes -->

<section>
<h2 id=protocol>Protocol</h2>

<p>WebDriver <a>remote ends</a> must provide
 an <a>HTTP compliant</a> wire protocol
 where the <a>endpoints</a> map to different <a>commands</a>.

<p>As this standard only defines the <a>remote end</a> protocol,
 it puts no demands to how <a>local ends</a> should be implemented.
 <a>Local ends</a> are only expected to be compatible to the extent
 that they can speak the <a>remote end</a>’s protocol;
 no requirements are made upon their exposed user-facing API.

<section>
<h3 id=algorithms>Algorithms</h3>

<p>Various parts of this specification are written in terms of step-by-step algorithms.
 The details of these algorithms do not have any normative significance;
 implementations are free to adopt any implementation strategy
 that produces equivalent output to the specification.
 In particular, algorithms in this document are optimised
 for readability rather than performance.

<p>Where algorithms that return values are fallible,
 they are written in terms of returning either
 <dfn>success</dfn> or <dfn lt=errors>error</dfn>.
 A <a>success</a> value has an associated <var>data</var> field
 which encapsulates the value returned,
 whereas an <a>error</a> response has an associated <a>error code</a>.

<p>When calling a fallible algorithm,
 the construct “Let <var>result</var> be the result
 of <dfn lt="try">trying</dfn> to call <var>algorithm</var>”
 is equivalent to

<ol>
 <li><p>Let <var>temp</var> be the result of calling <var>algorithm</var>.

 <li><p>If <var>temp</var> is an <a>error</a> return <var>temp</var>,
  otherwise let <var>result</var> be <var>temp</var>’s <var>data</var> field.
</ol>

<p>The result of <dfn lt="getting properties|getting the
 property|getting a property">getting a property</dfn> with argument <var>name</var> is
 defined as being the same as the result of calling
 <a>Object</a>.<a>\[[GetOwnProperty]]</a>(<var>name</var>).

<p>The result of <dfn lt="getting the property with
 default|getting a property with default">getting a property with default</dfn> with
 arguments <var>name</var> and <var>default</var> is defined as being
 the same as the result of calling
 <a>Object</a>.<a>\[[GetOwnProperty]]</a>(<var>name</var>) if that
 results in a value other than <code>undefined</code>
 and <var>default</var> otherwise.

<p><dfn lt='set a property'>Setting a property</dfn> with
 arguments <var>name</var> and <var>value</var> is defined as being
 the same as calling
 <a>Object</a>.<a>\[[Put]]</a>(<var>name</var>, <var>value</var>).

<p>The result of <dfn>JSON serialization</dfn> with <var>object</var>
  of type JSON <a>Object</a> is defined as the result of
  calling <code>JSON.</code><a>\[[Stringify]]</a>(<var>object</var>).

<p>The result of <dfn lt='parsing as json|JSON deserialization'>JSON deserialization</dfn> with <var>text</var> is defined as
  the result of calling <code>JSON.</code><a>\[[Parse]]</a>(<var>text</var>).
</section> <!-- /Algorithms -->


<section>
<h3 id=commands>Commands</h3>

<p>
The WebDriver protocol is organised into <a>commands</a>.
Each <a>HTTP request</a> with a method and template defined in this specification
represents a single <dfn lt=commands>command</dfn>,
and therefore each command produces a single <a>HTTP response</a>.

<p>
In response to a <a>command</a>,
a <a>remote end</a> will run a series of actions
known as <dfn>remote end steps</dfn>.
These provide the sequences of actions that a <a>remote end</a> takes
when it receives a particular <a>command</a>.
</section>


<section>
<h3 id=processing-model>Processing model</h3>

<p>The <a>remote end</a> is an HTTP server
 reading requests from the client and writing responses,
 typically over a TCP socket.
 For the purposes of this specification we model the data transmission between
 a particular <a>local end</a> and <a>remote end</a> with a <dfn>connection</dfn>
 to which the <a>remote end</a> may <dfn>write bytes</dfn> and <dfn>read bytes</dfn>.
 However the exact details of how this <a>connection</a> works
 and how it is established are out of scope.

<p>After such a <a>connection</a> has been established,
 a <a>remote end</a> must run the following steps:</p>

<ol>
 <li><p><a>Read bytes</a> from the <a>connection</a> until a
  complete <a>HTTP request</a> can be constructed from the data.
  Let <var>request</var> be a <a>request</a> constructed from the
  received data, according to the requirements of [[RFC7230]]. If it
  is not possible to construct a complete <a>HTTP request</a>,
  the <a>remote end</a> must either close the <a>connection</a>,
  return an HTTP response with status code 500, or return
  an <a>error</a> with <a>error code</a> <a>unknown error</a>.

 <li><p>Let <var>request match</var> be the result of the algorithm
  to <a>match a request</a> with <var>request</var>’s
  <a>method</a> and <a>URL</a> as arguments.

 <li><p>If <var>request match</var> is of type <a>error</a>,
  <a>send an error</a> with <var>request match</var>’s <a>error code</a>
  and jump to step 1.

  <p>Otherwise, let <var>command</var> and <var>command parameters</var>
   be <var>request match</var>’s data. Let <var>url variables</var> be a
   <a>url variables</a> dictionary mapping the <var>command parameters</var>
   to their corresponding values.

  <li><p>If <var>session id</var> is among the variables defined by <var>command parameters</var>:

   <p class=note>This condition is intended to exclude the <a>New Session</a> and <a>Status</a>
    <a>commands</a> and any <a>extension commands</a> which do not operate on a particular <a>session</a>.

  <ol>
   <li><p>Let <var>session id</var> be the corresponding variable
    from <var>command parameters</var>.

   <li><p>Let the <a>current session</a> be the <a>session</a>
    with <a lt="session id">ID</a> <var>session id</var>
    in the list of <a>active sessions</a>,
    or <a><code>null</code></a> if there is no such matching <a>session</a>.

   <li><p>If the <a>current session</a> is <a><code>null</code></a>
   <a>send an error</a> with <a>error code</a> <a>invalid session id</a>,
   then jump to step 1 in this overall algorithm.

   <li><p>If the <a>current session</a> is not <a><code>null</code></a>:

    <ol>
      <li><p>Enqueue <var>request</var>
       in the <a>current session</a>’s <a>request queue</a>.

      <li><p>Wait until the first element
       in the <a>current session</a>’s <a>request queue</a>
       is <var>request</var>:

      <li><p>Dequeue <var>request</var> from the <a>current session</a>’s <a>request queue</a>.

      <li><p>If the list of <a>active sessions</a> no longer contains the <a>current session</a>,
       set the <a>current session</a> to <a><code>null</code></a>.
    </ol>
  </ol>

 <li><p>If <var>request</var>’s <a>method</a> is POST:

  <ol>
   <li><p>Let <var>parse result</var> be the result of
    <a>parsing as JSON</a> with <var>request</var>’s
    <a>body</a> as the argument. If this process throws an exception,
    return an <a>error</a> with <a>error code</a> <a>invalid
    argument</a> and jump back to step 1 in this overall algorithm.

   <li><p>If <var>parse result</var> is not an <a>Object</a>,
    <a>send an error</a> with <a>error code</a> <a>invalid argument</a>
    and jump back to step 1 in this overall algorithm.

    <p>Otherwise, let <var>parameters</var> be <var>parse result</var>.
  </ol>

  <p>Otherwise, let <var>parameters</var> be <a><code>null</code></a>.

 <li><p><a>Wait for navigation to complete</a>. If this returns
  an <a>error</a> <a lt="send an error">return its value</a> and
  jump to step 1 in this overall algorithm, otherwise continue.

 <li><p>Let <var>response result</var> be the return value
  obtained by running the <a>remote end steps</a> for <var>command</var>
  with an argument named <var>url variables</var> whose value is
  <var>url variables</var> and an
  additional argument named <var>parameters</var> whose value is
  <var>parameters</var>.

 <li><p>If <var>response result</var> is an <a>error</a>,
  <a>send an error</a> with <a>error code</a>
  equal to <var>response result</var>’s <a>error code</a>
  and jump back to step 1 in this overall algorithm.

  <p>Otherwise, if <var>response result</var> is a <a>success</a>,
   let <var>response data</var> be <var>response result</var>’s data.

 <li><p><a>Send a response</a> with status 200 and <var>response data</var>.

 <li><p>Jump to step 1.
</ol>

<p>When required to <dfn>send an error</dfn>,
 with <var>error code</var>
 and an optional <var ignore>error data</var> dictionary,
 a <a>remote end</a> must run the following steps:</p>

<ol>
 <li><p>Let <var>status</var> and <var>name</var>
  be the <a>error response data</a> for <var>error code</var>.

 <li><p>Let <var>message</var> be an implementation-defined string
  containing a human-readable description of the reason for the error.

 <li><p>Let <var>stacktrace</var> be an implementation-defined string
  containing a stack trace report of the active stack frames
  at the time when the error occurred.

  <p>Let <var>body</var> be a new JSON <a>Object</a>
   initialised with the following properties:

  <dl>
   <dt>"<code>error</code>"
   <dd><var>name</var>

   <dt>"<code>message</code>"
   <dd><var>message</var>

   <dt>"<code>stacktrace</code>"
   <dd><var>stacktrace</var>
  </dl>

 <li><p>If the <a>error data</a> dictionary contains any entries,
  set the "<code>data</code>" field on <var>body</var>
  to a new JSON <a>Object</a> populated with the dictionary.

 <li><p><a>Send a response</a> with <var>status</var>
  and <var>body</var> as arguments.
</ol>

<p>When required to <dfn>send a response</dfn>,
 with arguments <var>status</var> and <var>data</var>,
 a <a>remote end</a> must run the following steps:

<ol>
 <li><p>Let <var>response</var> be a new <a>response</a>.

 <li><p>Set <var>response</var>’s <a>HTTP status</a> to <var>status</var>,
  and <a>status message</a> to the string corresponding
  to the description of <var>status</var> in the <a>status code registry</a>.

 <li><p><a lt="set header">Set</a> the <var>response</var>’s <a>header</a>
  with <a lt="header name">name</a>
  and <a lt="header value">value</a>
  with the following values:

  <dl>
   <dt><code>Content-Type</code>
   <dd>"<code>application/json; charset=utf-8</code>"

   <dt><code>Cache-Control</code>
   <dd>"<code>no-cache</code>"
  </dl>

 <li><p>Let <var>response</var>’s <a>body</a> be
  the <a lt="utf-8 encode">UTF-8 encoded</a> <a>JSON
  serialization</a> of a JSON <a>Object</a> with a key
  "<code>value</code>" set to <var>data</var>.

 <li><p>Let <var>response bytes</var> be the byte sequence resulting
  from serializing <var>response</var> according to the rules in [[RFC7230]].

 <li><p><a lt="write bytes">Write</a> <var>response bytes</var>
  to the <a>connection</a>.
</ol>
<p>A <dfn lt="url variables">url variable</dfn> dictionary is defined
  as the mapping of a <a>command</a>’s <a>URI template</a> variable names
  to their corresponding values.
</section> <!-- /Processing model -->

<section>
<h3 id=routing-requests>Routing requests</h3>

<p><dfn lt="routing requests|request routing">Request routing</dfn>
 is the process of going from a <a>HTTP request</a>
 to the <a lt="remote end steps">series of steps</a> needed
 to implement the <a>command</a> represented by that request.

<p>A <a>remote end</a> has an associated <dfn>URL prefix</dfn>,
 which is used as a prefix on all WebDriver-defined URLs on that <a>remote end</a>.
 This must either be <a>undefined</a> or a <a>path-absolute URL</a>.

<aside class=example>
 <p>For example a <a>remote end</a> wishing
  to run alongside other services on <code>example.com</code>
  might set its <a>URL prefix</a> to <code>/wd</code>
  so that a <a>new session</a> <a>command</a> would be invoked
  by sending a POST request to <code>/wd/session</code>,
  rather than <code>/session</code>.
</aside>

<p>In order to <dfn>match a request</dfn> given
 a <a><var>method</var></a> and <a><var>URL</var></a>,
 the following steps must be taken:

<ol>
 <li><p>Let <var>endpoints</var> be a list
  containing each row in the <a>table of endpoints</a>.

 <li><p>Remove each entry from <var>endpoints</var>
  for which the concatenation of the <a>URL prefix</a>
  and the entry’s <a>URI template</a>
  does not match <var>URL</var>’s <a>path</a>.

 <li><p>If there are no entries in <var>endpoints</var>,
  return <a>error</a> with <a>error code</a> <a>unknown command</a>.

 <li><p>Remove each entry in <var>endpoints</var>
  for which the <i>method</i> column
  is not equal to <var>method</var>.

 <li><p>If there are no entries in <var>endpoints</var>,
  return <a>error</a> with <a>error code</a> <a>unknown method</a>.

 <li><p>There is now exactly one entry in <var>endpoints</var>;
  let <var>entry</var> be this entry.

 <li><p>Let <var>parameters</var> be the result of extracting the variables
  from <var>URL</var> using <var>entry</var>’s <a>URI template</a>.

 <li><p>Let <var>command</var> be <var>entry</var>’s <a>command</a>.

 <li><p>Return <a>success</a> with data
  <var>command</var> and <var>parameters</var>.
</ol>
</section> <!-- /Routing requests -->

<section>
<h3 id=endpoints>Endpoints</h3>

<p>The following <dfn lt="endpoints|table of endpoints">table of endpoints</dfn> lists
 the <a>method</a> and <a>URI template</a> for each <a>endpoint
 node</a> <a>command</a>. <a>Extension commands</a> are implicitly
 appended to this table.

<table class=simple>
 <tr>
  <th>Method</th>
  <th>URI Template</th>
  <th>Command</th>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session</td>
  <td><a>New Session</a></td>
 </tr>

 <tr>
  <td>DELETE</td>
  <td>/session/{<var>session id</var>}</td>
  <td><a>Delete Session</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/status</td>
  <td><a>Status</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/timeouts</td>
  <td><a>Get Timeouts</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/timeouts</td>
  <td><a>Set Timeouts</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/url</td>
  <td><a>Navigate To</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/url</td>
  <td><a>Get Current URL</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/back</td>
  <td><a>Back</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/forward</td>
  <td><a>Forward</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/refresh</td>
  <td><a>Refresh</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/title</td>
  <td><a>Get Title</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/window</td>
  <td><a>Get Window Handle</a></td>
 </tr>

 <tr>
  <td>DELETE</td>
  <td>/session/{<var>session id</var>}/window</td>
  <td><a>Close Window</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/window</td>
  <td><a>Switch To Window</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/window/handles</td>
  <td><a>Get Window Handles</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/window/new</td>
  <td><a>New Window</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/frame</td>
  <td><a>Switch To Frame</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/frame/parent</td>
  <td><a>Switch To Parent Frame</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/window/rect</td>
  <td><a>Get Window Rect</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/window/rect</td>
  <td><a>Set Window Rect</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/window/maximize</td>
  <td><a>Maximize Window</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/window/minimize</td>
  <td><a>Minimize Window</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/window/fullscreen</td>
  <td><a>Fullscreen Window</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/active</td>
  <td><a>Get Active Element</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/element</td>
  <td><a>Find Element</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/elements</td>
  <td><a>Find Elements</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/element/{element id}/element</td>
  <td><a>Find Element From Element</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/element/{element id}/elements</td>
  <td><a>Find Elements From Element</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/selected</td>
  <td><a>Is Element Selected</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/attribute/{<var>name</var>}</td>
  <td><a>Get Element Attribute</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/property/{<var>name</var>}</td>
  <td><a>Get Element Property</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/css/{<var>property name</var>}</td>
  <td><a>Get Element CSS Value</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/text</td>
  <td><a>Get Element Text</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/name</td>
  <td><a>Get Element Tag Name</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/rect</td>
  <td><a>Get Element Rect</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/enabled</td>
  <td><a>Is Element Enabled</a></td>
 </tr>

<tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/computedrole</td>
  <td><a>Get Computed Role</a></td>
</tr>

<tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/computedlabel</td>
  <td><a>Get Computed Label</a></td>
</tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/click</td>
  <td><a>Element Click</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/clear</td>
  <td><a>Element Clear</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/value</td>
  <td><a>Element Send Keys</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/source</td>
  <td><a>Get Page Source</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/execute/sync</td>
  <td><a>Execute Script</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/execute/async</td>
  <td><a>Execute Async Script</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/cookie</td>
  <td><a>Get All Cookies</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/cookie/{<var>name</var>}</td>
  <td><a>Get Named Cookie</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/cookie</td>
  <td><a>Add Cookie</a></td>
 </tr>

 <tr>
  <td>DELETE</td>
  <td>/session/{<var>session id</var>}/cookie/{<var>name</var>}</td>
  <td><a>Delete Cookie</a></td>
 </tr>

 <tr>
  <td>DELETE</td>
  <td>/session/{<var>session id</var>}/cookie</td>
  <td><a>Delete All Cookies</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/actions</td>
  <td><a>Perform Actions</a></td>
 </tr>

 <tr>
  <td>DELETE</td>
  <td>/session/{<var>session id</var>}/actions</td>
  <td><a>Release Actions</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/alert/dismiss</td>
  <td><a>Dismiss Alert</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/alert/accept</td>
  <td><a>Accept Alert</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/alert/text</td>
  <td><a>Get Alert Text</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/alert/text</td>
  <td><a>Send Alert Text</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/screenshot</td>
  <td><a>Take Screenshot</a></td>
 </tr>

 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/screenshot</td>
  <td><a>Take Element Screenshot</a></td>
 </tr>

 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/print</td>
  <td><a>Print Page</a></td>
 </tr>
</table>
</section> <!-- /Endpoints -->

<section>
<h3 id=errors>Errors</h3>

<p><a>Errors</a> are represented in the WebDriver protocol
 by an <a>HTTP response</a> with an <a>HTTP status</a> in the 4xx or 5xx range,
 and a JSON body containing details of the <a>error</a>.
 The body is a JSON <a>Object</a>
 and has a field named "<code>value</code>"
 whose value is an object bearing three, and sometimes four, fields:
 <ul>
  <li>"<code>error</code>", containing a string indicating the <a>error code</a>.
  <li>"<code>message</code>", containing an implementation-defined string
   with a human readable description of the kind of error that occurred.
  <li>"<code>stacktrace</code>", containing an implementation-defined string
   with a stack trace report of the active stack frames at the time when the error occurred.
  <li>Optionally "<code>data</code>", which is a JSON <a>Object</a>
   with additional <a>error data</a> helpful in diagnosing the error.
 </ul>

<aside class=example>
 <p>A <code>GET</code> request to <code>/session/1234/url</code>,
 where <code>1234</code> is not the <a>session id</a> of a <a>current session</a>
 would return an <a>HTTP response</a> with the status 404 and a body of the form:

 <pre><code>{
	"value": {
		"error": "invalid session id",
		"message": "No active session with ID 1234",
		"stacktrace": ""
	}
}</code></pre>

 <p>Certain commands may also annotate <a>errors</a>
  with additional <a>error data</a>.
  Notably, this is the case for commands
  which invoke the <a>user prompt handler</a>,
  where the <a>user prompt message</a>
  may be included in a "<code>text</code>" field:

 <pre><code>{
	"value": {
		"error": "unexpected alert open",
		"message": "",
		"stacktrace": "",
		"data": {
			"text": "Message from window.alert"
		}
	}
}</code></pre>
</aside>

<p>The following table lists each <dfn>error code</dfn>,
 its associated <a>HTTP status</a>,
 JSON <code>error</code> code,
 and a non-normative description of the error.
 The <dfn>error response data</dfn> for a particular <a>error code</a>
 is the values of the <i>HTTP Status</i>
 and <i>JSON Error Code</i> columns for the row corresponding to that <a>error code</a>.

<table class=simple>
 <tr>
  <th>Error Code
  <th>HTTP Status
  <th>JSON Error Code
  <th>Description
 </tr>

 <tr>
  <td><dfn>element click intercepted</dfn>
  <td>400
  <td><code>element click intercepted</code>
  <td>The <a>Element Click</a> <a>command</a> could not be completed
   because the <a>element</a> receiving the events
   is <a>obscuring</a> the element that was requested clicked.
 </tr>

 <tr>
  <td><dfn>element not interactable</dfn>
  <td>400
  <td><code>element not interactable</code>
  <td>A <a>command</a> could not be completed
   because the element is not
   <a lt="pointer-interactable">pointer</a>- or
   <a lt="keyboard-interactable">keyboard</a> <a>interactable</a>.
 </tr>

 <tr>
  <td><dfn>insecure certificate</dfn>
  <td>400
  <td><code>insecure certificate</code>
  <td><a>Navigation</a> caused
   the user agent to hit a certificate warning,
   which is usually the result of an expired or invalid TLS certificate.

 <tr>
  <td><dfn>invalid argument</dfn>
  <td>400
  <td><code>invalid argument</code>
  <td>The arguments passed to a <a>command</a>
   are either invalid or malformed.
 </tr>

 <tr>
  <td><dfn>invalid cookie domain</dfn>
  <td>400
  <td><code>invalid cookie domain</code>
  <td>An illegal attempt was made to set a cookie
   under a different domain than the current page.
 </tr>

 <tr>
  <td><dfn>invalid element state</dfn>
  <td>400
  <td><code>invalid element state</code>
  <td>A <a>command</a> could not be completed because the element is
   in an invalid state, e.g. attempting to
   <a lt="Element Clear">clear</a> an element that isn’t
   both <a>editable</a> and <a>resettable</a>.
 </tr>

 <tr>
  <td><dfn>invalid selector</dfn>
  <td>400
  <td><code>invalid selector</code>
  <td>Argument was an invalid selector.
 </tr>

 <tr>
  <td><dfn>invalid session id</dfn>
  <td>404
  <td><code>invalid session id</code>
  <td>Occurs if the given <a>session id</a> is not in the list of <a>active sessions</a>,
   meaning the <a>session</a> either does not exist or that it’s not active.
 </tr>

 <tr>
  <td><dfn>javascript error</dfn>
  <td>500
  <td><code>javascript error</code>
  <td>An error occurred while executing JavaScript supplied by the user.
 </tr>

 <tr>
  <td><dfn>move target out of bounds</dfn>
  <td>500
  <td><code>move target out of bounds</code>
  <td>The target for mouse interaction is not in the browser’s viewport
   and cannot be brought into that viewport.
 </tr>

 <tr>
  <td><dfn>no such alert</dfn>
  <td>404
  <td><code>no such alert</code>
  <td>An attempt was made to operate on a modal dialog
   when one was not open.
 </tr>

 <tr>
  <td><dfn>no such cookie</dfn>
  <td>404
  <td><code>no such cookie</code>
  <td>No cookie matching the given path name
   was found amongst the <a>associated cookies</a>
   of the <a>current browsing context</a>’s <a>active document</a>.
 </tr>

 <tr>
  <td><dfn>no such element</dfn>
  <td>404
  <td><code>no such element</code>
  <td>An element could not be located on the page
   using the given search parameters.
 </tr>

 <tr>
  <td><dfn>no such frame</dfn>
  <td>404
  <td><code>no such frame</code>
  <td>A <a>command</a> to switch to a frame
   could not be satisfied because the frame could not be found.
 </tr>

 <tr>
  <td><dfn>no such window</dfn>
  <td>404
  <td><code>no such window</code>
  <td>A <a>command</a> to switch to a window
   could not be satisfied because the window could not be found.
 </tr>

 <tr>
  <td><dfn>script timeout error</dfn>
  <td>500
  <td><code>script timeout</code>
  <td>A script did not complete before its timeout expired.
 </tr>

 <tr>
  <td><dfn>session not created</dfn>
  <td>500
  <td><code>session not created</code>
  <td>A new <a>session</a> could not be created.
 </tr>

 <tr>
  <td><dfn>stale element reference</dfn>
  <td>404
  <td><code>stale element reference</code>
  <td>A <a>command</a> failed because
   the referenced <a>element</a> is no longer attached to the DOM.
 </tr>

 <tr>
  <td><dfn>timeout</dfn>
  <td>500
  <td><code>timeout</code>
  <td>An operation did not complete before its timeout expired.
 </tr>

 <tr>
  <td><dfn>unable to set cookie</dfn>
  <td>500
  <td><code>unable to set cookie</code>
  <td>A <a>command</a> to set a cookie’s value could not be satisfied.
 </tr>

 <tr>
  <td><dfn>unable to capture screen</dfn>
  <td>500
  <td><code>unable to capture screen</code>
  <td>A screen capture was made impossible.
 </tr>

 <tr>
  <td><dfn>unexpected alert open</dfn>
  <td>500
  <td><code>unexpected alert open</code>
  <td>A modal dialog was open, blocking this operation.
 </tr>

 <tr>
  <td><dfn>unknown command</dfn>
  <td>404
  <td><code>unknown command</code>
  <td>A <a>command</a> could not be executed
   because the <a>remote end</a> is not aware of it.
 </tr>

 <tr>
  <td><dfn>unknown error</dfn>
  <td>500
  <td><code>unknown error</code>
  <td>An unknown error occurred in the <a>remote end</a>
   while processing the <a>command</a>.
 </tr>

 <tr>
  <td><dfn>unknown method</dfn>
  <td>405
  <td><code>unknown method</code>
  <td>The requested <a>command</a> matched a known URL
   but did not match an method for that URL.
 </tr>

 <tr>
  <td><dfn>unsupported operation</dfn>
  <td>500
  <td><code>unsupported operation</code>
  <td>Indicates that a <a>command</a> that should have
   executed properly cannot be supported for some reason.
 </tr>
</table>

<p>An <dfn>error data</dfn> dictionary
 is a mapping of string keys to JSON serializable values
 that can optionally be included with <a>error</a> objects.

</section> <!-- /Errors -->

<section>
<h3 id=extensions-0>Extensions</h3>

<p>Using the terminology defined in this section, others may define additional
 commands that seamlessly integrate with the standard protocol. This allows
 vendors to expose functionality that is specific to their user agent, and it
 also allows other web standards to define commands for automating new platform
 features.

<p>Commands defined in this way
 are called <dfn lt="extension command">extension commands</dfn>
 and behave no differently than other <a>commands</a>;
 each has a dedicated HTTP endpoint and a set of <a>remote end steps</a>.

<p>Each <a>extension command</a> has an associated
 <dfn>extension command URI Template</dfn>
 that is a <a>URI Template</a> string,
 and which should bear some resemblance to what the command performs.
 This value,
 along with the HTTP method and <a>extension command</a>,
 is added to the <a>table of endpoints</a>
 and thus follows the same rules for <a>request routing</a>
 as that of other built-in <a>commands</a>.

<p>In order to avoid potential resource conflicts with other implementations,
 vendor-specific <a lt="extension command URI Template">extension command URI Templates</a> must begin with one
 or more path segments which uniquely identifies the vendor and UA.
 It is suggested that vendors use their vendor prefixes
 without additional characters as outlined in [[CSS21]],
 notably in <a href=https://www.w3.org/TR/CSS21/syndata.html#vendor-keywords>section 4.1.2.2 on <i>vendor keywords</i></a>,
 as the name for this path element,
 and include a vendor-chosen UA identifier.

<aside class=note>
 If the <a>extension command URI Template</a> includes a variable named
 <var>session id</var>, the value of this variable will be used to define the
 <a>current session</a> during command processing.
</aside>

<aside class=example>
 <p>This might lead to a URL of the form
  <code>/session/5d376174-36f0-11e5-9b9a-6bdf200a3f7f/<em>ms</em>/<em>edge</em>/<em>context</em></code>,
  where <code>session/{<var>session id</var>}</code> associates the request
  with the specified session, <code>ms/edge</code> identifies the command as
  specific to the Edge browser distributed by Microsoft,
  and <code>context</code> describes the functionality
  that, in the context of Edge, allows a <a>local end</a>
  to switch between browser-specific contexts.
  Requesting this URL will call the <a>extension command</a>’s
  <a>remote end steps</a>.
</aside>

<p>Other specifications may define <dfn lt="additional WebDriver
capability">additional WebDriver capabilities</dfn>. Each defined
capability must have a <dfn noexport>capability name</dfn> which is a string
not containing a "<code>:</code>" (colon) character,
an <dfn>additional capability deserialization algorithm</dfn> which is
a set of steps taking a single argument <var>value</var> which has a
JSON type, returning either <a>success</a> wrapping the deserialized
capability value or <a>error</a>.

<p>An <a>additional WebDriver capability</a> may also define
a <dfn>matched capability serialization algorithm</dfn>, which is a
set of steps used to determine if a capability is matched by the
current implementation and provide any computed value to return to the
user. This set of steps takes a single argument <var>value</var>,
which is the output of the corresponding <a>additional capability
deserialization algorithm</a>, and returns
either <a><code>null</code></a> to indicate the capability is not
matched, or a non-null JSON-serializable value if the capability is
matched.

<p>Other specifications may also define <dfn lt="WebDriver new
session algorithm">WebDriver new session algorithms</dfn>, which are
called just after a new session is created, and before the <a>new
session</a> response is sent to the <a>remote end</a>. These
algorithms are called with <var>session</var> representing the
WebDriver session that will be established, and
<var ignore>capabilites</var>, the capabilities object that will be returned
to the <a>remote end</a>. It is permitted for such an algorithm to
modify any entry in the capabilities object with a name that's an
<a>additional WebDriver capability</a> defined by the same
specification.

<p><a>Remote ends</a> may also introduce
 <dfn lt="extension capability">extension capabilities</dfn>
 that are extra <a>capabilities</a>
 used to provide configuration or fulfill other vendor-specific needs.
 Extension capabilities’ key
 must contain a "<code>:</code>" (colon) character,
 denoting an implementation specific namespace.
 The value can be arbitrary JSON types.

<p>As with <a>extension commands</a>,
 it is suggested that the key used to denote
 the <a>extension capability</a> namespace
 is based on the <a href=https://www.w3.org/TR/CSS21/syndata.html#vendor-keywords>vendor keywords</a>
 listed in [[CSS21]]
 and precedes the first "<code>:</code>" character in the string.

<aside class=example>
 <p><a>Extension capabilities</a> are typically used
  to provide UA or <a>intermediary node</a> specific configuration
  that is not handled by the <a>table of standard capabilities</a>.

 <p>An example <a>new session</a> request body
  might look like this:

 <pre>{
  "capabilities": {
    "alwaysMatch": {
      // browser specific configuration
      "&lt;prefix&gt;:browserOptions": {
        "binary": "/usr/bin/browser-binary",
        "args": ["--start-page=https://example.com"],
      }
    }
  }
}</pre>
</aside>

</section> <!-- /Extensions -->
</section> <!-- /Protocol -->

<section>
<h2 id=capabilities>Capabilities</h2>

<p>WebDriver <dfn lt="capability">capabilities</dfn>
 are used to communicate the features supported by a given implementation.
 The <a>local end</a> may use capabilities
 to define which features it requires the <a>remote end</a>
 to satisfy when creating a <a>new session</a>.
 Likewise, the <a>remote end</a> uses capabilities
 to describe the full feature set for a <a>session</a>.

<p>The following <dfn>table of standard capabilities</dfn>
 enumerates the capabilities each implementation must support.
 An implementation may define additional <a>extension capabilities</a>.

<aside class="example">
<p>As an example, Mozilla could elect to hide new features behind capabilities
with a "<code>moz:</code>" prefix:

<pre>{
	"browserName": "firefox",
	"browserVersion": "1234",
	"moz:experimental-webdriver": true
}</pre>
</aside>

<table class=simple>
 <thead>
   <tr>
    <th>Capability
    <th>Key
    <th>Value Type
    <th>Description
   </tr>
 </thead>

 <tr>
  <td><dfn noexport>Browser name</dfn>
  <td>"<code>browserName</code>"
  <td>string
  <td>Identifies the user agent.
 </tr>

 <tr>
  <td><dfn noexport>Browser version</dfn>
  <td>"<code>browserVersion</code>"
  <td>string
  <td>Identifies the version of the user agent.
 </tr>

 <tr>
  <td><dfn noexport>Platform name</dfn>
  <td>"<code>platformName</code>"
  <td>string
  <td>Identifies the operating system of the <a>endpoint node</a>.
 </tr>

 <tr>
  <td><dfn lt="insecure TLS Certificates">Accept insecure TLS certificates</dfn>
  <td>"<code>acceptInsecureCerts</code>"
  <td>boolean
  <td>Indicates whether untrusted and self-signed TLS certificates
   are implicitly trusted on <a>navigation</a>
   for the duration of the <a>session</a>.
 </tr>

 <tr>
  <td><dfn>Page load strategy</dfn>
  <td>"<code>pageLoadStrategy</code>"
  <td>string
  <td>Defines the <a>current session</a>’s <a>page load strategy</a>.
 </tr>

 <tr>
  <td>Proxy configuration
  <td>"<code>proxy</code>"
  <td>JSON <a>Object</a>
  <td>Defines the <a>current session</a>’s <a>proxy configuration</a>.
 </tr>

 <tr>
  <td><dfn>Window dimensioning/positioning</dfn>
  <td>"<code>setWindowRect</code>"
  <td>boolean
  <td>Indicates whether the remote end supports all of the <a href=#resizing-and-positioning-windows>resizing and repositioning</a> <a>commands</a>.
 </tr>

 <tr>
  <td><a>Session timeouts</a>
  <td>"<code>timeouts</code>"
  <td>JSON <a>Object</a>
  <td>Describes the <a href=#timeouts>timeouts</a> imposed on certain session operations.
 </tr>

 <tr>
  <td><dfn>Strict file interactability</dfn>
  <td>"<code>strictFileInteractability</code>"
  <td>boolean
  <td>Defines the <a>current session</a>’s <a>strict file interactability</a>.
 </tr>

 <tr>
  <td><dfn>Unhandled prompt behavior</dfn>
  <td>"<code>unhandledPromptBehavior</code>"
  <td>string
  <td>Describes the <a>current session</a>’s <a>user prompt handler</a>.
   Defaults to the <a>dismiss and notify state</a>.
 </tr>
</table>

<section>
<h3 id=proxy>Proxy</h3>

<p>The <dfn>proxy configuration</dfn> capability
 is a JSON <a>Object</a> nested
 within the primary <a>capabilities</a>.
 Implementations may define additional proxy configuration options,
 but they must not alter the semantics of those listed below.

<table class=simple>
 <thead>
  <tr>
   <th>Key
   <th>Value Type
   <th>Description
   <th>Valid values
 </tr>
 </thead>

 <tr>
  <td><dfn noexport><code>proxyType</code></dfn>
  <td>string
  <td>Indicates the type of proxy configuration.
  <td>"<code>pac</code>",
   "<code>direct</code>",
   "<code>autodetect</code>",
   "<code>system</code>",
   or "<code>manual</code>".
</tr>

 <tr>
  <td><dfn noexport><code>proxyAutoconfigUrl</code></dfn>
  <td>string
  <td>Defines the URL for a proxy auto-config file
   if <a><code>proxyType</code></a>
   is equal to "<code>pac</code>".
  <td>Any <a>URL</a>.
 </tr>

 <tr>
  <td><dfn noexport><code>ftpProxy</code></dfn>
  <td>string
  <td>Defines the proxy <a>host</a> for FTP traffic when
   the <a><code>proxyType</code></a> is "<code>manual</code>".
  <td>A <a>host and optional port</a> for
   scheme "<code>ftp</code>".
 </tr>

 <tr>
  <td><dfn noexport><code>httpProxy</code></dfn>
  <td>string
  <td>Defines the proxy <a>host</a> for HTTP traffic when
   the <a><code>proxyType</code></a> is "<code>manual</code>".
  <td>A <a>host and optional port</a> for
   scheme "<code>http</code>".
 </tr>

 <tr>
  <td><dfn noexport><code>noProxy</code></dfn>
  <td>array
  <td>Lists the address for which the proxy should be bypassed when
   the <a><code>proxyType</code></a> is "<code>manual</code>".
  <td>A <a>List</a> containing any number of <a>String</a>s.
 </tr>

 <tr>
  <td><dfn noexport><code>sslProxy</code></dfn>
  <td>string
  <td>Defines the proxy <a>host</a> for encrypted TLS traffic
   when the <a><code>proxyType</code></a> is "<code>manual</code>".
  <td>A <a>host and optional port</a> for
   scheme "<code>https</code>".
 </tr>

 <tr>
  <td><dfn noexport><code>socksProxy</code></dfn>
  <td>string
  <td>Defines the proxy <a>host</a> for a <a>SOCKS proxy</a>
   when the <a><code>proxyType</code></a> is "<code>manual</code>".
  <td>A <a>host and optional port</a> with an <a>undefined</a> scheme.
 </tr>

 <tr>
  <td><dfn noexport><code>socksVersion</code></dfn>
  <td>number
  <td>Defines the <a>SOCKS proxy</a> version
   when the <a><code>proxyType</code></a> is "<code>manual</code>".
  <td>Any <a>integer</a> between 0 and 255 inclusive.
  </tr>

</table>

<p>A <dfn>host and optional port</dfn> for a <var>scheme</var> is
  defined as being a valid <a>host</a>, optionally followed by a colon
  and a valid <a>port</a>. The <a>host</a> may
  <a lt="includes credentials">include credentials</a>. If the
  port is omitted and <var>scheme</var> has a <a>default port</a>,
  this is the implied port. Otherwise, the port is left undefined.

<p>A <a><code>proxyType</code></a> of "<code>direct</code>" indicates
 that the browser should not use a proxy at all.

<p>A <a><code>proxyType</code></a> of "<code>system</code>" indicates
 that the browser should use the various proxies configured for the
 underlying Operating System.

<p>A <a><code>proxyType</code></a> of "<code>autodetect</code>"
 indicates that the proxy to use should be detected in an
 implementation-specific way.

<p>The <a>remote end</a> steps to <dfn>deserialize as a proxy</dfn>
 argument <var>parameter</var> are:

<ol>
 <li><p>If <var>parameter</var> is not a JSON <a>Object</a> return
  an <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>proxy</var> be a new, empty
  <a>proxy configuration object</a>.

 <li><p>For each enumerable <a>own property</a> in <var>parameter</var>
  run the following substeps:
  <ol>
   <li><p>Let <var>key</var> be the name of the property.

   <li><p>Let <var>value</var> be the result of <a>getting a
    property</a> named <var>name</var> from <var>parameter</var>.

   <li><p>If there is no matching <code>key</code> for <var>key</var>
    in the <a>proxy configuration</a> table return an <a>error</a>
    with <a>error code</a> <a>invalid argument</a>.

   <li><p>If <var>value</var> is not one of the
    <code>valid values</code> for that <code>key</code>, return
    an <a>error</a> with <a>error code</a> <a>invalid argument</a>.

   <li><p><a>Set a property</a> <var>key</var> to <var>value</var>
    on <var>proxy</var>.
  </ol>

 <li><p>If <var>proxy</var> does not have an <a>own property</a> for
  "<code>proxyType</code>" return an <a>error</a> with <a>error
  code</a> <a>invalid argument</a>.

 <li><p>If the result of <a>getting a property</a>
  named "<code>proxyType</code>" from <var>proxy</var> equals
  "<code>pac</code>", and <var>proxy</var> does not have an
  <a>own property</a> for "<code>proxyAutoconfigUrl</code>" return
  an <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>If <var>proxy</var> has an <a>own property</a> for
  "<code>socksProxy</code>" and does not have an <a>own property</a>
  for "<code>socksVersion</code>" return an <a>error</a> with <a>error
  code</a> <a>invalid argument</a>.

 <li><p>Return <a>success</a> with data <var>proxy</var>.
</ol>

<p>A <dfn>proxy configuration object</dfn> is a
 JSON <a>Object</a> where each of its <a>own properties</a> matching
 keys in the <a>proxy configuration</a> meets the validity criteria for
 that key.

</section> <!-- /Proxy -->

<section>
<h3 id=processing-capabilities>Processing capabilities</h3>

<p>To <dfn lt="capabilities processing|process capabilities">process capabilities</dfn>
 with argument <var>parameters</var>,
 the <a>endpoint node</a> must take the following steps:

<ol>
 <li><p>Let <var>capabilities request</var> be the result of <a>getting the property</a>
  "<code>capabilities</code>" from <var>parameters</var>.

  <ol>
   <li><p>If <var>capabilities request</var> is not a JSON object,
    return <a>error</a> with <a>error code</a> <a>invalid argument</a>.
  </ol>

 <li><p>Let <var>required capabilities</var> be the result of <a>getting the property</a>
  "<code>alwaysMatch</code>" from <var>capabilities request</var>.

  <ol>
   <li><p>If <var>required capabilities</var> is <a>undefined</a>,
    set the value to an empty JSON <a>Object</a>.

   <li><p>Let <var>required capabilities</var> be the result
    of <a>trying</a> to <a>validate capabilities</a> with
    argument <var>required capabilities</var>.
  </ol>

 <li><p>Let <var>all first match capabilities</var> be the result of <a>getting the property</a>
  "<code>firstMatch</code>" from <var>capabilities request</var>.

  <ol>
   <li><p>If <var>all first match capabilities</var> is <a>undefined</a>,
    set the value to a JSON <a>List</a> with a single entry of an empty JSON <a>Object</a>.

   <li><p>If <var>all first match capabilities</var> is not a
   JSON <a>List</a> with one or more entries, return <a>error</a>
   with <a>error code</a> <a>invalid argument</a>.
  </ol>

 <li><p>Let <var>validated first match capabilities</var> be an empty
  JSON <a>List</a>.

 <!-- Validate all entries first so we fail as quickly as possible -->
 <li><p>For each <var>first match capabilities</var> corresponding
  to an indexed property in <var>all first match capabilities</var>:
  <ol>
   <li><p>Let <var>validated capabilities</var> be the result
    of <a>trying</a> to <a>validate capabilities</a> with argument
    <var>first match capabilities</var>.

   <li><p>Append <var>validated capabilities</var> to
    <var>validated first match capabilities</var>.
  </ol>

  <li><p>Let <var>merged capabilities</var> be an empty <a>List</a>.

  <li><p>For each <var>first match capabilities</var> corresponding
   to an indexed property in <var>validated first match capabilities</var>:
   <ol>
    <li><p>Let <var>merged</var> be the result of
     <a>trying</a> to <a lt="merging capabilities">merge
     capabilities</a> with <var>required capabilities</var>
     and <var>first match capabilities</var> as arguments.

    <li><p>Append <var>merged</var> to <var>merged capabilities</var>.
   </ol>

  <li><p>For each <var>capabilities</var> corresponding
   to an indexed property in <var>merged capabilities</var>:
   <ol>
    <li><p>Let <var>matched capabilities</var> be the result of
     <a>trying</a> to <a lt="matching capabilities">match
     capabilities</a> with <var>capabilities</var> as an
     argument.

    <li><p>If <var>matched capabilities</var> is not <a><code>null</code></a>,
     return <a>success</a> with data <var>matched capabilities</var>.
  </ol>

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>

<p>When required to <dfn>validate capabilities</dfn> with
 argument <var>capability</var>:

<ol>
 <li><p>If <var>capability</var> is not a JSON <a>Object</a> return
  an <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>result</var> be an empty JSON <a>Object</a>.

 <li><p>For each enumerable <a>own property</a>
  in <var>capability</var>, run the following substeps:
  <ol>
   <li><p>Let <var>name</var> be the name of the property.

   <li><p>Let <var>value</var> be the result of <a>getting a
    property</a> named <var>name</var> from <var>capability</var>.

   <li><p>Run the substeps of the first matching condition:
    <dl class=switch>
     <dt><var>value</var> is <a><code>null</code></a>
     <dd><p>Let <var>deserialized</var> be set to <a><code>null</code></a>.

     <dt><var>name</var> equals "<code>acceptInsecureCerts</code>"
     <dd><p>If <var>value</var> is not a <a>boolean</a> return
      an <a>error</a> with <a>error code</a> <a>invalid
      argument</a>. Otherwise, let <var>deserialized</var> be
      set to <var>value</var>

     <dt><var>name</var> equals "<code>browserName</code>"
     <dt><var>name</var> equals "<code>browserVersion</code>"
     <dt><var>name</var> equals "<code>platformName</code>"
     <dd><p>If <var>value</var> is not a <a>string</a> return
      an <a>error</a> with <a>error code</a> <a>invalid
      argument</a>. Otherwise, let <var>deserialized</var> be
      set to <var>value</var>.

     <dt><var>name</var> equals "<code>pageLoadStrategy</code>"
     <dd><p>Let <var>deserialized</var> be the result of <a>trying</a> to
      <a>deserialize as a page load strategy</a> with argument
      <var>value</var>.

     <dt><var>name</var> equals "<code>proxy</code>"
     <dd><p>Let <var>deserialized</var> be the result of <a>trying</a>
      to <a>deserialize as a proxy</a> with argument <var>value</var>.

     <dt><var>name</var> equals "<code>strictFileInteractability</code>"
     <dd><p>If <var>value</var> is not a <a>boolean</a> return
      an <a>error</a> with <a>error code</a> <a>invalid
      argument</a>. Otherwise, let <var>deserialized</var> be
      set to <var>value</var>

     <dt><var>name</var> equals "<code>timeouts</code>"
     <dd><p>Let <var>deserialized</var> be the result of <a>trying</a>
      to <a>JSON deserialize</a> as a <a>timeouts configuration</a> the <var>value</var>.

     <dt><var>name</var> equals "<code>unhandledPromptBehavior</code>"
     <dd><p>Let <var>deserialized</var> be the result of <a>trying</a>
      to <a>deserialize as an unhandled prompt behavior</a> with argument
      <var>value</var>.

     <dt><var>name</var> is the name of an <a>additional WebDriver
     capability</a>
     <dd><p>Let <var>deserialized</var> be the result of <a>trying</a>
      to run the <a>additional capability deserialization
      algorithm</a> for the extension capability corresponding
      to <var>name</var>, with argument
      <var>value</var>.

     <dt><var>name</var> is the key of an <a>extension capability</a>
     <dd><p>If <var>name</var> is known to the implementation,
      let <var>deserialized</var> be the result of <a>trying</a>
      to deserialize <var>value</var> in an implementation-specific way.
      Otherwise, let <var>deserialized</var> be set to <var>value</var>.

     <dt>The <a>remote end</a> is an <a>endpoint node</a>
     <dd><p>Return an <a>error</a> with <a>error code</a>
      <a>invalid argument</a>.
    </dl>

   <li><p>If <var>deserialized</var> is not <a><code>null</code></a>,
    <a>set a property</a> on <var>result</var> with name <var>name</var>
    and value <var>deserialized</var>.
  </ol>

 <li>Return <a>success</a> with data <var>result</var>.
</ol><!-- /validating capabilities -->

<p>When <dfn>merging capabilities</dfn> with JSON <a>Object</a> arguments
 <var>primary</var> and <var>secondary</var>,
 an <a>endpoint node</a> must take the following steps:

<ol>
 <li><p>Let <var>result</var> be a new JSON <a>Object</a>.

 <li><p>For each enumerable <a>own property</a> in <var>primary</var>,
  run the following substeps:
  <ol>
   <li><p>Let <var>name</var> be the name of the property.

   <li><p>Let <var>value</var> be the result of <a>getting a
    property</a> named <var>name</var> from <var>primary</var>.

   <li><a>Set a property</a> on <var>result</var> with
    name <var>name</var> and value <var>value</var>.
  </ol>

 <li><p>If <var>secondary</var> is <a>undefined</a>,
  return <var>result</var>.

 <li><p>For each enumerable <a>own property</a> in <var>secondary</var>,
  run the following substeps:
  <ol>
   <li><p>Let <var>name</var> be the name of the property.

   <li><p>Let <var>value</var> be the result of <a>getting a
    property</a> named <var>name</var> from <var>secondary</var>.

   <li><p>Let <var>primary value</var> be the result of
    <a>getting the property</a> <var>name</var> from
    <var>primary</var>.

   <li><p>If <var>primary value</var> is not <a>undefined</a>,
    return an <a>error</a> with <a>error code</a> <a>invalid argument</a>.

   <li><a>Set a property</a> on <var>result</var> with name
      <var>name</var> and value <var>value</var>.
  </ol>

 <li><p>Return <var>result</var>.
</ol>

<aside class=note>
 <p>The algorithm outlined in <a>matching capabilities</a>
  blithely ignores real-world problems
  that make implementation less than perfectly straightforward,
  particularly since capabilities can interact in unforeseen ways.

 <p>As an example, an implementation could have a capability
  that gives the path to the browser binary to use.
  This could cause both <code>browserName</code> and <code>browserVersion</code>
  to be impossible to match against until the browser process is started.
</aside>

<p>When <dfn>matching capabilities</dfn>
 with JSON <a>Object</a> argument <var>capabilities</var>,
 an <a>endpoint node</a> must take the following steps:

<ol>
 <li><p>Let <var>matched capabilities</var> be a JSON <a>Object</a>
  with the following entries:

  <dl>
   <dt>"<code>browserName</code>"
   <dd><a>Lowercase</a> name of the user agent as a <a>string</a>.

   <dt>"<code>browserVersion</code>"
   <dd>The user agent version, as a <a>string</a>.

   <dt>"<code>platformName</code>"
   <dd><a>Lowercase</a> name of the current platform as a <a>string</a>.

   <dt>"<code>acceptInsecureCerts</code>"
   <dd><a>Boolean</a> initially set to false,
    indicating the session will not implicitly trust untrusted
    or self-signed TLS certificates on <a>navigation</a>.

   <dt>"<code>strictFileInteractability</code>"
    <dd><a>Boolean</a> initially set to false,
    indicating that interactabilty checks will be applied to
    &lt;input type=file&gt;.

   <dt>"<code>setWindowRect</code>"
   <dd>Boolean indicating whether the <a>remote end</a> supports all of the <a href=#resizing-and-positioning-windows>resizing and positioning</a> <a>commands</a>.
  </dl>

 <li><p>Optionally add <a>extension capabilities</a> as entries
  to <var>matched capabilities</var>. The values of these may be
  elided, and there is no requirement that all
  <a>extension capabilities</a> be added.

  <aside class=note>
  <p>
   This allows a <a>remote end</a> to add information that might be
   useful to a <a>local end</a> without unnecessarily bloating the
   response sent back to the user with (e.g.) an entire browser
   profile.

  <p>
   For example, an implementation could choose to indicate that a
   screenshot will be taken when returning an error by setting the
   capability <code>se:screenshot-on-error</code>
   to <code>true</code>.
  </aside>

 <li><p>For each <var>name</var> and <var>value</var> corresponding
  to <var>capability</var>’s <a>own properties</a>:
  <ol>
  <li><p>Let <var>match value</var> equal <var>value</var>.
   <li><p>Run the substeps of the first matching <var>name</var>:

    <dl class=switch>
     <dt>"<code>browserName</code>"
     <dd><p>If <var>value</var> is not a string equal to
       the "<code>browserName</code>" entry in
       <var>matched capabilities</var>, return <a>success</a>
       with data <a><code>null</code></a>.

     <p class=note>There is a chance the <a>remote end</a> will need
      to start a browser process to correctly determine
      the <code>browserName</code>. Lightweight checks are preferred
      before this is done.

     <dt>"<code>browserVersion</code>"
     <dd><p>Compare <var>value</var>
       to the "<code>browserVersion</code>" entry in <var>matched capabilities</var>
       using an implementation-defined comparison algorithm.
       The comparison is to accept a <var>value</var>
       that places constraints on the version using
       the "<code>&lt;</code>", "<code>&lt;=</code>", "<code>&gt;</code>",
       and "<code>&gt;=</code>" operators.

      <p>If the two values do not match,
       return <a>success</a> with data <a><code>null</code></a>.

      <p class=note>Version comparison is left as an implementation detail
       since each user agent will likely have conflicting methods
       of encoding the user agent version,
       and standardizing these schemes is beyond the scope of this standard.

     <p class=note>There is a chance the <a>remote end</a> will need
      to start a browser process to correctly determine
      the <code>browserVersion</code>. Lightweight checks are preferred
      before this is done.

     <dt>"<code>platformName</code>"
     <dd><p>If <var>value</var> is not a string equal
       to the "<code>platformName</code>" entry in <var>matched capabilities</var>,
       return <a>success</a> with data <a><code>null</code></a>.

      <div class=note>
       <p>The following platform names are in common usage with
        well-understood semantics and, when <a>matching
        capabilities</a>, greatest interoperability can be achieved by
        honoring them as valid synonyms for well-known Operating
        Systems:

        <table class=simple>
         <tr>
          <th>Key
          <th>System
         </tr>
         <tr><td>"<code>linux</code>"</td> <td>Any server or desktop system based upon the Linux kernel.</td></tr>
         <tr><td>"<code>mac</code>"</td> <td>Any version of Apple’s macOS.</td></tr>
         <tr><td>"<code>windows</code>"</td> <td>Any version of Microsoft Windows, including desktop and mobile versions.</td></tr>
        </table>

        <p>This list is not exhaustive.

        <p>When returning <a>capabilities</a> from <a>New Session</a>,
         it is valid to return a more
         specific <code>platformName</code>, allowing users to
         correctly identify the Operating System the WebDriver
         implementation is running on.
      </div>

     <dt>"<code>acceptInsecureCerts</code>"
      <dd><p>If <var>value</var> is <code>true</code>
       and the <a>endpoint node</a> does not support <a>insecure TLS certificates</a>,
       return <a>success</a> with data <a><code>null</code></a>.

       <p class=note>If the <a>endpoint node</a> does not
        support <a>insecure TLS certificates</a> and this is the reason
        no match is ultimately made, it is useful to provide this
        information to the <a>local end</a>.

     <dt>"<code>proxy</code>"
     <dd><p>If the <a>endpoint node</a> does not allow the proxy it
      uses to be configured, or if the proxy configuration defined
      in <var>value</var> is not one that passes the <a>endpoint
      node</a>’s implementation-specific validity checks,
      return <a>success</a> with data <a><code>null</code></a>.

      <p class=note>A <a>local end</a> would only send this capability
       if it expected it to be honored and the configured proxy
       used. The intent is that if this is not possible a new session
       will not be established.

     <dt><strong>Otherwise</strong>
       <dd>
         <ul>
           <li>
             <p>If <var>name</var> is the name of an <a>additional
                WebDriver capability</a> which defines a <a>matched
                capability serialization algorithm</a>, let <var>match
                value</var> be the result of running the <a>matched
                capability serialization algorithm</a> for
                capability <var>name</var> with
                argument <var>value</var>.</li>

           <li>
             <p>Otherwise, if <var>name</var> is the key of an
               <a>extension capability</a>, let <var>match value</var> be the
               result of <a>trying</a> implementation-specific steps to
               match on <var>name</var> with <var>value</var>. If the
               match is not successful, return <a>success</a> with
               data <a><code>null</code></a>.
    </dl>

   <li><p><a>Set a property</a> on <var>matched capabilities</var>
    with name <var>name</var> and value <var>match value</var>.
  </ol>

 <li><p>Return <a>success</a> with data <var>matched capabilities</var>.
</ol>

</section> <!-- /Processing capabilities -->
</section> <!-- /Capabilities -->

<section>
<h2 id=sessions>Sessions</h2>

<p>A <a>session</a> is equivalent to a single instantiation of a particular user agent,
 including all its child browsers.
 WebDriver gives each <a>session</a> a unique <a>session ID</a>
 that can be used to differentiate one session from another,
 allowing multiple user agents to be controlled from a single HTTP server,
 and allowing sessions to be routed via a multiplexer
 (known as an <a>intermediary node</a>).

<p>A WebDriver <dfn lt="sessions">session</dfn> represents
 the <a>connection</a> between a <a>local end</a> and a specific <a>remote end</a>.

<p>A <a>session</a> is started when
 a <a>New Session</a> is invoked.
 It is an <a>error</a> to send any commands before starting a session,
 or to continue to send commands after
 the <a>session</a> has been closed.
 Maintaining session continuity between <a>commands</a> to
 the <a>remote end</a> requires passing a <a>session ID</a>.

<p>A <a>session</a> is torn down at some later point;
 either explicitly by invoking <a>Delete Session</a>,
 or implicitly when <a>Close Window</a> is called
 at the last remaining <a>top-level browsing context</a>.

<p>An <a>intermediary node</a> will maintain an <dfn>associated
 session</dfn> for each active <a>session</a>. This is
 the <a>session</a> on the <a>upstream</a> neighbor that is created
 when the <a>intermediary node</a> executes the <a>New
 Session</a> <a>command</a>. Closing a <a>session</a> on
 an <a>intermediary node</a> will also <a>close the session</a> of
 the <a>associated session</a>.

<p>All <a>commands</a>, except <a>New Session</a> and <a>Status</a>,
 have an associated <dfn>current session</dfn>,
 which is the <a>session</a> in which that <a>command</a> will run.

<p>A <a>remote end</a> has an associated list of
 <dfn lt="active session">active sessions</dfn>,
 which is a list of all <a>sessions</a> that are currently started.
 A <a>remote end</a> that is not an <a>intermediary node</a>
 has at most one <a>active session</a> at a given time.

<p>A <a>remote end</a> has an associated
 <dfn>maximum active sessions</dfn> (an integer)
 that defines the number of <a>active sessions</a>
 that are supported.
 This may be “unlimited” for <a>intermediary nodes</a>,
 but must be exactly one for a <a>remote end</a> that is an <a>endpoint node</a>.

<p>A <a>session</a> has an associated <dfn>session ID</dfn> (a string
 representation of a <a>UUID</a>) used to uniquely identify this
 session.  Unless stated otherwise it is <a><code>null</code></a>.

<p>A <a>session</a> has an associated <dfn>current browsing context</dfn>,
 which is the <a>browsing context</a> against which <a>commands</a> will run.

<p>A <a>session</a> has an associated
 <dfn>current top-level browsing context</dfn>, which is the <a>current browsing
 context</a> if it itself is a <a>top-level browsing context</a>, and otherwise
 is the <a>top-level browsing context</a> of the <a>current browsing
 context</a>.

<p>
A <a>session</a> has an associated <dfn lt="session script timeout|session page load timeout|session implicit wait timeout|session timeouts">session timeouts</dfn>
that records the timeout duration values used to control the behavior
of <a href=#executing-script>script evaluation</a>,
<a href=#navigation>navigation</a>,
and <a href=#elements>element retrieval</a>.

<p>A <a>session</a> has an associated <dfn>page loading strategy</dfn>,
 which is one of the keywords from the <a>table of page load strategies</a>.
 Unless stated otherwise, it is <a>normal</a>.

<p>A <a>session</a> has an associated <dfn>secure TLS</dfn> state
 that indicates whether untrusted or self-signed TLS certificates
 should be trusted for the duration of the WebDriver session.
 If it is unset, this indicates that certificate- or TLS errors
 that occur upon <a>navigation</a> should be suppressed.
 The state can be unset by providing
 an "<code>acceptInsecureCerts</code>" <a>capability</a> with the value true.
 Unless stated otherwise, it is set.

<p>A <a>session</a> has an associated <a>strict file interactability</a>
 state which is a boolean.

<p>
A <a>session</a> has an associated <a>user prompt handler</a>.
Unless stated otherwise it is in the <a>dismiss and notify state</a>.

<p>A <a>session</a> has an associated list of <a>active input sources</a>.

<p>A <a>session</a> has an associated <a>input state table</a>.

<p>A <a>session</a> has an associated <a>input cancel list</a>.

<p>A <a>session</a> has an associated <dfn>request queue</dfn> which is a
 <a>queue</a> of <a lt=request>requests</a> that are currently awaiting
 processing.

<p>When asked to <dfn>close the session</dfn>,
 a <a>remote end</a> must take the following steps:

<ol>
 <li><p>Perform the following substeps based on the <a>remote end</a>’s
  type:
  <dl class=switch>
   <dt><a>Remote end</a> is an <a>endpoint node</a>
   <dd>
    <ol>
     <li><p>Set the <a>webdriver-active flag</a> to false.

     <li><p>An <a>endpoint node</a> must <a>close</a> any <a>top-level
      browsing contexts</a> associated with the <a>session</a>,
      without <a>prompting to unload</a>.
    </ol>
  <dt><a>Remote end</a> is an <a>intermediary node</a>
  <dd>
   <ol>
    <li><p><a>Close</a> the <a>associated session</a>. If this causes
     an <a>error</a> to occur, complete the remainder of this
     algorithm before returning the <a>error</a>.
   </ol>
  </dl>

 <li><p>Remove the <a>current session</a> from <a>active sessions</a>.

 <li><p>Perform any implementation-specific cleanup steps.

 <li><p>If an <a>error</a> has occurred in any of the steps above,
  return the <a>error</a>, otherwise return <a>success</a> with
  data <a><code>null</code></a>.
</ol>

<p>Closing a <a>session</a> might cause the associated browser process to be killed.
 It is assumed that any implementation-specific cleanup steps
 are performed <em>after</em> the response has been sent back to the client
 so that the <a>connection</a> is not prematurely closed.

<section>
<h3 id=new-session><dfn lt="new sessions|creating a new session">New Session</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session</td>
 </tr>
</table>

<p>
The <a>New Session</a> <a>command</a>
creates a new WebDriver <a>session</a> with the <a>endpoint node</a>.
If the creation fails, a <a>session not created</a> <a>error</a> is returned.

<p>If the <a>remote end</a> is an <a>intermediary node</a>,
 it may use the result of the <a>capabilities processing</a> algorithm
 to route the <a>new session</a> request to the appropriate <a>endpoint node</a>.
 An <a>intermediary node</a> is free to define <a>extension capabilities</a>
 to assist in this process, however, these specific capabilities
 must not be forwarded to the <a>endpoint node</a>.

<p>If the <a>intermediary node</a> requires additional information unrelated to user agent features,
 it is recommended that this information be passed as top-level parameters,
 and not as part of the requested <a>capabilities</a>.
 An <a>intermediary node</a> must forward custom,
 top-level parameters (i.e. non-<a>capabilities</a>) to subsequent <a>remote end</a> nodes.

<aside class=example>
 <p>An <a>intermediary node</a> might require authentication
  on <a>creating a new session</a>.
  This authentication is an argument to the <a>New Session</a> command
  itself and not the user agent’s <a>capabilities</a>.
  Therefore, the authentication should be passed
  as a top-level parameter and not embedded in <code>capabilities</code>:

 <pre>{
	"user": "alice",
	"password": "hunter2",
	"capabilities": {…}
}</pre>

 <p>However, because an <a>intermediary node</a> cannot forward
 <a>extension capabilities</a> specific to that implementation to an <a>endpoint node</a>,
 the following is also permitted by this specification:

 <pre>{
    "capabilities": {
        "alwaysMatch": {
            "cloud:user": "alice",
            "cloud:password": "hunter2",
            "platformName": "linux"
        },
        "firstMatch": [
            {"browserName": "chrome"},
            {"browserName": "edge"}
        ]
    }
}</pre>

 <p>Once all <a lt="merging capabilities">capabilities are merged</a> from this example,
  an <a>endpoint node</a> would receive <a>New Session</a> capabilities identical to:

 <pre>[
    {"browserName": "chrome", "platformName": "linux"},
    {"browserName": "edge", "platformName": "linux"}
]</pre>
</aside>

<p>The <a>remote end steps</a> are:

<ol>
  <li><p>If the <a>maximum active sessions</a> is equal to
  the length of the list of <a>active sessions</a>,
  return <a>error</a> with <a>error code</a> <a>session not created</a>.

 <li><p>If the <a>remote end</a> is an <a>intermediary node</a>, take
  implementation-defined steps that either result in returning
  an <a>error</a> with <a>error code</a> <a>session not created</a>,
  or in returning a <a>success</a> with data that is isomorphic to
  that returned by <a>remote ends</a> according to the rest of this
  algorithm. If an <a>error</a> is not returned, the <a>intermediary
  node</a> must retain a reference to the <a>session</a> created on
  the <a>upstream</a> node as the <a>associated session</a> such that
  commands may be forwarded to this <a>associated session</a> on
  subsequent commands.

  <p class=note>How this is done is entirely up to the implementation,
   but typically the <code>sessionId</code>, and <a>URL</a> and
   <a>URL prefix</a> of the <a>upstream</a> <a>remote end</a> will need
   to be tracked.

 <li><p>If the <a>maximum active sessions</a> is equal to
  the length of the list of <a>active sessions</a>,
  return <a>error</a> with <a>error code</a> <a>session not created</a>.

 <li><p>Let <var>capabilities</var> be the result
  of <a>trying</a> to <a>process capabilities</a>
  with <var>parameters</var> as an argument.

 <li><p>If <var>capabilities</var>’s is <a><code>null</code></a>,
  return <a>error</a> with <a>error code</a> <a>session not created</a>.

 <li><p>Let <var>session id</var> be the result of <a>generating a UUID</a>.

 <li><p>Let <var>session</var> be a new <a>session</a>
  with the <a>session ID</a> of <var>session id</var>.

 <li><p>Set the <a>current session</a> to <var>session</var>.

 <li><p>Run any <a>WebDriver new session algorithm</a> defined in
 external specifications, with arguments <var>session</var>
 and <var>capabilities</var>.

 <li><p>Append <var>session</var> to <a>active sessions</a>.

 <li><p>Let <var>body</var> be a JSON <a>Object</a> initialised with:

  <dl>
   <dt>"<code>sessionId</code>"
   <dd><var>session id</var>

   <dt>"<code>capabilities</code>"
   <dd><var>capabilities</var>
  </dl>

 <li><p>Initialize the following from <var>capabilities</var>:

  <ol>
   <li><p>Let <var>strategy</var> be the result of getting property
    "<code>pageLoadStrategy</code>" from <var>capabilities</var>.

   <li><p>If <var>strategy</var> is a string, set the <a>current session</a>’s
    <a>page loading strategy</a> to <var>strategy</var>.  Otherwise,
    set the <a>page loading strategy</a> to <i>normal</i> and <a>set a
    property</a> of <var>capabilities</var> with name
    "<code>pageLoadStrategy</code>" and value "<code>normal</code>".

   <li><p>Let <var>strictFileInteractability</var> be the result of getting property
    "<code>strictFileInteractability</code>" from <var>capabilities</var>.

   <li><p>If <var>strictFileInteractability</var> is a boolean,
    set the <a>current session</a>’s <a>strict file interactability</a> to
    <var>strictFileInteractability</var>. Otherwise set the
    <a>current session</a>’s <a>strict file interactability</a> to false.

   <li><p>Let <var>proxy</var> be the result of getting property
    "<code>proxy</code>" from <var>capabilities</var> and run the
    substeps of the first matching statement:

       <dl class=switch>
         <dt><var>proxy</var> is a <a>proxy configuration</a> object</dt>
         <dd><p>Take implementation-defined steps to set the user agent proxy
             using the extracted <var>proxy</var> configuration.  If the
             defined proxy cannot be configured return <a>error</a> with
             <a>error code</a> <a>session not created</a>.</dd>

         <dt>Otherwise</dt>
         <dd><a>Set a property</a> of <var>capabilities</var> with name
           "<code>proxy</code>" and a value that is a new JSON <a>Object</a>.</dd>
       </dl>
   </li>

   <li><p>If <var>capabilities</var> has a property with the key "<code>timeouts</code>":

    <ol>
     <li><p>Let <var>timeouts</var> be the result of <a>trying</a>
      to <a>JSON deserialize</a> as a <a>timeouts configuration</a>
      the value of the "<code>timeouts</code>" property.

     <li><p>Make the <a>session timeouts</a> the new <var>timeouts</var>.
    </ol>

   <li><p>Set a property on <var>capabilities</var> with name
    "<code>timeouts</code>" and value that of the
    <a>JSON deserialization</a> of the <a>session timeouts</a>.

   <li><p>Apply changes to the user agent for any implementation-defined capabilities
    selected during the <a>capabilities processing</a> step.
  </ol>

 <li><p>Set the <a>webdriver-active flag</a> to true.</p>

 <li><p>Set the <a>current top-level browsing context</a>
  for <var>session</var> in an implementation-specific way. This
  should be the <a>top-level browsing context</a> of the UA’s
  <a>current browsing context</a>.

  <p class="note">WebDriver implementations typically start a
   completely new browser instance, but there is no requirement in
   this specification (or for WebDriver only to be used to automate
   only web browsers). Implementations might choose to use an existing
   browser instance, eg. by selecting the window that currently has
   focus.

 <li><p>Set the <a>request queue</a> to a new <a>queue</a>.

 <li><p>Return <a>success</a> with data <var>body</var>.
</ol>
</section> <!-- /New Session -->

<section>
<h3 id=delete-session><dfn>Delete Session</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>DELETE</td>
  <td>/session/{<var>session id</var>}</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current session</a> is an <a>active session</a>,
  <a>try</a> to <a>close the session</a>.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /Delete Session -->

<section>
<h3 id=status><dfn>Status</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/status</td>
 </tr>
</table>

<aside class=note>
 <p><a>Status</a> returns information
  about whether a <a>remote end</a>
  is in a state in which it can create <a lt="new session">new sessions</a>,
  but may additionally include arbitrary meta information
  that is specific to the implementation.

 <p>The <a>remote end</a>’s <a>readiness state</a> is represented
  by the <code>ready</code> property of the body,
  which is false if an attempt to <a lt="new session">create a session</a>
  at the current time would fail.
  However, the value true does not guarantee
  that a <a>New Session</a> command will succeed.
</aside>

<p>Implementations may optionally include
 additional meta information as part of the body,
 but the top-level properties
 <code>ready</code> and <code>message</code>
 are reserved and must not be overwritten.

<p>The <a>remote end steps</a> are:</p>

<ol>
 <li><p>Let <var>body</var> be a new JSON <a>Object</a>
  with the following properties:

  <dl>
   <dt>"<code>ready</code>"
   <dd><p>The <a>remote end</a>’s <a>readiness state</a>.

   <dt>"<code>message</code>"
   <dd><p>An implementation-defined string
    explaining the <a>remote end</a>’s <a>readiness state</a>.
  </dl>

 <li><p>Return <a>success</a> with data <var>body</var>.
</ol>
</section> <!-- /Status -->
</section> <!-- /Sessions -->

<section>
<h2 id=timeouts>Timeouts</h2>

<p>
A <dfn>timeouts configuration</dfn> is a record
of the different timeouts that control the behavior of
<a href=#executing-script>script evaluation</a>,
<a href=#navigation>navigation</a>,
and <a href=#elements>element retrieval</a>:

<table class=simple>
<tr>
<th>Field
<th>Default
<th>JSON key
<th>Optional<sup>†</sup>
<th>Nullable
<th>Description<sup>†</sup>
</tr>

<tr>
<td><dfn>Script timeout</dfn>
<td>30,000
<td>"<code>script</code>"
<td>✓
<td>✓
<td>
<p>
Specifies when to interrupt a script that is being
<a href=#executing-script>evaluated</a>.

<p>
A <a><code>null</code></a> value implies that scripts should never be interrupted,
but instead run indefinitely.
</tr>

<tr>
<td><dfn>Page load timeout</dfn>
<td>300,000
<td>"<code>pageLoad</code>"
<td>✓
<td>
<td>
<p>
Provides the timeout limit used to interrupt
an explicit <a lt=navigate>navigation</a> attempt.
</tr>

<tr>
<td><dfn>Implicit wait timeout</dfn>
<td>0
<td>"<code>implicit</code>"
<td>✓
<td>
<td>
<p>
Specifies a time to wait for the <a>element location strategy</a> to complete
when <a href=#element-retrieval>locating an element</a>
</tr>
</table>

<!-- This should be a <figcaption>, but we can fix that later: -->
<p style="text-align: right; font-size: 90%">
<sup>†</sup> Informative.

<p>
The <a>timeouts configuration</a>’s <a>JSON serialization</a>
is expressed as a JSON <a>Object</a> with the following properties:

<dl>
<dt>"<code>script</code>"
<dd><a>Script timeout</a>’s value, if set, or its default value.

<dt>"<code>pageLoad</code>"
<dd><a>Page load timeout</a>’s value, if set, or its default value.

<dt>"<code>implicit</code>"
<dd><a>Implicit wait timeout</a>’s value, if set, or its default value.
</dl>

<p>
To <a>JSON deserialize</a> an input <var>value</var>
into a <a>timeouts configuration</a> record:

<ol>
<li><p>
Let <var>timeouts</var> be a new <a>timeouts configuration</a>.

<li><p>
If <var>value</var> is not a JSON <a>Object</a>,
return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

<li><p>
If <var>value</var> has a property with the key "<code>script</code>":

 <ol>
 <li><p>
 Let <var>script duration</var> be the value of property "<code>script</code>".

 <li><p>
 If <var>script duration</var> is a number and less than 0 or greater than 2<sup>16</sup> – 1,
 or it is not <a><code>null</code></a>,
 return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>
 Set <var>timeouts</var>’s <a>script timeout</a> to <var>script duration</var>.
 </ol>

<li><p>
If <var>value</var> has a property with the key "<code>pageLoad</code>":

 <ol>
 <li><p>
 Let <var>page load duration</var> be the value of property "<code>pageLoad</code>".

 <li><p>
 If <var>page load duration</var> is less than 0 or greater than 2<sup>16</sup> – 1,
 return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>
 Set <var>timeouts</var>’s <a>page load timeout</a> to <var>page load duration</var>.
 </ol>

<li><p>
If <var>value</var> has a property with the key "<code>implicit</code>":

 <ol>
 <li><p>
 Let <var>implicit duration</var> be the value of property "<code>implicit</code>".

 <li><p>
 If <var>implicit duration</var> is less than 0 or greater than 2<sup>16</sup> – 1,
 return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>
 Set <var>timeouts</var>’s <a>implicit wait timeout</a> to <var>implicit duration</var>.
 </ol>

<li><p>
Return <a>success</a> with data <var>timeouts</var>.
</ol>


<section>
<h3 id=get-timeouts><dfn>Get Timeouts</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/timeouts</td>
 </tr>
</table>

<p>
The <a>remote end step</a> is to return <a>success</a>
with data being the <a>JSON serialization</a>
of the <a>active session</a>’s <a>timeouts configuration</a>.
</section> <!-- /Get Timeouts -->


<section>
<h3 id=set-timeouts><dfn>Set Timeouts</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/timeouts</td>
 </tr>
</table>

<p>
The <a>remote end steps</a> are:

<ol>
<li><p>
Let <var>timeouts</var> be the result of <a>trying</a> to
<a>JSON deserialize</a> as a <a>timeouts configuration</a>
the request’s <var>parameters</var>.

<li><p>
Make the <a>session timeouts</a> the new <var>timeouts</var>.

<li><p>
Return <a>success</a> with data <a><code>null</code></a>.
</ol>

</section> <!-- /Set Timeout -->
</section> <!-- /Timeouts -->


<section>
<h2 id=navigation>Navigation</h2>

<p>The <a>commands</a> in this section allow navigation of
 the <a>current top-level browsing context</a> to new URLs
 and introspection of the document currently loaded in this <a>browsing context</a>.

<p>For <a>commands</a> that cause a new document to load,
 the point at which the command returns
 is determined by the session’s <a>page loading strategy</a>.
 The <a>normal</a> state causes it
 to return after the <a><code>load</code></a> <a>event fires</a> on the new page,
 <a>eager</a> causes it to return
 after the <a><code>DOMContentLoaded</code></a> <a>event fires</a>,
 and <a>none</a> causes it to return immediately.

<p>Navigation actions are also affected by the value of
 the <a>session page load timeout</a>,
 which determines the maximum time that commands will block
 before returning with a <a>timeout</a> <a>error</a>.

<p>The following is the <dfn>table of page load strategies</dfn>
 that links the <code>pageLoadStrategy</code> <a>capability</a> keyword
 to a <a>page loading strategy</a> state,
 and shows which <a>document readiness</a> state
 that corresponds to it:

<table class=simple>
 <tr>
  <th>Keyword
  <th>Page load strategy state
  <th>Document readiness state
 </tr>

 <tr>
  <td>"<code>none</code>"
  <td><dfn lt="none page loading strategy|none">none</dfn>
  <td>
 </tr>

 <tr>
  <td>"<code>eager</code>"
  <td><dfn lt="eager page loading strategy|eager">eager</dfn>
  <td>"<code>interactive</code>"
 </tr>

 <tr>
  <td>"<code>normal</code>"
  <td><dfn lt="normal page loading strategy|normal">normal</dfn>
  <td>"<code>complete</code>"
 </tr>
</table>

<p>When asked to <dfn>deserialize as a page load strategy</dfn> with
 argument <var>value</var>:

<ol>
 <li><p>If <var>value</var> is not a <a>string</a> return
  an <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>If there is no entry in the <a>table of page load
  strategies</a> with <code>keyword</code> <var>value</var> return
  an <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>Return <a>success</a> with data <var>value</var>.
</ol>

<p>When asked to <dfn lt="waiting for the navigation to complete|wait for navigation to complete">wait for navigation to complete</dfn>,
 run the following steps:

<ol>
 <li><p>If the <a>current session</a>
  has a <a>page loading strategy</a> of <a>none</a>,
  return <a>success</a> with data <a><code>null</code></a>.

 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>success</a> with data <a><code>null</code></a>.

 <li><p>Start a <var>timer</var>. If this algorithm has not
  completed before <var>timer</var> reaches
  the <a>session</a>’s <a>session page load timeout</a> in
  milliseconds, return an <a>error</a> with <a>error
  code</a> <a>timeout</a>.

 <li><p>If there is an ongoing attempt to <a>navigate</a>
  the <a>current browsing context</a> that has not
  yet <a>matured</a>, wait for navigation to <a>mature</a>.

 <li><p>Let <var>readiness target</var> be the <a>document
  readiness</a> state associated with the <a>current
  session</a>’s <a>page loading strategy</a>, which can be found in
  the <a>table of page load strategies</a>.

 <li><p>Wait for the <a>current browsing context</a>’s
  <a>document readiness</a> state to reach
  <var>readiness target</var>, or for the
  <a>session page load timeout</a> to pass, whichever
  occurs sooner.

 <li><p>If the previous step completed by the
  <a>session page load timeout</a> being reached
  and the browser does not have an active <a>user prompt</a>,
  return <a>error</a> with <a>error code</a> <a>timeout</a>.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>

<p>When asked to run the <dfn>post-navigation checks</dfn>,
 run the substeps of the first matching statement:

<dl class=switch>
 <dt><a>response</a> is a network error
 <dd><p>Return <a>error</a> with <a>error code</a> <a>unknown error</a>.
  <p class="note">A &quot;network error&quot; in this case is not an
   HTTP response with a status code indicating an unsucessful result,
   but could be a problem occurring lower in the OSI model, or a
   failed DNS lookup.

 <dt><a>response</a> is <a>blocked by content security policy</a>
 <dd><p>If the <a>current session</a>’s <a>secure TLS</a> state is disabled,
  take implementation specific steps to ensure
  the navigation is not aborted
  and that the untrusted- or invalid TLS certificate error
  that would normally occur under these circumstances,
  are suppressed.

  <p>Otherwise return <a>error</a> with <a>error code</a> <a>insecure certificate</a>.

 <dt><a>response</a>’s <a>HTTP status</a> is 401
 <dt>Otherwise
 <dd><p>Irrespective of how a possible authentication challenge is handled,
  return <a>success</a> with data <a><code>null</code></a>.
</dl>

<section>
<h3 id=navigate-to><dfn>Navigate To</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/url</td>
 </tr>
</table>

<p class=note>The command causes the user agent
 to <a>navigate</a> the <a>current top-level browsing context</a> to a new location.

<p>If the <a>session</a> is not in a <a>secure TLS</a> state,
 no certificate errors that would normally
 cause the user agent to abort and show a security warning
 are to hinder navigation to the requested address.

<aside class=example>
 <p>To navigate the <a>current top-level browsing context</a>
  of the <a>session</a> with ID <i>1</i> to <code>https://example.com</code>,
  the <a>local end</a> would POST to <i>/session/1/url</i> with the body:

 <pre>{"url": "https://example.com"}</pre>
</aside>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p>Let <var>url</var> be the result of
  <a>getting the property</a> <code>url</code>
  from the <var>parameters</var> argument.

 <li><p>If <var>url</var> is not an <a>absolute URL</a>
  or is not an <a>absolute URL with fragment</a> or not a
  <a>local scheme</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>current URL</var> be the <a>current top-level browsing context</a>’s
 <a>active document</a>’s <a>document URL</a>.

 <li><p>If <var>current URL</var> and <var>url</var> do not have the same
   <a>absolute URL</a>:

   <ol>
     <li>If <var>timer</var> has not been started, start
       a <var>timer</var>. If this algorithm has not completed
       before <var>timer</var> reaches the <a>session</a>’s <a>session page
       load timeout</a> in milliseconds, return an <a>error</a>
       with <a>error code</a> <a>timeout</a>.
   </ol>

 <li><p><a>Navigate</a> the <a>current top-level browsing context</a> to <var>url</var>.

 <li><p>If <var>url</var> <a>is special</a> except for <code>file</code> and
   <var>current URL</var> and <var>URL</var> do not have the same <a>absolute URL</a> :
 <ol>
  <li><p><a>Try</a> to <a>wait for navigation to complete</a>.

  <li><p><a>Try</a> to run the <a>post-navigation checks</a>.
 </ol>

 <li><p>Set the <a>current browsing context</a>
  to the <a>current top-level browsing context</a>.

 <li><p>If the <a>current top-level browsing context</a> contains
  a <a>refresh state pragma directive</a> of <var ignore>time</var> 1 second
  or less, wait until the refresh timeout has elapsed, a
  new <a>navigate</a> has begun, and return to the first step of this
  algorithm.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /Navigate To-->

<section>
<h3 id=get-current-url><dfn>Get Current URL</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/url</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>url</var> be the <a lt="URL serializer">serialization</a>
  of the <a>current top-level browsing context</a>’s
  <a>active document</a>’s <a>document URL</a>.

 <li><p>Return <a>success</a> with data <var>url</var>.
</ol>
</section>

<section>
<h3 id=back><dfn>Back</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/back</td>
 </tr>
</table>

<p class=note>This command causes the browser to traverse
 one step backward in the <a>joint session history</a>
 of the <a>current top-level browsing context</a>.
 This is equivalent to pressing the back button in the <a>browser chrome</a>
 or invoking <code>window.history.back</code>.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p><a>Traverse the history by a delta</a> –1
  for the <a>current browsing context</a>.

 <li><p>If the previous step completed results in a <a><code>pageHide</code></a>
  <a>event firing</a>, wait until <a><code>pageShow</code></a> <a>event fires</a>
  or for the <a>session page load timeout</a> milliseconds to pass,
  whichever occurs sooner.

 <li><p>If the previous step completed by the <a>session page load
   timeout</a> being reached, and <a lt="handle any user
   prompts">user prompts have been handled</a>, return <a>error</a>
   with <a>error code</a> <a>timeout</a>.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /Back -->

<section>
<h3 id=forward><dfn>Forward</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/forward</td>
 </tr>
</table>

<p class=note>This command causes the browser
 to traverse one step forwards in the <a>joint session history</a>
 of the <a>current top-level browsing context</a>.
 This is equivalent to pressing the forward button in the <a>browser chrome</a>
 or invoking <code>window.history.forward</code>.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p><a>Traverse the history by a delta</a> 1
  for the <a>current browsing context</a>.

 <li><p>If the previous step completed results in a <a><code>pageHide</code></a>
   <a>event</a> firing, wait until <a><code>pageShow</code></a> <a>event fires</a>
   or for the <a>session page load timeout</a> milliseconds to pass,
   whichever occurs sooner.

 <li><p>If the previous step completed by the <a>session page load
   timeout</a> being reached, and <a lt="handle any user
   prompts">user prompts have been handled</a>, return <a>error</a>
   with <a>error code</a> <a>timeout</a>.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /Forward -->

<section>
<h3 id=refresh><dfn>Refresh</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/refresh</td>
 </tr>
</table>

<p class=note>This command causes the browser
 to reload the page in the <a>current top-level browsing context</a>.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Initiate <a>an overridden reload</a> of the <a>current top-level browsing
   context</a>’s <a>active document</a>.
 </li>

 <li><p>If <var>url</var> <a>is special</a> except for <code>file</code>:
  <ol>
   <li><p><a>Try</a> to <a>wait for navigation to complete</a>.

   <li><p><a>Try</a> to run the <a>post-navigation checks</a>.
  </ol>

 <li><p>Set the <a>current browsing context</a>
  to the <a>current top-level browsing context</a>.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /Refresh -->

<section>
<h3 id=get-title><dfn>Get Title</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/title</td>
 </tr>
</table>

<p class=note>This command returns the <a>document title</a>
 of the <a>current top-level browsing context</a>,
 equivalent to calling <code>document.title</code>.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>title</var> be the result of calling the algorithm
  for getting the <a><code>title</code></a> attribute of the <a>current
  top-level browsing context</a>’s <a>active document</a>.

 <li><p>Return <a>success</a> with data <var>title</var>.
</ol>
</section> <!-- /Get Title -->
</section> <!-- /Navigation -->

<section>
<h2 id=contexts>Contexts</h2>

<p>Many WebDriver <a>commands</a> happen in the context of either
 the <a>current browsing context</a> or <a>current top-level browsing context</a>.
 The <a>current top-level browsing context</a> is represented in the protocol
 by its associated <a>window handle</a>.
 When a <a>top-level browsing context</a> is selected
 using the <a>Switch To Window</a> command,
 a specific <a>browsing context</a> can be selected
 using the <a>Switch to Frame</a> command.

<p class=note>The use of the term “window” to
 refer to a <a>top-level browsing context</a>
 is legacy and doesn’t correspond with either
 the operating system notion of a “window”
 or the DOM <a><code>Window</code></a> object.

<p>A <a>browsing context</a> is said to be <dfn>no longer open</dfn>
 if it has been <a>discarded</a>.

<p>Each <a>browsing context</a> has an associated
 <dfn lt="window handles">window handle</dfn> which uniquely
 identifies it. This must be a <a>String</a> and must not be
 "<code>current</code>".

<p>The <dfn>web window identifier</dfn>
 is the string constant "<code>window-fcc6-11e5-b4f8-330a88ab9d7f</code>".

<p>The <dfn>web frame identifier</dfn>
 is the string constant "<code>frame-075b-4da1-b6ba-e579c2d3230a</code>".

<p>The <dfn>JSON serialization of the <code>WindowProxy</code> object</dfn>
 is the JSON <a>Object</a> obtained by applying the following algorithm
 to the given <a><code>WindowProxy</code></a> object <var>window</var>:

<ol>
 <li><p>Let <var>identifier</var> be the <a>web window identifier</a>
  if the associated <a>browsing context</a> of <var>window</var>
  is a <a>top-level browsing context</a>.

  <p>Otherwise let it be the <a>web frame identifier</a>.

 <li><p>Return a JSON <a>Object</a> initialised with the following properties:

  <dl>
   <dt><var>identifier</var>
   <dd><p>Associated <a>window handle</a>
    of the <var>window</var>’s <a>browsing context</a>.
  </dl>
</ol>

<p class=note>
In accordance with
the <a href=https://html.spec.whatwg.org/multipage/interaction.html#focus>focus</a>
section of the [[HTML]] specification,
commands are unaffected by whether the operating system window has focus or not.

<section>
<h3 id=get-window-handle><dfn>Get Window Handle</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/window</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p>Return <a>success</a> with data being the <a>window handle</a>
  associated with the <a>current top-level browsing context</a>.
</ol>
</section> <!-- /Get Window Handle -->

<section>
<h3 id=close-window><dfn>Close Window</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>DELETE</td>
  <td>/session/{<var>session id</var>}/window</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p><a>Close</a> the <a>current top-level browsing context</a>.

 <li><p>If there are no more open <a>top-level browsing contexts</a>,
  then <a>try</a> to <a>close the session</a>.

 <li>Return the result of running the <a>remote end steps</a>
  for the <a>Get Window Handles</a> <a>command</a>.
</ol>
</section> <!-- /Close Window -->

<section>
<h3 id=switch-to-window><dfn>Switch To Window</dfn></h3>

<table class="simple jsoncommand">
  <tr>
    <th>HTTP Method</th>
    <th>URI Template</th>
  </tr>
  <tr>
    <td>POST</td>
    <td>/session/{<var>session id</var>}/window</td>
  </tr>
</table>

<p class=note>
Switching window will select the <a>current top-level browsing context</a>
used as the target for all subsequent <a>commands</a>.
In a tabbed browser, this will typically
make the tab containing the <a>browsing context</a> the selected tab.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>Let <var>handle</var> be the result of
  <a>getting the property</a> "<code>handle</code>"
  from the <var>parameters</var> argument.

 <li><p>If <var>handle</var> is <a>undefined</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>If there is an active <a>user prompt</a>, that prevents the
  focussing of another <a>top-level browsing context</a>,
  return <a>error</a> with <a>error code</a> <a>unexpected alert open</a>.

 <li><p>If <var>handle</var> is equal to the associated <a>window handle</a>
  for some <a>top-level browsing context</a> in the <a>current session</a>,
  set the <a>session</a>’s <a>current browsing context</a>
  to that browsing context.

  <p>Otherwise, return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p>Update any implementation-specific state that would result
  from the user selecting the <a>current browsing context</a> for
  interaction, without altering OS-level focus.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /Switch To Window -->

<section>
<h3 id=get-window-handles><dfn>Get Window Handles</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/window/handles</td>
 </tr>
</table>

<p>The order in which the window handles are returned is arbitrary.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>Let <var>handles</var> be a JSON <a>List</a>.

 <li><p>For each <a>top-level browsing context</a> in the <a>remote end</a>,
  push the associated <a>window handle</a> onto <var>handles</var>.

 <li>Return <a>success</a> with data <var>handles</var>.
</ol>

<aside class="example">
 <p>In order to determine whether or not a particular interaction
  with the browser opens a new window,
  one can obtain the set of window handles before the interaction is performed
  and compare it with the set after the action is performed.
</aside>
</section> <!-- /Get Window Handles -->

<section>
<h3 id=new-window><dfn>New Window</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/window/new</td>
 </tr>
</table>

<p>Create a new <a>top-level browsing context</a>.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the implementation does not support creating new top-level
  browsing contexts, return <a>error</a> with <a>error code</a>
  <a>unsupported operation</a>.

 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>type hint</var> be the result of <a>getting the property</a>
  "<code>type</code>" from the <var>parameters</var> argument.

 <li><p>Create a new <a>top-level browsing context</a> by running
  the <a>window open steps</a> with <var ignore>url</var> set to
  "<code>about:blank</code>", <var ignore>target</var> set to the empty
  string, and <var ignore>features</var> set to "<code>noopener</code>" and
  the user agent configured to create a new browsing context. This must
  be done without invoking the <a>focusing steps</a> for the created browsing
  context. If <var>type hint</var> has the value "<code>tab</code>",
  and the implementation supports multiple browsing context in the
  same OS window, the new browsing context should share an OS window
  with the <a>current browsing context</a>. If <var>type hint</var> is
  "<code>window</code>", and the implementation supports multiple
  browsing contexts in separate OS windows, the created browsing
  context should be in a new OS window. In all other cases the details
  of how the browsing context is presented to the user are
  implementation defined.

 <li><p>Let <var>handle</var> be the
  associated <a>window handle</a> of the newly created window.

 <li><p>Let <var>type</var> be "<code>tab</code>" if the newly created
  window shares an OS-level window with the <a>current browsing
  context</a>, or "<code>window</code>" otherwise.

 <li><p>Let <var>result</var> be a new JSON <a>Object</a> initialised with:

 <dl>
  <dt>"<code>handle</code>"
  <dd>The value of <var>handle</var>.

  <dt>"<code>type</code>"
  <dd>The value of <var>type</var>.

 </dl>

 <li><p>Return <a>success</a> with data <var>result</var>.
</ol>

</section> <!-- /New Window -->

<section>
<h3 id=switch-to-frame><dfn>Switch To Frame</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/frame</td>
 </tr>
</table>

<p class=note>The <a>Switch To Frame</a> command is used to select
 the <a>current top-level browsing context</a> or a <a>child browsing context</a>
 of the <a>current browsing context</a> to use as the <a>current browsing context</a>
 for subsequent <a>commands</a>.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>Let <var>id</var> be the result of
  <a>getting the property</a> "<code>id</code>"
  from the <var>parameters</var> argument.

 <li><p>If <var>id</var> is not <a><code>null</code></a>,
  a <code>Number</code> object,
  or an <a>Object</a> that <a>represents a web element</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a>
  and return its value if it is an <a>error</a>.

 <li><p>Run the substeps of the first matching condition:

  <dl class=switch>
   <dt><var>id</var> is <a><code>null</code></a>
   <dd>
    <ol>
     <li><p>Set the <a>current browsing context</a> to
      the <a>current top-level browsing context</a>.
    </ol>

   <dt><var>id</var> is a <code>Number</code> object
   <dd>
    <ol>
     <li><p>If <var>id</var> is less than 0 or greater than 2<sup>16</sup> – 1,
      return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

     <li><p>Let <var>window</var> be the <a>associated window</a>
      of the <a>current browsing context</a>’s <a>active document</a>.

     <li><p>If <var>id</var> is not
      a <a>supported property index</a> of <var>window</var>,
      return <a>error</a> with <a>error code</a> <a>no such frame</a>.

     <li><p>Let <var>child window</var> be
      the <a><code>WindowProxy</code></a> object obtained by
      calling
      <var>window</var>.<a lt='window.\[[getOwnProperty]]'><code>\[[GetOwnProperty]]</code></a>
      (<var>id</var>).

     <li><p>Set the <a>current browsing context</a> to
      <var>child window</var>’s <a>browsing context</a>.
    </ol>

   <dt><var>id</var> <a>represents a web element</a>
   <dd>
    <ol>
     <li><p>Let <var>element</var> be the result
      of <a>trying</a> to <a>get a known element</a>
      by <a>web element reference</a> <var>id</var>.

     <li><p>If <var>element</var> <a>is stale</a>,
      return <a>error</a> with <a>error code</a> <a>stale element reference</a>.

     <li><p>If <var>element</var> is not a <a><code>frame</code></a>
      or <a><code>iframe</code></a> element,
      return <a>error</a> with <a>error code</a> <a>no such frame</a>.

     <li><p>Set the <a>current browsing context</a> to <var>element</var>’s
      <a>nested browsing context</a>.
    </ol>
 </dl>

 <li><p>Update any implementation-specific state that would result
  from the user selecting the <a>current browsing context</a> for
  interaction, without altering OS-level focus.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>

<p class=note>WebDriver is not bound by the same origin policy,
 so it is always possible to switch into child browsing contexts,
 even if they are different origin to the current browsing context.
</section> <!-- /Switch To Frame -->

<section>
<h3 id=switch-to-parent-frame><dfn>Switch To Parent Frame</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/frame/parent</td>
 </tr>
</table>

<p class=note>The <a>Switch to Parent Frame</a> <a>command</a>
 sets the <a>current browsing context</a> for future <a>commands</a>
 to the parent of the <a>current browsing context</a>.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>If the <a>current browsing context</a> is not equal to
  the <a>current top-level browsing context</a>,
  set the <a>current browsing context</a> to
  the <a>parent browsing context</a> of the <a>current browsing context</a>.

 <li><p>Update any implementation-specific state that would result
  from the user selecting the <a>current browsing context</a> for
  interaction, without altering OS-level focus.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /Switch To Parent Frame -->

<section>
<h3 id=resizing-and-positioning-windows>Resizing and positioning windows</h3>

<p>WebDriver provides <a>commands</a>
 for interacting with the operating system window
 containing the <a>current top-level browsing context</a>.
 Because different operating systems’ window managers provide different abilities,
 not all of the commands in this section can be supported by all <a>remote ends</a>.
 Support for these <a>commands</a> is determined by the <a>window
 dimensioning/positioning</a> <a>capability</a>.
 Where a <a>command</a> is not supported,
 an <a>unsupported operation</a> <a>error</a> is returned.

<p>The <a>top-level browsing context</a>
 has an associated <dfn lt="window states">window state</dfn>
 which describes what visibility state its OS widget window is in.
 It can be in one of the following states:

<table class=simple>
 <tr>
  <th>State
  <th>Keyword
  <th>Default
  <th>Description
 </tr>

 <tr>
  <td><dfn>Maximized window state</dfn>
  <td>"<code>maximized</code>"
  <td>
  <td>The window is maximized.
 </tr>

 <tr>
  <td><dfn noexport>Minimized window state</dfn>
  <td>"<code>minimized</code>"
  <td>
  <td>The window is iconified.
 </tr>

 <tr>
  <td><dfn>Normal window state</dfn>
  <td>"<code>normal</code>"
  <td>✓
  <td>The window is shown normally.
 </tr>

 <tr>
  <td><dfn noexport>Fullscreen window state</dfn>
  <td>"<code>fullscreen</code>"
  <td>
  <td>The window is in full screen mode.
 </tr>
</table>

<p>If for whatever reason
 the <a>top-level browsing context</a>’s OS window
 cannot enter either of the <a>window states</a>,
 or if this concept is not applicable on the current system,
 the default state must be <a lt="normal window state">normal</a>.

<p>A <a>top-level browsing context</a>’s <dfn>window rect</dfn>
 is defined as a dictionary of the <a>screenX</a>, <a>screenY</a>,
 <a>outerWidth</a> and <a>outerHeight</a> attributes
 of the <a><code>WindowProxy</code></a>.
 Its <dfn lt="json serialization of window rect">JSON representation</dfn> is the following:

<dl>
 <dt>"<code>x</code>"
 <dd><p><a><code>WindowProxy</code></a>’s <a>screenX</a> attribute.

 <dt>"<code>y</code>"
 <dd><p><a><code>WindowProxy</code></a>’s <a>screenY</a> attribute.

 <dt>"<code>width</code>"
 <dd><p><a><code>WindowProxy</code></a>’s <a>outerWidth</a> attribute.

 <dt>"<code>height</code>"
 <dd><p><a><code>WindowProxy</code></a>’s <a>outerHeight</a> attribute.
</dl>

<p>To <dfn>maximize the window</dfn>,
 given an operating system level window
 with an associated <a>top-level browsing context</a>,
 run the implementation-specific steps
 to transition the operating system level window
 into the <a>maximized window state</a>.
 If the window manager supports window resizing
 but does not have a concept of window maximization,
 the window dimensions must be increased
 to the maximum available size
 permitted by the window manager
 for the current screen.
 Return when the window has completed the transition,
 or within an implementation-defined timeout.

<p>To <dfn>iconify the window</dfn>,
 given an operating system level window
 with an associated <a>top-level browsing context</a>,
 run implementation-specific steps
 to iconify, minimize, or hide the window
 from the visible screen.
 Do not return from this operation
 until the <a>visibility state</a>
 of the <a>top-level browsing context</a>’s <a>active document</a>
 has reached the <a lt="visibility hidden">hidden</a> state,
 or until the operation times out.

<p>To <dfn>restore the window</dfn>,
 given an operating system level window
 with an associated <a>top-level browsing context</a>,
 run implementation-specific steps
 to restore or unhide the window
 to the visible screen.
 Do not return from this operation
 until the <a>visibility state</a>
 of the <a>top-level browsing context</a>’s <a>active document</a>
 has reached the <a lt="visibility visible">visible</a> state,
 or until the operation times out.

<section>
<h4 id=get-window-rect><dfn>Get Window Rect</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{session id}/window/rect</td>
 </tr>
</table>

<p class=note>The <a>Get Window Rect</a> <a>command</a>
 returns the size and position on the screen
 of the operating system window corresponding
 to the <a>current top-level browsing context</a>.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
   return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Return <a>success</a>
  with the <a lt="json serialization of window rect">JSON serialization</a>
  of the <a>current top-level browsing context</a>’s
  <a>window rect</a>.
</ol>
</section> <!-- /Get Window Rect -->

<section>
<h4 id=set-window-rect><dfn>Set Window Rect</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/window/rect</td>
 </tr>
</table>

<p class=note>
The <a>Set Window Rect</a> <a>command</a>
alters the size and the position of the operating system window
corresponding to the <a>current top-level browsing context</a>.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>Let <var>width</var> be the result of
  <a>getting a property</a> named <code>width</code>
  from the <var>parameters</var> argument, else let it be <a><code>null</code></a>.

 <li><p>Let <var>height</var> be the result of
  <a>getting a property</a> named <code>height</code>
  from the <var>parameters</var> argument, else let it be <a><code>null</code></a>.

 <li><p>Let <var>x</var> be the result of <a>getting a property</a>
  named <code>x</code> from the <var>parameters</var> argument,
  else let it be <a><code>null</code></a>.

 <li><p>Let <var>y</var> be the result of <a>getting a property</a>
  named <code>y</code> from the <var>parameters</var> argument,
  else let it be <a><code>null</code></a>.

 <li><p>If <var>width</var> or <var>height</var> is neither <a><code>null</code></a>
  nor a <a>Number</a> from 0 to 2<sup>31</sup> − 1,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>If <var>x</var> or <var>y</var> is neither <a><code>null</code></a>
  nor a <a>Number</a> from −(2<sup>31</sup>) to 2<sup>31</sup> − 1,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>If the <a>remote end</a> does not support
  the <a>Set Window Rect</a> <a>command</a> for
  the <a>current top-level browsing context</a> for any reason,
  return <a>error</a> with <a>error code</a> <a>unsupported operation</a>.

 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p><a>Fully exit fullscreen</a>.

 <li><p><a>Restore the window</a>.

 <li><p>If <var>width</var> and <var>height</var> are not <a><code>null</code></a>:

  <ol>
   <li><p>Set the width, in <a>CSS pixels</a>,
    of the operating system window containing
    the <a>current top-level browsing context</a>,
    including any <a>browser chrome</a> and externally drawn window decorations
    to a value that is as close as possible to <var>width</var>.

  <li><p>Set the height, in <a>CSS pixels</a>,
   of the operating system window containing
   the <a>current top-level browsing context</a>,
   including any <a>browser chrome</a> and externally drawn window decorations
   to a value that is as close as possible to <var>height</var>.

   <aside class=note>
    <p>The specification does not guarantee
     that the resulting window size will exactly match that which was requested.
     In particular the implementation is expected to clamp values
     that are larger than the physical screen dimensions,
     or smaller than the minimum window size.

    <p>Particular implementations may have other limitations
     such as not being able to resize in single-pixel increments.

    <p>This is intended to mutate the value of the <a>current
     top-level browsing context</a>’s <a><code>WindowProxy</code></a>’s
     <a>outerWidth</a> and <a>outerHeight</a>
     properties. Specifically, the value of <a>outerWidth</a> should
     be as close as possible to <var>width</var> and the value
     of <a>outerHeight</a> should be as close as possible
     to <var>height</var>.
   </aside>
  </ol>

 <li><p>If <var>x</var> and <var>y</var> are not <a><code>null</code></a>:

  <ol>
   <li><p>Run the implementation-specific steps
    to set the position of the operating system level window
    containing the <a>current top-level browsing context</a>
    to the position given by the <var>x</var> and <var>y</var> coordinates.

    <aside class=note>
     <p>Note that this step is similar
      to calling the <a>moveTo(x, y)</a> method
      on the <a><code>WindowProxy</code></a> object
      associated with the <a>current top-level browsing context</a>,
      but without the <a href=https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo>security restrictions</a> that you

     <ol type=a>
      <li>cannot move a window or tab
       that was not created by <code>window.open</code>.

      <li>cannot move a window or tab
       when it is in a window with more than one tab.
     </ol>
   </aside>
  </ol>

 <li><p>Return <a>success</a>
  with the <a lt="json serialization of window rect">JSON serialization</a>
  of the <a>current top-level browsing context</a>’s <a>window rect</a>.
</ol>
</section> <!-- /Set Window Rect -->

<section>
<h4 id=maximize-window><dfn>Maximize Window</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/window/maximize</td>
 </tr>
</table>

<p class=note>The <a>Maximize Window</a> command
 invokes the window manager-specific “maximize” operation, if any,
 on the window containing the <a>current top-level browsing context</a>.
 This typically increases the window to the maximum available size
 without going full-screen.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>remote end</a> does not support
  the <a>Maximize Window</a> command
  for the <a>current top-level browsing context</a> for any reason,
  return <a>error</a> with <a>error code</a> <a>unsupported operation</a>.

 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p><a>Fully exit fullscreen</a>.

 <li><p><a>Restore the window</a>.

 <li><p><a>Maximize the window</a>
  of the <a>current top-level browsing context</a>.

 <li><p>Return <a>success</a>
  with the <a lt="json serialization of window rect">JSON serialization</a>
  of the <a>current top-level browsing context</a>’s
  <a>window rect</a>.
</ol>
</section> <!-- /Maximize Window -->

<section>
<h4 id=minimize-window><dfn>Minimize Window</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/window/minimize</td>
 </tr>
</table>

<p class=note>The <a>Minimize Window</a> command
 invokes the window manager-specific “minimize” operation, if any,
 on the window containing the <a>current top-level browsing context</a>.
 This typically hides the window in the system tray.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>remote end</a> does not support
  the <a>Minimize Window</a> command
  for the <a>current top-level browsing context</a> for any reason,
  return <a>error</a> with <a>error code</a> <a>unsupported operation</a>.

 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p><a>Fully exit fullscreen</a>.

 <li><p><a>Iconify the window</a>.

 <li><p>Return <a>success</a>
  with the <a lt="json serialization of window rect">JSON serialization</a>
  of the <a>current top-level browsing context</a>’s
  <a>window rect</a>.
</ol>
</section> <!-- /Minimize Window -->

<section>
<h4 id=fullscreen-window><dfn>Fullscreen Window</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/window/fullscreen</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>remote end</a> does not <a>support fullscreen</a>
  return <a>error</a> with <a>error code</a> <a>unsupported operation</a>.

 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p><a>Restore the window</a>.

 <li><p>Call <a>fullscreen an element</a>
  with the <a>current top-level browsing context</a>’s
  <a>active document</a>’s <a>document element</a>.

 <li><p>Return <a>success</a>
  with the <a lt="json serialization of window rect">JSON serialization</a>
  of the <a>current top-level browsing context</a>’s
  <a>window rect</a>.
</ol>
</section> <!-- /Fullscreen Window -->

</section> <!-- /Switch To Window -->
</section> <!-- /Contexts -->

<section>
<h2 id=elements>Elements</h2>

<p>A <dfn lt="web elements">web element</dfn>
 is an abstraction used to identify an <a>element</a>
 when it is transported via the <a href="#protocol">protocol</a>,
 between <a>remote</a>- and <a>local</a> ends.

<p>The <dfn>web element identifier</dfn> is the string constant
 "<code>element-6066-11e4-a52e-4f735466cecf</code>".

<p>Each <a>element</a> has an associated <dfn>web element
 reference</dfn> that uniquely identifies the <a>element</a> across
 all <a>browsing contexts</a>.  The <a>web element reference</a> for
 every <a>element</a> representing the same <a>element</a> must be the
 same. It must be a string, and should be the result of <a>generating
 a UUID</a>.

<p>An ECMAScript <a>Object</a> <dfn>represents a web element</dfn>
 if it has a <a>web element identifier</a> <a>own property</a>.

<p>Each <a>browsing context</a> has an associated <dfn>list of
 known elements</dfn>.
 When the <a>browsing context</a> is <a>discarded</a>,
 the <a>list of known elements</a> is discarded along with it.

<p>To <dfn>get a known element</dfn> with
 argument <var>reference</var>, run the following steps:

<ol>
 <li>Let <var>element</var> be the item in the <a>current browsing
 context</a>’s <a>list of known elements</a> for which the <a>web
 element reference</a> is equal to <var>reference</var>, if such an
 element exists. Otherwise return <a>error</a> with <a>error
 code</a> <a>no such element</a>.
 <li>If <var>element</var> <a>is stale</a>, return
 <a>error</a> with <a>error code</a>
 <a>stale element reference</a>.
 <li>Return <a>success</a> with <var>element</var>.
</ol>

<p>To <dfn>get a known connected element</dfn> with
argument <var>reference</var>, run the following steps:
<ol>
  <li>Let <var>element</var> be the result of <a>trying</a> to <a>get
  a known element</a> with argument <var>reference</var>.
  <li>If <var>element</var> is not <a>connected</a>
  return <a>error</a> with error code <a>stale element reference</a>.
  <li>Return <a>success</a> with <var>element</var>.
</ol>

<p>To <dfn noexport lt="create an element">create a web element reference</dfn>
 for an <a><var>element</var></a>:

<ol>
 <li><p>For each <var>known element</var>
  of the <a>current browsing context</a>’s <a>list of known elements</a>:

  <ol>
   <li><p>If <var>known element</var> <a>equals</a> <var>element</var>,
    return <a>success</a> with <var>known element</var>’s <a>web element reference</a>.
  </ol>

 <li><p>Add <var>element</var> to
  the <a>list of known elements</a> of the <a>current browsing context</a>.

 <li><p>Return <a>success</a> with the
  <var>element</var>’s <a>web element reference</a>.
</ol>

<p>The <dfn>JSON serialization of an element</dfn>
 is a JSON <a>Object</a> where the <a>web element identifier</a> key
 is mapped to the <a>element</a>’s <a>web element reference</a>.

<p>When required to <dfn>deserialize a web element</dfn>
 by a JSON <a>Object</a> <var>object</var> that <a>represents a web element</a>:

<ol>
 <li><p>If <var>object</var> has no <a>own property</a> <a>web element identifier</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>reference</var> be the result of
  <a lt="getting a property">getting</a>
  the <a>web element identifier</a> property
  from <var>object</var>.

 <li><p>Let <var>element</var> be the result
  of <a>trying</a> to <a>get a known element</a>
  with argument <var>reference</var>.

 <li><p>Return <a>success</a> with data <var>element</var>.
</ol>

<p>An <a>element</a> <dfn>is stale</dfn>
 if its <a>node document</a> is not the <a>active document</a>
 or if its <a>context object</a> is not <a>connected</a>.

<p>To <dfn lt="scrolls into view|scrolled into view|scroll into view">scroll into view</dfn>
 an <var><a>element</a></var>
 perform the following steps
 only if the element is not already <a>in view</a>:

<ol>
 <li><p>Let <var>options</var> be
  the following <a><code>ScrollIntoViewOptions</code></a>:

  <dl>
   <dt><a>Logical scroll position "<code>block</code>"</a>
   <dd>"<code>end</code>"

   <dt><a>Logical scroll position "<code>inline</code>"</a>
   <dd>"<code>nearest</code>"
  </dl>

 <li><p>On the <var><a>element</a></var>,
  <a>Call</a>(<a>scrollIntoView</a>, <var>options</var>).
</ol>

<p><dfn>Editable</dfn> <a>elements</a>
 are those that can be used for <a lt="element send keys">typing</a>
 and <a lt="element clear">clearing</a>,
 and they fall into two subcategories:

<dl class=subcategories>
 <dt><dfn lt="mutable form control element">Mutable form control elements</dfn>
 <dd><p>Denotes <a><code>input</code> elements</a>
  that are <a>mutable</a> (e.g. that are not <a>read only</a> or <a>disabled</a>)
  and whose <a><code>type</code> attribute</a>
  is in one of the following states:

  <ul class=brief>
   <li><a lt="Text and Search state">Text and Search</a></li>
   <li><a lt="URL state">URL</a></li>
   <li><a lt="Telephone state">Telephone</a></li>
   <li><a lt="Email state">Email</a></li>
   <li><a lt="Password state">Password</a></li>
   <li><a lt="Date state">Date</a></li>
   <li><a lt="Month state">Month</a></li>
   <li><a lt="Week state">Week</a></li>
   <li><a lt="Time state">Time</a></li>
   <li><a lt="Local Date and Time state">Local Date and Time</a></li>
   <li><a lt="Number state">Number</a></li>
   <li><a lt="Range state">Range</a></li>
   <li><a lt="Color state">Color</a></li>
   <li><a lt="File Upload state">File Upload</a></li>
  </ul>

  <p>And the <a><code>textarea</code> element</a>.

 <dt><dfn lt="mutable element">Mutable elements</dfn>
 <dd><p>Denotes elements that are <a>editing hosts</a> or <a>content editable</a>.
</dl>

<p>An <a>element</a> is said to have
 <dfn lt="pointer events are not disabled">pointer events disabled</dfn>
 if the <a>resolved value</a> of its "<code>pointer-events</code>" style property
 is "<code>none</code>".

<p>An <a>element</a> is to be considered <dfn>read only</dfn>
 if it is an <a><code>input</code> element</a>
 whose <a><code>readOnly</code> attribute</a> is set.


<section>
<h3 id=interactability>Interactability</h3>

<p>In order to determine if an <a>element</a>
 can be interacted with using pointer actions,
 WebDriver performs hit-testing to find
 if the interaction will be able to reach the requested element.

<p>An <dfn lt="interactable|interactable element">interactable element</dfn>
 is an <a>element</a> which is either
 <a>pointer-interactable</a> or <a>keyboard-interactable</a>.

<p>A <dfn lt="pointer-interactable">pointer-interactable element</dfn>
 is defined to be the first <a>element</a>,
 defined by the <a>paint order</a> found at the <a>center point</a>
 of its rectangle that is inside the <a>viewport</a>,
 excluding the size of any rendered scrollbars.

<p>A <dfn lt="keyboard-interactable">keyboard-interactable element</dfn>
 is any <a>element</a> that has a <a>focusable area</a>,
 is a <a><code>body</code> element</a>,
 or is the <a>document element</a>.

<p>An <a>element</a>’s <dfn lt="center point|in-view center point">in-view center point</dfn>
 is the origin position of the rectangle
 that is the intersection between
 the element’s first <a>DOM client rectangle</a>
 and the <a>initial viewport</a>.
 Given an <a>element</a> that is known to be <a>in view</a>,
 it can be calculated this way:

<ol>
 <li><p>Let <var ignore>rectangle</var> be
  the first <a>element</a> of the <a><code>DOMRect</code></a> sequence
  returned by calling <a>getClientRects</a> on <a><var>element</var></a>.

 <li><p>Let <var>left</var> be
  <a>max</a>(0, <a>min</a>(<a>x coordinate</a>,
  <a>x coordinate</a> + <a>width dimension</a>)).

 <li><p>Let <var>right</var> be
  <a>min</a>(<a>innerWidth</a>,
  <a>max</a>(<a>x coordinate</a>,
  <a>x coordinate</a> + <a>width dimension</a>)).

 <li><p>Let <var>top</var> be
  <a>max</a>(0, <a>min</a>(<a>y coordinate</a>,
  <a>y coordinate</a> + <a>height dimension</a>)).

 <li><p>Let <var>bottom</var> be
  <a>min</a>(<a>innerHeight</a>,
  <a>max</a>(<a>y coordinate</a>,
  <a>y coordinate</a> + <a>height dimension</a>)).

 <li><p>Let <var>x</var> be <a>floor</a>((<var>left</var> + <var>right</var>) ÷ 2.0).

 <li><p>Let <var>y</var> be <a>floor</a>((<var>top</var> + <var>bottom</var>) ÷ 2.0).

 <li><p>Return the pair of (<var>x</var>, <var>y</var>).
</ol>

<p>An <a>element</a> is <dfn>in view</dfn>
 if it is a member of its own <a>pointer-interactable paint tree</a>,
 given the pretense that its <a>pointer events are not disabled</a>.

<p>An <a>element</a> is <dfn lt="obscuring|obscured">obscured</dfn>
 if the <a>pointer-interactable paint tree</a>
 at its <a>center point</a> is empty,
 or the first element in this tree
 is not an <a>inclusive descendant</a> of itself.

<aside class=example>
 <p>This ascertains if the <a>element</a>’s <a>in-view center point</a>
  would be possible to <a lt="element click">interact</a> with.

 <p>For example, the <a>paint tree</a> at this button’s
  <a>center point</a>, the red square, is not itself the button or
  a <a>descendant</a> of the button.  In other words, it is not
  an <em><a>inclusive descendant</a></em>.  This makes the
  button <em><a>obscured</a></em>:

 <p>
  <button style="
   width: 100px;
   margin: 40px 0;">foobar</button>
  <div style="
   position: absolute;
   height: 100px;
   width: 100px;
   background: rgba(255,0,0,.5);
   margin-left: 40px;
   margin-top: -120px;"></div>

 <p>On the other hand, the <a>center point</a> of the following select
  list is the third <a><code>option</code> element</a>, because unlike
  a drop-down list,
  <code>&lt;select multiple&gt;</code>’s options
  are individually visible and painted.
  Because the option is a <em><a>descendant</a></em>
  of the <a><code>select</code> element</a>,
  it is <em>not</em> <a>obscured</a>:

 <p>
  <select multiple>
   <option>first</option>
   <option>second</option>
   <option>third</option>
   <option>fourth</option>
  </select>
</aside>

<p>An <var><a>element</a></var>’s
 <dfn>pointer-interactable paint tree</dfn>
 is produced this way:

<ol>
 <li><p>If <var>element</var> is <a>not in the same tree</a>
  as the <a>current browsing context</a>’s <a>active document</a>,
  return an empty sequence.

 <li><p>Let <var>rectangles</var> be
  the <a><code>DOMRect</code></a> sequence
  returned by calling <a>getClientRects</a>.

 <!--
  An element which style property `display` is "none"
  returns an empty DOMRect sequence.
 -->
 <li><p>If <var>rectangles</var> has the length of 0,
  return an empty sequence.

 <li><p>Let <var>center point</var> be the <a>in-view center point</a>
  of the first indexed element in <var>rectangles</var>.

 <li><p>Return the <a>elements from point</a>
  given the coordinates <var>center point</var>.
</ol>
</section> <!-- /Interactability -->


<section>
<h3 id=element-retrieval>Retrieval</h3>

<p>The <a>Find Element</a>,
 <a>Find Elements</a>,
 <a>Find Element From Element</a>,
 and <a>Find Elements From Element</a> <a>commands</a>
 allow lookup of individual elements and collections of elements.
 Element retrieval searches are performed
 using pre-order traversal of the document’s nodes
 that match the provided selector’s expression.
 Elements are <a lt="JSON serialization of an element">serialized</a>
 and returned as <a>web elements</a>.

<p>When required to <dfn>find</dfn> with arguments
 <var>start node</var>, <var>using</var> and <var>value</var>,
 a <a>remote end</a> must run the following steps:

<ol>
 <li><p>Let <var>end time</var> be the current time plus
  the <a>session implicit wait timeout</a>.

 <li><p>Let <var>location strategy</var> be equal to <var>using</var>.

 <li><p>Let <var>selector</var> be equal to <var>value</var>.

 <li><p>Let <var>elements returned</var> be the result of <a>trying</a> to call
  the relevant <a>element location strategy</a> with arguments
  <var>start node</var>, and <var>selector</var>.

 <li>If
 a <a><code>DOMException</code></a>, <a><code>SyntaxError</code></a>,
 <a><code>XPathException</code></a>, or other error occurs during the
 execution of the <a>element location strategy</a>, return <a>error</a>
 <a>invalid selector</a>.

 <li><p>If <var>elements returned</var> is empty and the current time
  is less than <var>end time</var> return to step 4. Otherwise,
  continue to the next step.

 <li><p>Let <var>result</var> be an empty JSON <a>List</a>.

 <li><p>For each <var>element</var> in <var>elements returned</var>,
  append the <a lt="JSON serialization of an element">serialization</a>
  of <var>element</var> to <var>result</var>.

 <li><p>Return <a>success</a> with data <var>result</var>.
</ol>

<section>
<h4 id=locator-strategies>Locator strategies</h4>

<p>An <dfn lt="strategy|element location strategy">element location strategy</dfn>
 is an <a>enumerated attribute</a>
 deciding what technique should be used
 to search for <a>elements</a> in the <a>current browsing context</a>.
 The following <dfn>table of location strategies</dfn> lists the keywords and
 states defined for this attribute:

<table class=simple>
 <tr>
  <th>State
  <th>Keyword
 </tr>

 <tr>
  <td><a>CSS selector</a>
  <td>"<code>css selector</code>"
 </tr>

 <tr>
  <td><a>Link text selector</a>
  <td>"<code>link text</code>"
 </tr>

 <tr>
  <td><a>Partial link text selector</a>
  <td>"<code>partial link text</code>"
 </tr>

 <tr>
  <td><a>Tag name</a>
  <td>"<code>tag name</code>"
 </tr>

 <tr>
  <td><a>XPath selector</a>
  <td>"<code>xpath</code>"
 </tr>
</table>

<section>
<h5 id=css-selectors>CSS selectors</h5>

<p>To find a <a>web element</a> with
 the <dfn>CSS Selector</dfn> <a>strategy</a>
 the following steps need to be completed:

<ol>
 <li><p>Let <var>elements</var> be the result of
  calling <a>querySelectorAll</a> with <var>selector</var> with
  the <a>context object</a> equal to the <var>start node</var>. If
  this causes an exception to be thrown, return <a>error</a>
  with <a>error code</a> <a>invalid selector</a>.

 <li><p>Return <a>success</a> with data <var>elements</var>.
</ol>
</section> <!-- /CSS selectors -->

<section>
<h5 id=link-text>Link text</h5>

<p>To find a <a>web element</a>
 with the <dfn lt="link text selector|link text">Link Text</dfn> <a>strategy</a>
 the following steps need to be completed:

<ol>
 <li><p>Let <var>elements</var> be the result of
  calling <a>querySelectorAll</a>, with argument <a><code>a</code>
  elements</a>, with the <a>context object</a> equal to the
  <var>start node</var>. If this throws an exception,
  return <a>error</a> with <a>error code</a> <a>unknown error</a>.

 <li><p>Let <var>result</var> be an empty <a>NodeList</a>.

 <li><p>For each <var>element</var> in <var>elements</var>:

  <ol>
   <li><p>Let <var>rendered text</var> be the value that would be
    returned via a call to <a>Get Element Text</a>
    for <var>element</var>.

   <li><p>Let <var>trimmed text</var> be the result of removing
    all <a>whitespace</a> from the start and end of the
    string <var>rendered text</var>.

   <li><p>If <var>trimmed text</var> equals <var>selector</var>,
    append <var>element</var> to <var>result</var>.
  </ol>

 <li><p>Return <a>success</a> with data <var>result</var>.
</ol>
</section> <!-- /Link text -->

<section>
<h5 id=partial-link-text>Partial link text</h5>

<p>The <dfn lt="partial link text selector|partial link text">Partial link text</dfn> <a>strategy</a>
 is very similar to the <a>Link Text</a> <a>strategy</a>,
 but rather than matching the entire string,
 only a substring needs to match.
 That is, return all <a><code>a</code> elements</a>
 with rendered text that contains the selector expression.

<p>To find a <a>web element</a>
 with the <a>Partial Link Text</a> <a>strategy</a>
 the following steps need to be completed:

<ol>
 <li><p>Let <var>elements</var> be the result of
  calling <a>querySelectorAll</a>, with argument <a><code>a</code>
  elements</a>, with the <a>context object</a> equal to the
  <var>start node</var>. If this throws an exception,
  return <a>error</a> with <a>error code</a> <a>unknown error</a>.

 <li><p>Let <var>result</var> be an empty <a>NodeList</a>.

 <li><p>For each <var>element</var> in <var>elements</var>:

  <ol>
   <li><p>Let <var>rendered text</var> be the value that would be
    returned via a call to <a>Get Element Text</a>
    for <var>element</var>.

   <li><p>If <var>rendered text</var> contains <var>selector</var>,
    append <var>element</var> to <var>result</var>.
  </ol>

 <li><p>Return <a>success</a> with data <var>result</var>.
</ol>
</section> <!-- /Partial link text -->

<section>
<h5 id=tag-name>Tag name</h5>

<p>To find a <a>web element</a> with the <dfn>Tag
 Name</dfn> <a>strategy</a> return <a>success</a> with data set to the
 result of calling
 <a><code>getElementsByTagName</code></a> with the argument
 <var>selector</var>, with the <a>context object</a> equal to the
 <var>start node</var>.

</section> <!-- /Tag name -->

<section>
<h5 id=xpath>XPath</h5>

<p>To find a <a>web element</a> with
 the <dfn>XPath Selector</dfn> <a>strategy</a>
 the following steps need to be completed:

<ol>
 <li><p>Let <var>evaluateResult</var> be the result of
  calling <a><code>evaluate</code></a>,
  with arguments <var>selector</var>,
  <var>start node</var>,
  <a><code>null</code></a>,
  <a>ORDERED_NODE_SNAPSHOT_TYPE</a>,
  and <a><code>null</code></a>.

  <p class=note>A snapshot is used to promote operation atomicity.

 <li><p>Let <var>index</var> be 0.

 <li><p>Let <var>length</var> be the result of <a>getting the
  property</a> "<code>snapshotLength</code>"
  from <var>evaluateResult</var>. If this throws
  an <a>XPathException</a> return <a>error</a> with <a>error
  code</a> <a>invalid selector</a>, otherwise if this throws any other
  exception return <a>error</a> with <a>error code</a> <a>unknown
  error</a>.

 <li><p>Let <var>result</var> be an empty <a>NodeList</a>.

 <li><p>Repeat, while <var>index</var> is less than <var>length</var>:

  <ol>
   <li>Let <var>node</var> be the result of calling <a>snapshotItem</a> with
    argument <var>index</var>, with the <a>context object</a> equal to
    <var>evaluateResult</var>.

   <li><p>If <var>node</var> is not an <a>element</a> return an <a>error</a>
    with <a>error code</a> <a>invalid selector</a>.

   <li>Append <var>node</var> to <var>result</var>.

   <li>Increment <var>index</var> by 1.
  </ol>

 <li><p>Return <a>success</a> with data <var>result</var>.

</ol>
</section> <!-- /XPath -->
</section> <!-- /Locator strategies -->

<section>
<h4 id=find-element><dfn>Find Element</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/element</td>
 </tr>
</table>

<aside class=note>
<p>
The <a>Find Element</a> <a>command</a>
is used to find an <a>element</a> in the <a>current browsing context</a>
that can be used as the <a>web element</a> context
for future element-centric <a>commands</a>.

<p>
For example, consider this pseudo code
which retrieves an element with the <code>#toremove</code> ID
and uses this as the argument for a script it injects
to remove it from the HTML document:

<pre><code>let body = session.find.css("#toremove");
session.execute("arguments[0].remove()", [body]);
</code></pre>
</aside>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>Let <var>location strategy</var> be the result
  of <a>getting a property</a> called "<code>using</code>".

 <li><p>If <var>location strategy</var> is not present as a keyword in the
  <a>table of location strategies</a>, return <a>error</a> with
  <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>selector</var> be the result
  of <a>getting a property</a> called "<code>value</code>".

 <li><p>If <var>selector</var> is <a>undefined</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>If the <a>current browsing context</a> is <a>no longer
  open</a>, return <a>error</a> with <a>error code</a> <a>no such
  window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>start node</var> be
  the <a>current browsing context</a>’s <a>document element</a>.

 <li><p>If <var>start node</var> is <a><code>null</code></a>,
  return <a>error</a> with <a>error code</a> <a>no such element</a>.

 <li><p>Let <var>result</var> be the result of <a>trying</a> to <a>Find</a>
  with <var>start node</var>, <var>location strategy</var>,
  and <var>selector</var>.

 <li><p>If <var>result</var> is empty, return <a>error</a>
 with <a>error code</a> <a>no such element</a>. Otherwise, return the
 first element of <var>result</var>.
</ol>
</section> <!-- /Find Element -->

<section>
<h4 id=find-elements><dfn>Find Elements</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/elements</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>Let <var>location strategy</var> be the result
  of <a>getting a property</a> called "<code>using</code>".

 <li><p>If <var>location strategy</var> is not present as a keyword in the
  <a>table of location strategies</a>, return <a>error</a> with
  <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>selector</var> be the result
  of <a>getting a property</a> called "<code>value</code>".

 <li><p>If <var>selector</var> is <a>undefined</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>If the <a>current browsing context</a> is <a>no longer
  open</a>, return <a>error</a> with <a>error code</a> <a>no such
  window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>start node</var> be
  the <a>current browsing context</a>’s <a>document element</a>.

 <li><p>If <var>start node</var> is <a><code>null</code></a>,
  return <a>error</a> with <a>error code</a> <a>no such element</a>.

 <li>Return the result of <a>trying</a> to <a>Find</a> with
  <var>start node</var>, <var>location strategy</var>, and <var>selector</var>.
</ol>
</section> <!-- /Find Elements -->

<section>
<h4 id=find-element-from-element><dfn>Find Element From Element</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/element</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>Let <var>location strategy</var> be the result
  of <a>getting a property</a> called "<code>using</code>".

 <li><p>If <var>location strategy</var> is not present as a keyword in the
  <a>table of location strategies</a>, return <a>error</a> with
  <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>selector</var> be the result
  of <a>getting a property</a> called "<code>value</code>".

 <li><p>If <var>selector</var> is <a>undefined</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>If the <a>current browsing context</a> is <a>no longer
  open</a>, return <a>error</a> with <a>error code</a> <a>no such
  window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>start node</var> be the result
  of <a>trying</a> to <a>get a known connected element</a>
  with <a>url variable</a> <var>element id</var>.

 <li>Let <var>result</var> be the value of <a>trying</a> to <a>Find</a> with
  <var>start node</var>, <var>location strategy</var>,
  and <var>selector</var>.

 <li><p>If <var>result</var> is empty, return <a>error</a>
  with <a>error code</a> <a>no such element</a>. Otherwise, return the
  first element of <var>result</var>.
</ol>
</section> <!-- /Find Element From Element -->

<section>
<h4 id=find-elements-from-element><dfn>Find Elements From Element</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/elements</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>Let <var>location strategy</var> be the result
  of <a>getting a property</a> called "<code>using</code>".

 <li><p>If <var>location strategy</var> is not present as a keyword in the
  <a>table of location strategies</a>, return <a>error</a> with
  <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>selector</var> be the result
  of <a>getting a property</a> called "<code>value</code>".

 <li><p>If <var>selector</var> is <a>undefined</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>If the <a>current browsing context</a> is <a>no longer
  open</a>, return <a>error</a> with <a>error code</a> <a>no such
  window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>start node</var> be the result
  of <a>trying</a> to <a>get a known connected element</a>
  with <a>url variable</a> <var>element id</var>.

 <li>Return the result of <a>trying</a> to <a>Find</a> with
  <var>start node</var>, <var>location strategy</var>, and <var>selector</var>.
</ol>
</section> <!-- /Find Elements From Element -->

<section>
<h4 id=get-active-element><dfn>Get Active Element</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/active</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer
  open</a>, return <a>error</a> with <a>error code</a> <a>no such
  window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>active element</var> be the <a>active element</a>
  of the <a>current browsing context</a>’s <a>document element</a>.

 <li><p>If <var>active element</var> is a non-null <a>element</a>,
  return <a>success</a> with its <a lt="JSON serialization of an element">JSON serialization</a>.

  <p>Otherwise, return <a>error</a> with <a>error code</a> <a>no such element</a>.
</ol>
</section> <!-- /Get Active Element -->
</section> <!-- /Retrieval -->

<section>
<h3 id=state>State</h3>

<p>To <dfn>calculate the absolute position</dfn> of <a><var>element</var></a>:

<ol>
 <li><p>Let <var>rect</var> be the value
  returned by calling <a>getBoundingClientRect</a>.

 <li><p>Let <var>window</var> be the <a>associated window</a>
  of <a>current top-level browsing context</a>.

 <li><p>Let <var>x</var> be
  (<a>scrollX</a> of <var>window</var> +
  <var>rect</var>’s <a>x coordinate</a>).

 <li><p>Let <var>y</var> be
  (<a>scrollY</a> of <var>window</var> +
  <var>rect</var>’s <a>y coordinate</a>).

 <li><p>Return a pair of (<var>x</var>, <var>y</var>).
</ol>

<p>To determine if <a>node</a> is <dfn>not in the same tree</dfn>
 as another <a>node</a>, <var>other</var>,
 run the following substeps:

<ol>
 <li><p>If the <a>node</a>’s <a>node document</a>
  is not <var>other</var>’s <a>node document</a>,
  return true.

 <li><p>Return true if the result of calling the <a>node</a>’s
  <a>compareDocumentPosition</a> with <var>other</var> as argument
  is <a>DOCUMENT_POSITION_DISCONNECTED</a> (1),
  otherwise return false.
</ol>

<p>An <a><var>element</var></a>’s <dfn>container</dfn> is:

<dl class=switch>
 <dt><a><code>option</code> element</a> in a valid <a>element context</a>
 <dt><a><code>optgroup</code> element</a> in a valid <a>element context</a>
 <dd><p>The <a><var>element</var></a>’s <a>element context</a>,
  which is determined by:

  <ol>
   <li><p>Let <var>datalist parent</var> be
    the first <a><code>datalist</code> element</a> reached
    by traversing the tree in reverse order from <var>element</var>,
    or <a>undefined</a> if the root of the tree is reached.

   <li><p>Let <var>select parent</var> be the
    first <a><code>select</code> element</a> reached
    by traversing the tree in reverse order from <var>element</var>,
    or <a>undefined</a> if the root of the tree is reached.

   <li><p>If <var>datalist parent</var> is <a>undefined</a>,
    the <a>element context</a> is <var>select parent</var>.
    Otherwise, the <a>element context</a> is <var>datalist parent</var>.
  </ol>

 <dt><a><code>option</code> element</a> in an invalid <a>element context</a>
 <dd><p>The element does not have a container.

 <dt>Otherwise
 <dd><p>The container is the <a>element</a> itself.
</dl>

<section>
<h4 id=is-element-selected><dfn>Is Element Selected</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/selected</td>
 </tr>
</table>

<p class=note>
The <a>Is Element Selected</a> <a>command</a>
determines if the referenced <a>element</a> is selected or not.
This operation only makes sense on <a lt="input element"><code>input</code> elements</a>
of the <a>Checkbox</a>- and <a>Radio Button</a> states,
or on <a><code>option</code> elements</a>.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>element</var> be the result
  of <a>trying</a> to <a>get a known connected element</a>
  with <a>url variable</a> <var>element id</var>.

 <li><p>Let <var>selected</var> be the value
  corresponding to the first matching statement:

  <dl class=switch>
   <dt><var>element</var> is an <a><code>input</code> element</a>
    with a <a><code>type</code> attribute</a>
    in the <a>Checkbox</a>- or <a>Radio Button</a> state
   <dd><p>The result of <var>element</var>’s <a>checkedness</a>.

   <dt><var>element</var> is
    an <a><code>option</code> element</a>
   <dd><p>The result of <var>element</var>’s <a>selectedness</a>.

   <dt>Otherwise
   <dd>False.
  </dl>

 <li><p>Return <a>success</a> with data <var>selected</var>.
</ol>
</section> <!-- /Is Element Selected -->

<section>
<h4 id=get-element-attribute><dfn>Get Element Attribute</dfn></h4>

<table class="simple jsoncommand">
  <tr>
    <th>HTTP Method</th>
    <th>URI Template</th>
  </tr>
  <tr>
    <td>GET</td>
    <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/attribute/{<var>name</var>}</td>
  </tr>
</table>

<p>
The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>element</var> be the result
  of <a>trying</a> to <a>get a known element</a>
  with <a>url variable</a> <var>element id</var>.

 <li>Let <var>result</var> be the result of the first matching condition:

   <dl class=switch>
    <dt>If <var>name</var> is a <a>boolean attribute</a>
    <dd><p>"<code>true</code>" (string)
     if the <var>element</var> <a>has the attribute</a>,
     otherwise <a><code>null</code></a>.

    <dt>Otherwise
    <dd><p>The result of <a>getting an attribute by name</a>
     <var>name</var>.
   </dl>

  <li><p>Return <a>success</a> with data <var>result</var>.
</ol>

<p class="note">Please note that the behavior of this command
 deviates from the behavior of <a>getAttribute</a> in [[DOM]],
 which in the case of a set <a>boolean attribute</a>
 would return an empty string.
 The reason this command returns true as a string
 is because this evaluates to true in most dynamically typed programming languages,
 but still preserves the expected type information.
</section> <!-- /Get Element Attribute -->

<section>
<h4 id=get-element-property><dfn>Get Element Property</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/property/{<var>name</var>}</td>
 </tr>
</table>

<p>
The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>element</var> be the result
  of <a>trying</a> to <a>get a known element</a>
  with <a>url variable</a> <var>element id</var>.

 <li><p>Let <var>property</var> be the result of calling
  the <var>element</var>.<a>\[[GetProperty]]</a>(<var>name</var>).

 <li><p>Let <var>result</var> be the value of
  <var>property</var> if not <a>undefined</a>, or <a><code>null</code></a>.

 <li><p>Return <a>success</a> with data <var>result</var>.
</ol>
</section> <!-- /Get Element Property -->

<section>
<h4 id=get-element-css-value><dfn>Get Element CSS Value</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/css/{<var>property name</var>}</td>
 </tr>
</table>

<p>
The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>element</var> be the result
  of <a>trying</a> to <a>get a known connected element</a>
  with <a>url variable</a> <var>element id</var>.

 <li><p>Let <var>computed value</var> be the result of the first matching condition:
  <dl class="switch">
   <dt><a>current browsing context</a>’s <a>document</a>
   <a lt="document type">type</a> is not "<code>xml</code>"
   <dd><a>computed value</a> of parameter <var>property name</var>
    from <var>element</var>’s style declarations. <var>property name</var>
    is obtained from <a>url variables</a>.

   <dt>Otherwise
   <dd> "" (empty string)
  </dl>

 <li>Return <a>success</a> with data <var>computed value</var>.
</ol>
</section> <!-- /Get CSS Value -->

<section>
<h4 id=get-element-text><dfn>Get Element Text</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/text</td>
 </tr>
</table>

<aside class=note>
<p>
The <a>Get Element Text</a> <a>command</a>
intends to return an <a>element</a>’s text “as rendered”.
An <a>element</a>’s rendered text is also used
for locating <a><code>a</code> elements</a>
by their <a>link text</a> and <a>partial link text</a>.

<p>
One of the major inputs to this specification
was the open source <a href=https://selenium.dev>Selenium project</a>.
This was in wide-spread use before this specification written,
and so had set user expectations
of how the <a>Get Element Text</a> command should work.
As such, the approach presented here is known to be flawed,
but provides the best compatibility with existing users.
</aside>

<p>
When processing text,
<dfn>whitespace</dfn> is defined as characters from the Unicode Character Database
with the <a>Unicode character property</a> "<code>WSpace=Y</code>" or "<code>WS</code>".
[[UAX44]]

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is
  an <a>error</a>.

 <li><p>Let <var>element</var> be the result
  of <a>trying</a> to <a>get a known connected element</a>
  with <a>url variable</a> <var>element id</var>.

 <li><p>Let <var>rendered text</var> be the result of performing
  implementation-specific steps whose result is exactly the same as the
  result of a <a>Call</a>(<a><code>bot.dom.getVisibleText</code></a>,
   <a><code>null</code></a>, <var>element</var>).

 <li><p>Return <a>success</a> with data <var>rendered text</var>.
</ol>
</section> <!-- /Get Element Text -->

<section>
<h4 id=get-element-tag-name><dfn>Get Element Tag Name</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/name</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>element</var> be the result
  of <a>trying</a> to <a>get a known element</a>
  with <a>url variable</a> <var>element id</var>.

 <li><p>Let <var>qualified name</var> be the result of getting
  <var>element</var>’s <a>tagName</a> content <a>attribute</a>.

 <li><p>Return <a>success</a> with data <var>qualified name</var>.
</ol>
</section> <!-- /Get Element Tag Name -->

<section>
<h4 id=get-element-rect><dfn>Get Element Rect</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/rect</td>
 </tr>
</table>

<aside class=note>
<p>
The <a>Get Element Rect</a> <a>command</a>
returns the dimensions and coordinates of the given <a>web element</a>.
The returned value is a dictionary with the following members:

<dl>
<dt><dfn noexport lt="elementrect-x">x</dfn>
<dd>
X axis position of the top-left corner of the <a>web element</a>
relative to the <a>current browsing context</a>’s
<a>document element</a> in <a>CSS pixels</a>.

<dt><dfn noexport lt="elementrect-y">y</dfn>
<dd>
Y axis position of the top-left corner of the <a>web element</a>
relative to the <a>current browsing context</a>’s
<a>document element</a> in <a>CSS pixels</a>.

<dt><dfn noexport lt="elementrect-height">height</dfn>
<dd>
Height of the <a>web element</a>’s
<a>bounding rectangle</a> in <a>CSS pixels</a>.

<dt><dfn noexport lt="elementrect-width">width</dfn>
<dd>
Width of the <a>web element</a>’s
<a>bounding rectangle</a> in <a>CSS pixels</a>.
</dl>
</aside>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>element</var> be the result
  of <a>trying</a> to <a>get a known connected element</a>
  with <a>url variable</a> <var>element id</var>.

 <li><p><a>Calculate the absolute position</a> of <var>element</var>
  and let it be <var>coordinates</var>.

 <li><p>Let <var>rect</var> be <var>element</var>’s
  <a>bounding rectangle</a>.

 <li><p>Let <var>body</var> be a new JSON <a>Object</a> initialised with:

  <dl>
   <dt>"<code>x</code>"
   <dd>The first value of <var>coordinates</var>.

   <dt>"<code>y</code>"
   <dd>The second value of <var>coordinates</var>.

   <dt>"<code>width</code>"
   <dd>Value of <var>rect</var>’s <a>width dimension</a>.

   <dt>"<code>height</code>"
   <dd>Value of <var>rect</var>’s <a>height dimension</a>.
  </dl>

 <li><p>Return <a>success</a> with data <var>body</var>.
</ol>
</section> <!-- /Get Element Rect -->

<section>
<h4 id=is-element-enabled><dfn>Is Element Enabled</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/enabled</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a>
  and return its value if it is an <a>error</a>.

 <li><p>Let <var>element</var> be the result
  of <a>trying</a> to <a>get a known connected element</a>
  with <a>url variable</a> <var>element id</var>.

 <li><p>Let <var>enabled</var> be a boolean initially set to true
  if the <a>current browsing context</a>’s
  <a>document</a> <a lt="document type">type</a>
  is not "<code>xml</code>".

  <p>Otherwise, let <var>enabled</var> to false
   and jump to the last step of this algorithm.

 <li><p>Set <var>enabled</var> to false if a form control is <a>disabled</a>.

 <li><p>Return <a>success</a> with data <var>enabled</var>.
</ol>
</section> <!-- /Is Element Enabled -->

<section>
  <h4 id=get-computed-role><dfn>Get Computed Role</dfn></h4>

  <table class="simple jsoncommand">
    <tr>
      <th>HTTP Method</th>
      <th>URI Template</th>
    </tr>
    <tr>
      <td>GET</td>
      <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/computedrole</td>
    </tr>
  </table>

  <p>The <a>remote end steps</a> are:

  <ol>
    <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
        return <a>error</a> with <a>error code</a> <a>no such window</a>.

    <li><p><a>Handle any user prompts</a>
        and return its value if it is an <a>error</a>.

    <li><p>Let <var>element</var> be the result
        of <a>trying</a> to <a>get a known connected element</a>
        with <a>url variable</a> <var>element id</var>.

    <li><p>Let <var>role</var> be the result of computing the <a>WAI-ARIA role</a> of <var>element</var>.

    <li><p>Return <a>success</a> with data <var>role</var>.
  </ol>
</section> <!-- /Get Element Computed Role -->

<section>
  <h4 id=get-computed-label><dfn>Get Computed Label</dfn></h4>

  <table class="simple jsoncommand">
    <tr>
      <th>HTTP Method</th>
      <th>URI Template</th>
    </tr>
    <tr>
      <td>GET</td>
      <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/computedlabel</td>
    </tr>
  </table>

  <p>The <a>remote end steps</a> are:

    <ol>
      <li>
        <p>If the <a>current browsing context</a> is <a>no longer open</a>,
          return <a>error</a> with <a>error code</a> <a>no such window</a>.

      <li><p><a>Handle any user prompts</a>
          and return its value if it is an <a>error</a>.

      <li><p>Let <var>element</var> be the result
          of <a>trying</a> to <a>get a known connected element</a>
          with <a>url variable</a> <var>element id</var>.

      <li><p>Let <var>label</var> be the result of a <a>Accessible Name and Description Computation</a> for the <a>Accessible Name</a> of the <var>element</var>.

      <li><p>Return <a>success</a> with data <var>label</var>.
    </ol>
</section> <!-- /Get Element Computed Label -->
</section> <!-- /State -->

<section>
<h3 id=element-interaction>Interaction</h3>

<p>The <a>element</a> interaction <a>commands</a>
 provide a high-level instruction set for manipulating form controls.
 Unlike <a>Actions</a>,
 they will implicitly <a lt="scroll into view">scroll elements into view</a>
 and check that it is an <a>interactable element</a>.

<p>Some <a>resettable elements</a> define their own <dfn>clear algorithm</dfn>.
 Unlike their associated <a>reset algorithms</a>,
 changes made to form controls as part of these algorithms
 <em>do</em> count as changes caused by the user
 (and thus, e.g. do cause <a><code>input</code></a> events to fire).
 When the <a>clear algorithm</a> is invoked
 for an element that does not define its own <a>clear algorithm</a>,
 its <a>reset algorithm</a> must be invoked instead.

<p>The <a>clear algorithm</a> for <a><code>input</code></a> elements
 is to set the <a>dirty value flag</a> and <a>dirty checkedness flag</a> back to false,
 set the <a>value</a> of the element to an empty string,
 set the <a>checkedness</a> of the element to true
 if the element has a <a><code>checked</code></a> content attribute and false if it does not,
 empty the list of <a>selected files</a>,
 and then invoke the <a>value sanitization algorithm</a>
 iff the <a><code>type</code></a> attribute’s current state defines one.

<p>The <a>clear algorithm</a> for <a><code>textarea</code></a> elements
 is to set the <a>dirty value flag</a> back to false,
 and set the <a>raw value</a> of element to an empty string.

<p>The <a>clear algorithm</a> for <a><code>output</code></a> elements
 is set the element’s <a>value mode flag</a> to default
 and then to set the element’s <code><a>textContent</a></code> IDL attribute
 to an empty string (thus clearing the element’s child nodes).

<section>
<h4 id=element-click><dfn>Element Click</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/click</td>
 </tr>
</table>

<aside class=note>
<p>
The <a>Element Click</a> <a>command</a>
<a>scrolls into view</a> the <a>element</a>
if it is not already <a>pointer-interactable</a>,
and clicks its <a>in-view center point</a>.

<p>
If the element’s <a>center point</a>
is <a>obscured</a> by another element,
an <a>element click intercepted</a> <a>error</a> is returned.
If the element is outside the <a>viewport</a>,
an <a>element not interactable</a> <a>error</a> is returned.
</aside>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>element</var> be the result of <a>trying</a>
  to <a>get a known connected element</a> with argument <var>element id</var>.

 <li><p>If the <var>element</var> is
  an <a><code>input</code> element</a> in the <a>file upload state</a>
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p><a>Scroll into view</a> the <var>element</var>’s <a>container</a>.

 <li><p>If <var>element</var>’s <a>container</a> is still not <a>in view</a>,
  return <a>error</a> with <a>error code</a> <a>element not interactable</a>.

 <li><p>If <var>element</var>’s <a>container</a>
  is <a>obscured</a> by another <a>element</a>,
  return <a>error</a> with <a>error code</a> <a>element click intercepted</a>.

 <li><p>Matching on <var>element</var>:

  <dl class=switch>
   <dt><a><code>option</code> element</a>
   <dd>
     <ol>
       <li><p>Let <var>parent node</var> be the <var>element</var>’s <a>container</a>.

       <li><p><a>Fire</a> a <a>mouseOver event</a> at <var>parent node</var>.

       <li><p><a>Fire</a> a <a>mouseMove event</a> at <var>parent node</var>.

       <li><p><a>Fire</a> a <a>mouseDown event</a> at <var>parent node</var>.

       <li><p>Run the <a>focusing steps</a> on <var>parent node</var>.

       <li><p>If <var>element</var> is not <a>disabled</a>:

        <ol>
         <li><p><a>Fire</a> an <a><code>input</code></a> event at <var>parent node</var>.

         <li><p>Let <var>previous selectedness</var> be equal
          to <var>element</var> <a>selectedness</a>.

         <li><p>If <var>element</var>’s <a>container</a>
          has the <a><code>multiple</code> attribute</a>,
          toggle the <var>element</var>’s <a>selectedness</a> state
          by setting it to the opposite value of its current <a>selectedness</a>.

          <p>Otherwise,
           set the <var>element</var>’s <a>selectedness</a> state to true.

         <li><p>If <var>previous selectedness</var> is false,
          <a>fire</a> a <a><code>change</code></a> event
          at <var>parent node</var>.
        </ol>

       <li><p><a>Fire</a> a <a>mouseUp event</a> at <var>parent node</var>.

       <li><p><a>Fire</a> a <a>click event</a> at <var>parent node</var>.
     </ol>

   <dt>Otherwise
   <dd>
    <ol>
     <li><p>Let <var>mouse</var> be a new <a>pointer input source</a>.

     <li><p>Let <var ignore>click point</var> be
      the <var>element</var>’s <a>in-view center point</a>.

     <li><p>Let <var>pointer move action</var> be an <a>action object</a>
      with the <var>mouse</var>’s <code>id</code>, "<code>pointer</code>",
      and "<code>pointerMove</code>" as arguments.

     <li><p><a>Set a property</a> <code>x</code> to <code>0</code> on
      <var>pointer move action</var>.

     <li><p><a>Set a property</a> <code>y</code> to <code>0</code> on
      <var>pointer move action</var>.

     <li><p><a>Set a property</a> <code>origin</code>
      to <var>element</var> on <var>pointer move action</var>.

     <li><p>Let <var>pointer down action</var> be an <a>action object</a>
      with the <var>mouse</var>’s <code>id</code>, "<code>pointer</code>",
      and "<code>pointerDown</code>" as arguments.

     <li><p><a>Set a property</a> <code>button</code>  to <code>0</code>
      on <var>pointer down action</var>.

     <li><p>Let <var>pointer up action</var> be an <a>action object</a>
      with the <var>mouse</var>’s <code>id</code>, "<code>mouse</code>",
      and "<code>pointerUp</code>" as arguments.

     <li><p><a>Set a property</a> <code>button</code>
      to <code>0</code> on <var>pointer up action</var>.

     <li><p><a>Dispatch a pointerMove action</a> with
     arguments <var>mouse</var>’s <code><a>input
     id</a></code>, <var>pointer move action</var>,
     <var>mouse</var>’s <a>input source state</a>,
     and <code>0</code>.

     <li><p><a>Dispatch a pointerDown action</a> with
      arguments <var>mouse</var>’s
      <code><a>input id</a></code>, <var>pointer down action</var>,
      <var>mouse</var>’s <a>input source state</a>,
      and <code>0</code>.

     <li><p><a>Dispatch a pointerUp action</a> with
      arguments <var>mouse</var>’s
      <code><a>input id</a></code>, <var>pointer up action</var>,
      <var>mouse</var>’s <a>input source state</a>,
      and <code>0</code>.

     <li><p>Remove <var>mouse</var> from the
      <a>current session</a>’s <a>input state table</a>.

     <li><p>Remove <var>mouse</var> from the list of
      <a>active input sources</a>.
    </ol>
  </dl>

 <li><p>Wait until the user agent event loop has spun enough times to
  process the DOM events generated by the previous step.

 <li><p>Perform implementation-defined steps to allow
  any <a lt="navigation">navigations</a> triggered by the click
  to start.

  <p class="note">It is not always clear how long this will cause the
  algorithm to wait, and it is acknowledged that some implementations
  may have unavoidable race conditions. The intention is to allow a
  new attempt to <a>navigate</a> to begin so that the next step in the
  algorithm is meaningful. It is possible the click does not cause an
  attempt to <a>navigate</a>, in which case the implementation-defined
  steps can return immediately, and the next step will also return
  immediately.

 <li><p><a>Try</a> to <a>wait for navigation to complete</a>.

 <li><p><a>Try</a> to run the <a>post-navigation checks</a>.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /Element Click -->

<section>
<h4 id=element-clear><dfn>Element Clear</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/clear</td>
 </tr>
</table>

<p>To <dfn>clear a content editable element</dfn>:

<ol>
 <li><p>If <var>element</var>’s <a><code>innerHTML</code> IDL attribute</a>
  is an empty string do nothing and return.

 <li><p>Run the <a>focusing steps</a> for <var>element</var>.

 <li><p>Set <var>element</var>’s <a><code>innerHTML</code> IDL attribute</a>
  to an empty string.

 <li><p>Run the <a>unfocusing steps</a> for the <var>element</var>.
</ol>

<p>To <dfn>clear a resettable element</dfn>:

<ol>
 <li><p>Let <var>empty</var> be the result of the first matching condition:

  <dl class=switch>
   <dt><var>element</var> is an <a><code>input</code> element</a>
    whose <a><code>type</code> attribute</a> is in the <a>File Upload state</a>
   <dd>True if the list of <a>selected files</a> has a length of 0,
    and false otherwise.

   <dt>Otherwise
   <dd>True if its <a>value</a> IDL attribute is an empty string,
    and false otherwise.
  </dl>

 <li><p>If <var>element</var> is a <a>candidate for constraint validation</a>
  it <a>satisfies its constraints</a>,
  and <var>empty</var> is true,
  abort these substeps.

 <li><p>Invoke the <a>focusing steps</a> for <var>element</var>.

 <li><p>Invoke the <a>clear algorithm</a> for <var>element</var>.

 <li><p>Invoke the <a>unfocusing steps</a> for the <var>element</var>.
</ol>

<p>The <a>remote end steps</a> for <a>Element Clear</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>element</var> be the result
  of <a>trying</a> to <a>get a known connected element</a>
  with argument <var>element id</var>.

 <li><p>If <var>element</var> is not <a>editable</a>,
  return an <a>error</a> with <a>error code</a> <a>invalid element state</a>.

 <li><p><a>Scroll into view</a> the <var>element</var>.

 <li><p>Wait in an implementation-specific way
  up to the <a>session implicit wait timeout</a>
  for <var>element</var> to become <a>interactable</a>.

 <li><p>If <var>element</var> is not <a>interactable</a>,
  return <a>error</a> with <a>error code</a> <a>element not interactable</a>.

 <li><p>Run the substeps of the first matching statement:

  <dl class=switch>
   <dt><var>element</var> is a <a>mutable form control element</a>
   <dd><p>Invoke the steps to <a>clear a resettable element</a>.

   <dt><var>element</var> is a <a>mutable element</a>
   <dd><p>Invoke the steps to <a>clear a content editable element</a>.

   <dt>Otherwise
   <dd><p>Return <a>error</a> with <a>error code</a> <a>invalid element state</a>.
  </dl>

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /Element Clear -->

<section>
<h4 id=element-send-keys><dfn>Element Send Keys</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/value</td>
 </tr>
</table>

<p class=note>
The <a>Element Send Keys</a> <a>command</a>
<a>scrolls into view</a> the form control <a>element</a>
and then sends the provided keys to the <a>element</a>.
In case the <a>element</a> is not <a>keyboard-interactable</a>,
an <a>element not interactable</a> <a>error</a> is returned.

<p>
A <dfn>non-typeable form control</dfn>
is an <a><code>input</code> element</a>
whose <a><code>type</code> attribute</a> state
causes the primary input mechanism
not to be through means of a keyboard, whether virtual or physical.

<div class=example>
<p>
<a>Non-typeable form controls</a> means to refer to
form control elements rendered by the user agent
as something other than as a text input control.
When targetting an <a><code>input</code> element</a>
in the <a><code>color</code> state</a>
being presented as a color wheel,
<a lt="Element Send Keys">interaction</a> with it will be simulated,
rather than typed using key emulation with <a href=#actions>actions</a>.

<p>
Other examples of <a>non-typeable form controls</a> include
form controls interacted with via system-native widgets,
such as a scrolled option list for <a><code>select</code> elements</a>
and a number keypad for <a><code>input</code> elements</a>
in the <a><code>number</code> state</a> on non-desktop devices.
</div>

<p>The <a>key input state</a> used for input
 may be cleared mid-way through “typing”
 by sending the <dfn>null key</dfn>,
 which is U+E000 (NULL).

<p>When required to <dfn>clear the modifier key state</dfn> with an
 argument of <var>undo actions</var> and <var>keyboard</var>
 a <a>remote end</a> must run the following steps:

<ol>
 <li><p>If <var>keyboard</var> is not a <a>key input source</a>
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>For each <var>entry key</var>
  in the lexically sorted keys of <var>undo actions</var>:

  <ol>
   <li><p>Let <var>action</var> be the value of <var>undo actions</var>
    equal to the key <var>entry key</var>.

   <li><p>If <var>action</var> is not an <a>action object</a>
    of <code>type</code> "<code>key</code>"
    and <code>subtype</code> "<code>keyUp</code>",
    return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

   <li><p><a>Dispatch a keyUp action</a> with arguments
    <var>action</var> and <var>keyboard</var>’s <a>key input state</a>.
  </ol>
</ol>

<p>An <a>extended grapheme cluster</a> is <dfn>typeable</dfn>
 if it consists of a single <a>unicode code point</a>
 and the <a>code</a> is not <a>undefined</a>.

<p>The <dfn>shifted state</dfn> for <var>keyboard</var>
 is the value of <var>keyboard</var>’s
 <a>key input state</a>’s <code>shift</code> property.

<p>In order to <dfn>dispatch the events for a typeable string</dfn>
with arguments <var>text</var> and <var>keyboard</var>, a <a>remote
end</a> must for each <var>char</var> corresponding to an indexed
property in <var>text</var>:

<ol>

<li><p>
If <var>char</var> is a <a>shifted character</a>
and the <a>shifted state</a> of <var>keyboard</var> is false,
create a new <a>action object</a> with <var>keyboard</var>’s <code>id</code>,
"<code>key</code>", and "<code>keyDown</code>",
and set its <code>value</code> property to U+E008 ("left shift").
<a>Dispatch a keyDown action</a> with this <a>action object</a>
and <var>keyboard</var>’s <a>key input state</a>.

<li><p>
If <var>char</var> is not a <a>shifted character</a>
and the <a>shifted state</a> of <var>keyboard</var> is true,
create a new <a>action object</a> with <var>keyboard</var>’s <code>id</code>,
"<code>key"</code>", and "<code>keyUp</code>",
and set its <code>value</code> property to U+E008 ("left shift").
<a>Dispatch a keyUp action</a> with this <a>action object</a>
and <var>keyboard</var>’s <a>key input state</a>.

<li><p>
Let <var>keydown action</var> be a new <a>action object</a>
constructed with arguments <var>keyboard</var>’s
<code>id</code>, "<code>key</code>", and "<code>keyDown</code>".

<li><p>
Set the <code>value</code> property of <var>keydown action</var> to <var>char</var>.

<li><p>
<a>Dispatch a keyDown action</a> with arguments
<var>keydown action</var> and <var>keyboard</var>’s <a>key input state</a>.

<li><p>
Let <var>keyup action</var> be a copy of <var>keydown action</var>
with the <code>subtype</code> property changed to "<code>keyUp</code>".

<li><p>
<a>Dispatch a keyUp action</a> with arguments
<var>keyup action</var> and <var>keyboard</var>’s <a>key input state</a>.

</ol>

<p>
When required to <dfn>dispatch a composition event</dfn>
with arguments <var>type</var> and <var>cluster</var>,
the <a>remote end</a> must <a>perform implementation-specific action dispatch steps</a>
equivalent to sending composition events
in accordance with the requirements of [[UI-EVENTS]],
and producing the following event with the specified properties.

<ul>
 <li><a href=https://www.w3.org/TR/uievents/#events-compositionevents><code>composition event</code></a> with properties:
  <table class=simple>
   <tr>
    <th>Attribute</th>
    <th>Value</th>
   </tr>
   <tr>
    <td><code>type</code></td>
    <td><var>type</var></td>
   </tr>
   <tr>
    <td><code>data</code></td>
    <td><var>cluster</var></td>
   </tr>
 </table>
</ul>

<p>
When required to <dfn>dispatch actions for a string</dfn>
with arguments <var>text</var> and <var>keyboard</var>,
a <a>remote end</a> must run the following steps:

<ol>

<li><p>
Let <var>clusters</var> be an array created by
<a>breaking <var>text</var> into extended grapheme clusters</a>.

<li><p>
Let <var>undo actions</var> be an empty dictionary.

<li><p>
Let <var>current typeable text</var> be an empty string.

<li><p>
For each <var>cluster</var> corresponding to an indexed property in <var>clusters</var>
run the substeps of the first matching statement:

<dl class=switch>
<dt><var>cluster</var> is the <a>null key</a>
<dd><ol>
<li><p>
<a>Dispatch the events for a typeable string</a>
with arguments <var>current typeable text</var> and <var>keyboard</var>.
Reset <var>current typeable text</var> to an empty string.

<li><p>
<a>Clear the modifier key state</a> with arguments
being <var>undo actions</var> and <var>keyboard</var>.

<li><p>
If the previous step results in an <a>error</a>, return that <a>error</a>.

<li><p>
Reset <var>undo actions</var> to be an empty dictionary.
</ol>

<dt><var>cluster</var> is a <a>modifier key</a>
<dd><ol>
<li><p>
<a>Dispatch the events for a typeable string</a>
with arguments <var>current typeable text</var> and <var>keyboard</var>.
Reset <var>current typeable text</var> to an empty string.

<li><p>
Let <var>keydown action</var> be an <a>action object</a>
constructed with arguments <var>keyboard</var>’s ID,
"<code>key</code>",
and "<code>keyDown</code>".

<li><p>
Set the <code>value</code> property of <var>keydown action</var> to <var>cluster</var>.

<li><p>
<a>Dispatch a keyDown action</a> with arguments
<var>keydown action</var> and <var>keyboard</var>’s <a>key input state</a>.

<li><p>
Add an entry to <var>undo actions</var> with key <var>cluster</var>
and value being a copy of <var>keydown action</var>
with the <code>subtype</code> modified to "<code>keyUp</code>".
</ol>

<dt><var>cluster</var> is <a>typeable</a>
<dd><p>
Append <var>cluster</var> to <var>current typeable text</var>.

<dt>Otherwise

<dd><ol>
<li><p>
<a>Dispatch the events for a typeable string</a> with arguments
<var>current typeable text</var> and <var>keyboard</var>.
Reset <var>current typeable text</var> to an empty string.

<li><p>
<a>Dispatch a <code>composition event</code></a> with arguments
"<code>compositionstart</code>" and <a>undefined</a>.

<li><p>
<a>Dispatch a <code>composition event</code></a> with arguments
"<code>compositionupdate</code>" and <var>cluster</var>.

<li><p>
<a>Dispatch a <code>composition event</code></a> with arguments
"<code>compositionend</code>" and <var>cluster</var>.
</ol>
</dl>

<li><p>
<a>Dispatch the events for a typeable string</a> with arguments
<var>current typeable text</var> and <var>keyboard</var>.

<li><p>
<a>Clear the modifier key state</a> with arguments
<var>undo actions</var> and <var>keyboard</var>.
If an <a>error</a> is returned, return that <a>error</a>
</ol> <!-- /create actions from a string -->

<p>The <a>remote end steps</a> for <a>Element Send Keys</a> are:

<ol>
 <li><p>Let <var>text</var> be the result
  of <a>getting a property</a> called "<code>text</code>"
  from the <var>parameters</var> argument.

 <li><p>If <var>text</var> is not a <a>String</a>,
  return an <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a>, and return its value if it is an <a>error</a>.

 <li><p>Let <var>element</var> be the result
  of <a>trying</a> to <a>get a known connected element</a>
  with <a>url variable</a> <var>element id</var>.

 <li><p>Let <var>file</var> be true if <var>element</var> is
   <a><code>input</code> element</a> in the <a>file upload state</a>, or false
   otherwise.

 <li><p>If <var>file</var> is false or the <a>current session</a>’s
  <a>strict file interactability</a>, is true run the following substeps:
  <ol>
   <li><p><a>Scroll into view</a> the <var>element</var>.

   <li><p>Wait in an implementation-specific way up to the <a>session
    implicit wait timeout</a> for <var>element</var> to
    become <a>keyboard-interactable</a>.

   <li><p>If <var>element</var> is not <a>keyboard-interactable</a>,
    return <a>error</a> with <a>error code</a> <a>element not interactable</a>.

   <li><p>If <var>element</var> is not the <a>active element</a> run
    the <a>focusing steps</a> for the <var>element</var>.
  </ol>

 <li><p>Run the substeps of the first matching condition:
  <dl class="switch">
   <dt><var>file</var> is true
   <dd>
    <ol>
     <li><p>Let <var>files</var> be the result of splitting <var>text</var>
      on the newline (<code>\n</code>) character.

     <li><p>If <var>files</var> is of 0 length,
      return an <a>error</a> with <a>error code</a> <a>invalid argument</a>.

     <li><p>Let <var>multiple</var> equal the result
      of calling <code><a>hasAttribute</a>("multiple")</code>
      on <var>element</var>.

     <li><p>if <var>multiple</var> is <code>false</code> and the
      length of <var>files</var> is not equal to 1,
      return an <a>error</a> with <a>error code</a> <a>invalid argument</a>.

     <li><p>Verify that each file given by the user exists.
      If any do not, return <a>error</a>
      with <a>error code</a> <a>invalid argument</a>.

     <li><p>Complete implementation specific steps
      equivalent to setting the <a>selected files</a>
      on the <a><code>input</code></a>.
      If <var>multiple</var> is <code>true</code>
      <var>files</var> are be appended to <var>element</var>’s <a>selected files</a>.

     <li><p><a>Fire</a> these events in order on <var>element</var>:
      <ol>
       <li><a><code>input</code></a>
       <li><a><code>change</code></a>
      </ol>

     <li><p>Return <a>success</a> with data <a><code>null</code></a>.
    </ol>
   </dd>

   <dt><var><a>element</a></var> is a <a>non-typeable form control</a>
   <dd>
    <ol>
     <li><p>If <var>element</var> does not have an <a>own property</a>
      named <code>value</code> return an <a>error</a> with <a>error
      code</a> <a>element not interactable</a>

     <li><p>If <var>element</var> is not <a>mutable</a> return
      an <a>error</a> with <a>error code</a> <a>element not
      interactable</a>.

     <li><p><a>Set a property</a> <code>value</code> to <var>text</var>
      on <var>element</var>.

     <li><p>If <var>element</var> is <a>suffering from bad input</a>
      return an <a>error</a> with <a>error code</a> <a>invalid
      argument</a>.

     <li><p>Return <a>success</a> with data <a><code>null</code></a>.
    </ol>
   </dd>

   <dt><var><a>element</a></var> is <a>content editable</a>
    <dd>If <var><a>element</a></var> does not currently have focus,
      set the text insertion caret after any child content.
    <dt>Otherwise
    <dd>
     <ol>
       <li><p>If <var>element</var> does not currently have focus,
        let <var>current text length</var> be the
       <a>string length</a> of <var><a>element</a></var>’s <a>API value</a>.

      <li><p>Set the text insertion caret using <a>set selection range</a>
       using <var>current text length</var> for both the <code>start</code>
       and <code>end</code> parameters.
     </ol>
    </dd>
   </dl>

 <li><p>Let <var>keyboard</var> be a new <a>key input source</a>.

 <li><p><a>Dispatch actions for a string</a> with
  arguments <var>text</var> and <var>keyboard</var>.

 <li><p>Remove <var>keyboard</var> from the <a>current
  session</a>’s <a>input state table</a>

 <li><p>Remove <var>keyboard</var> from the list of
  <a>active input sources</a>.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /Element Send Keys -->
</section> <!-- /Interaction -->
</section> <!-- /Elements -->

<section>
<h2 id=document>Document</h2>

<section>
<h3 id=get-page-source><dfn>Get Page Source</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/source</td>
 </tr>
</table>

<p class=note>
The <a>Get Page Source</a> <a>command</a>
returns a string serialization of the DOM
of the <a>current browsing context</a> <a>active document</a>.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>source</var> be the result of invoking the
  <a>fragment serializing algorithm</a> on a fictional node whose only
  child is the <a>document element</a> providing <code>true</code> for the
  <code>require well-formed</code> flag. If this causes an exception
  to be thrown, let <var>source</var> be <a><code>null</code></a>.

 <li><p>Let <var>source</var> be the result of <a>serializing to string</a>
  the <a>current browsing context</a> <a>active document</a>,
  if <var>source</var> is <a><code>null</code></a>.

 <li><p>Return <a>success</a> with data <var>source</var>.
</ol>

</section> <!-- /Get Page Source -->

<section>
<h3 id=executing-script>Executing Script</h3>

<p>
A <dfn>collection</dfn> is an <a>Object</a>
that implements the <a>Iterable</a> interface,
and whose:

<ul>
<li><a>initial value</a> of the <code>toString</code> <a>own property</a> is "<code>Arguments</code>"
<li>instance of <a>Array</a>
<li>instance of <a><code>FileList</code></a>
<li>instance of <a><code>HTMLAllCollection</code></a>
<li>instance of <a><code>HTMLCollection</code></a>
<li>instance of <a><code>HTMLFormControlsCollection</code></a>
<li>instance of <a><code>HTMLOptionsCollection</code></a>
<li>instance of <a><code>NodeList</code></a>
</ul>

<p>
When required to <dfn>JSON deserialize</dfn>
with argument <var>value</var>
and optional argument <var>seen</var>,
a <a>remote end</a> must run the following steps:

<ol>
 <li><p>If <var>seen</var> is not provided,
  let <var>seen</var> be an empty <a>List</a>.

 <li><p>Jump to the first appropriate step below:

 <li><p>Matching on <var>value</var>:

  <dl class=switch>
   <dt><a>undefined</a>
   <dt><a><code>null</code></a>
   <dt>type <a>Boolean</a>
   <dt>type <a>Number</a>
   <dt>type <a>String</a>
   <dd><p>Return <a>success</a> with data <var>value</var>.

   <dt><a>Object</a> that <a>represents a web element</a>
   <dd><p>Return the <a lt="deserialize a web element">deserialized</a>
    <a>web element</a> of <var>value</var>.

   <dt>instance of <a>Array</a>
   <dt>instance of <a>Object</a>
   <dd><p>Return the result of running the <a>clone an object</a> algorithm
    with arguments <var>value</var> and <var>seen</var>,
    and the <a>JSON deserialize</a> algorithm as the clone algorithm.
  </dl>
</ol>

<p>To perform a <dfn>JSON clone</dfn>
 return the result of calling the <a>internal JSON clone algorithm</a>
 with arguments <var>value</var> and an empty <a>List</a>.

<p>When required to run the <dfn>internal JSON clone algorithm</dfn>
 with arguments <var>value</var> and <var>seen</var>,
 a <a>remote end</a> must return the value
 of the first matching statement, matching on <var>value</var>:

<dl class=switch>
 <dt><a>undefined</a>
 <dt><a><code>null</code></a>
 <dd><p><a>Success</a> with data <a><code>null</code></a>.

 <dt>type <a>Boolean</a>
 <dt>type <a>Number</a>
 <dt>type <a>String</a>
 <dd><p><a>Success</a> with data <var>value</var>.

 <dt>a <a>collection</a>
 <dd>
  <ol>
   <li><p>Let <var>result list</var> be an empty list.

   <li><p>For each <var>item</var> of <var>value</var>,
    add the result of <a>trying</a> to <a>clone an object</a>
    with arguments <var>item</var> and <var>seen</var>
    and the <a>internal JSON clone algorithm</a> as the <var>clone algorithm</var>
    to <var>result list</var>.

   <li><p>Return <a>success</a> with <var>result list</var>.
  </ol>

 <dt>instance of <a>element</a>
 <dd><p>If the <var>element</var> <a>is stale</a>,
  return <a>error</a> with <a>error code</a> <a>stale element reference</a>.

  <p>Otherwise return <a>success</a>
   with the <a lt="JSON serialization of an element">JSON serialization</a>
   of <var>value</var>.

 <dt>a <a><code>WindowProxy</code></a> object
 <dd><p>If the associated <a>browsing context</a>
  of the <a><code>WindowProxy</code></a> object
  in <var>value</var> has been <a>discarded</a>,
  return <a>error</a> with <a>error code</a> <a>stale element reference</a>.

  <p>Otherwise return <a>success</a>
   with the <a lt="JSON serialization of the WindowProxy object">JSON serialization</a>
   of <var>value</var>.

 <dt>has an <a>own property</a> named "<code>toJSON</code>" that is
  a <a>Function</a>
 <dd>Return <a>success</a> with the value returned by
  <a>Call</a>(<code>toJSON</code>).

 <dt>Otherwise</dt>
 <dd>
  <ol>
   <li><p>If <var>value</var> is in <var>seen</var>,
    return <a>error</a> with <a>error code</a> <a>javascript error</a>.

   <li><p>Append <var>value</var> to <var>seen</var>.

   <li><p>Let <var>result</var> be the value of running the
    <a>clone an object</a> algorithm with arguments <var>value</var> and
    <var>seen</var>, and the <a>internal JSON clone algorithm</a> as the
    <var>clone algorithm</var>.

   <li><p>Remove the last element of <var>seen</var>.

   <li><p>Return <var>result</var>.
  </ol>
</dl>

<p>To <dfn>clone an object</dfn>,
 taking the arguments <var>value</var>,
 <var>seen</var>,
 and <var>clone algorithm</var>:

<ol>
 <li><p>Let <var>result</var> be the value of the first matching statement,
  matching on <var>value</var>:

  <dl class=switch>
   <dt>a <a>collection</a>
   <dd><p>A new <a>Array</a>
    which <code>length</code> property is equal
    to the result of <a>getting the property</a> <code>length</code>
    of <var>value</var>.

   <dt>Otherwise
   <dd><p>A new <a>Object</a>.
  </dl>

 <li><p>For each enumerable <a>own property</a>
  in <var>value</var>, run the following substeps:

  <ol>
   <li><p>Let <var>name</var> be the name of the property.

   <li><p>Let <var>source property value</var> be the result of
    <a>getting a property</a> named <var>name</var> from <var>value</var>.
    If doing so causes script to be run and that script throws an error,
    return <a>error</a> with <a>error code</a> <a>javascript error</a>.

   <li><p>Let <var>cloned property result</var> be the result of
    calling the <var>clone algorithm</var> with arguments
    <var>source property value</var> and <var>seen</var>.

   <li><p>If <var>cloned property result</var> is a <a>success</a>,
    <a>set a property</a> of <var>result</var> with
    name <var>name</var> and value equal to <var>cloned property result</var>’s data.

   <li><p>Otherwise, return <var>cloned property result</var>.
  </ol>
</ol>

<p>When required to <dfn>extract the script arguments from a
 request</dfn> with argument <var>parameters</var> the implementation must:

<ol>
 <li><p>Let <var>script</var> be the result of
  <a>getting a property</a> named <code>script</code>
  from the <var>parameters</var>.

 <li><p>If <var>script</var> is not a <a>String</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>args</var> be the result of
  <a>getting a property</a> named <code>args</code>
  from the <var>parameters</var>.

 <li><p>If <var>args</var> is not an <a>Array</a> return <a>error</a>
  with <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>arguments</var> be the result of calling the
  <a>JSON deserialize</a> algorithm with arguments <var>args</var>.

 <li><p>Return <a>success</a> with data <var>script</var>
  and <var>arguments</var>.
</ol>

<p>The rules to <dfn>execute a function body</dfn> are as follows.
 The algorithm returns <a lt="completion">an ECMASCript completion record</a>.

<p>If at any point during the algorithm a <a>user prompt</a> appears,
 abort all subsequent substeps of this algorithm, and return
 <a>Completion</a> { \[[Type]]: <code>normal</code>, \[[Value]]: <a><code>null</code></a>, \[[Target]]: <code>empty</code> }.

<ol>
 <li><p>Let <var>window</var> be the <a>associated window</a>
  of the <a>current browsing context</a>’s <a>active document</a>.

 <li><p>Let <var>environment settings</var> be
  the <a>environment settings object</a> for <var>window</var>.

 <li>Let <var>global scope</var> be
  <var>environment settings</var> <a>realm</a>’s
  <a>global environment</a>.

 <li><p>If <var>body</var> is not parsable as a <a>FunctionBody</a>
  or if parsing detects an <a>early error</a>,
  return
  <a>Completion</a> { \[[Type]]: <code>normal</code>, \[[Value]]: <a><code>null</code></a>, \[[Target]]: <code>empty</code> }.

 <li><p>If <var>body</var> begins with a <a>directive prologue</a>
  that contains a <a>use strict directive</a>
  then let <var>strict</var> be true,
  otherwise let <var>strict</var> be false.

 <li><p><a>Prepare to run a script</a> with <var>environment settings</var>.

 <li><p><a>Prepare to run a callback</a> with <var>environment settings</var>.

 <li><p>Let <var>function</var> be the result of
  calling <a>FunctionCreate</a>, with arguments:

  <dl>
   <dt><var ignore>kind</var>
   <dd>Normal.

   <dt><var ignore>list</var>
   <dd>An empty <a>List</a>.

   <dt><var ignore>body</var>
   <dd>The result of parsing <var>body</var> above.

   <dt><var ignore>global scope</var>
   <dd>The result of parsing <var>global scope</var> above.

   <dt><var ignore>strict</var>
   <dd>The result of parsing <var>strict</var> above.
  </dl>

 <li><p>Let <var>completion</var> be
  <a>Call</a>(<var>function</var>,
  <var>window</var>,
  <var>parameters</var>).

 <li><p><a>Clean up after running a callback</a>
  with <var>environment settings</var>.

 <li><p><a>Clean up after running a script</a>
  with <var>environment settings</var>.

 <li><p>Return <var>completion</var>.
</ol>

<p class="note">The above algorithm is not associated
 with any particular element,
 and is therefore not subject to the document CSP <a>directives</a>.

<section>
<h4 id=execute-script><dfn>Execute Script</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/execute/sync</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>Let <var>body</var> and <var>arguments</var> be the result of
  <a>trying</a> to <a>extract the script arguments from a request</a>
  with argument <var>parameters</var>.

 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a>, and return its value if it is an <a>error</a>.

 <li><p>Let <var>promise</var> be <a>a new Promise</a>.

 <li><p>Run the following substeps <a>in parallel</a>:
   <ol>
     <li><p>Let <var>scriptPromise</var> be the result of <a>promise-calling</a>
        <a>execute a function body</a>, with arguments
        <var>body</var> and <var>arguments</var>.

    <li><p>Upon fulfillment of <var>scriptPromise</var> with value <var>v</var>,
      <a>resolve</a> <var>promise</var> with value <var>v</var>.

    <li><p>Upon rejection of <var>scriptPromise</var> with value <var>r</var>,
      <a>reject</a> <var>promise</var> with value <var>r</var>.
   </ol>

  <li><p>If <var>promise</var> is still pending and
    the <a>session script timeout</a> is reached,
    return <a>error</a> with <a>error code</a> <a lt="script timeout error">script timeout</a>.

  <li><p>Upon fulfillment of <var>promise</var> with value <var>v</var>,
      let <var>result</var> be a <a>JSON clone</a> of <var>v</var>, and
      return <a>success</a> with data <var>result</var>.

  <li><p>Upon rejection of <var>promise</var> with reason <var>r</var>,
      let <var>result</var> be a <a>JSON clone</a> of <var>r</var>, and
      return <a>error</a> with <a>error code</a> <a>javascript error</a>
      and data <var>result</var>.
</ol>
</section> <!-- /Execute Script -->

<section>
<h4 id=execute-async-script><dfn>Execute Async Script</dfn></h4>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/execute/async</td>
 </tr>
</table>

<p class=note>
The <a>Execute Async Script</a> <a>command</a>
causes JavaScript to execute as an anonymous function.
An additional value is provided as the final argument to the function.
This is a function that may be invoked to signal the completion of the asynchronous operation.
The first argument provided to the function will be serialized to JSON and returned by <a>Execute Async Script</a>.

<p>The <a>remote end steps</a> are:

<ol>
  <li><p>Let <var>body</var> and <var>arguments</var> by the result of <a>trying</a> to
     <a>extract the script arguments from a request</a> with
     argument <var>parameters</var>.

  <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
   return <a>error</a> with <a>error code</a> <a>no such window</a>.

   <li><p><a>Handle any user prompts</a>, and return its value if it is an <a>error</a>.

  <li><p>Let <var>promise</var> be <a>a new Promise</a>.

  <li><p>Run the following substeps <a>in parallel</a>:
  <ol>
    <li><p>Let <var>resolvingFunctions</var> be <a>CreateResolvingFunctions</a>(<var>promise</var>).

    <li><p>Append <var>resolvingFunctions</var><code>.\[[Resolve]]</code> to
      <var>arguments</var>.

    <li><p>Let <var>result</var> be the result of calling
      <a>execute a function body</a>, with arguments
      <var>body</var> and <var>arguments</var>.

    <li><p>If <var>scriptResult</var>.\[[Type]] is not <code>normal</code>, then <a>reject</a>
      <var>promise</var> with value <var>scriptResult</var>.\[[Value]], and abort these steps.

      <p class=note>Prior revisions of this specification did not recognize the
        return value of the provided script. In order to preserve legacy behavior,
        the return value only influences the command if it is a "thenable" object or
        if determining this produces an exception.

    <li><p>If <a lt="ecmascript type">Type</a>(<var>scriptResult</var>.\[[Value]])
      is not <a>Object</a>, then abort these steps.

    <li><p>Let <var>then</var> be <a>Get</a>(<var>scriptResult</var>.\[[Value]], "then").

    <li><p>If <var>then</var>.\[[Type]] is not <code>normal</code>, then <a>reject</a>
      <var>promise</var> with value <var>then</var>.\[[Value]], and abort these steps.

    <li><p>If <a>IsCallable</a>(<var>then</var>.\[[Type]]) is <code>false</code>,
      then abort these steps.

    <li><p>Let <var>scriptPromise</var> be <a>PromiseResolve</a>(<a>Promise</a>,
      <var>scriptResult</var>.\[[Value]]).

    <li><p>Upon fulfillment of <var>scriptPromise</var> with value <var>v</var>,
      <a>resolve</a> <var>promise</var> with value <var>v</var>.

    <li><p>Upon rejection of <var>scriptPromise</var> with value <var>r</var>,
      <a>reject</a> <var>promise</var> with value <var>r</var>.
  </ol>

  <li><p>If <var>promise</var> is still pending and
   <a>session script timeout</a> milliseconds is reached,
   return <a>error</a> with <a>error code</a> <a lt="script timeout error">script timeout</a>.

  <li><p>Upon fulfillment of <var>promise</var> with value <var>v</var>,
      let <var>result</var> be a <a>JSON clone</a> of <var>v</var>, and
      return <a>success</a> with data <var>result</var>.

  <li><p>Upon rejection of <var>promise</var> with reason <var>r</var>,
      let <var>result</var> be a <a>JSON clone</a> of <var>r</var>, and
      return <a>error</a> with <a>error code</a> <a>javascript error</a>
      and data <var>result</var>.
</ol>
</section> <!-- /Execute Async Script -->
</section> <!-- /Executing Script -->
</section> <!-- /Document -->


<section>
<h2 id=cookies>Cookies</h2>

<p>This section describes the interaction with <a>cookies</a>
 as described in [[RFC6265]].

<p>A <a>cookie</a> is described in [[RFC6265]]
 by a name-value pair holding the cookie’s data,
 followed by zero or more attribute-value pairs describing its characteristics.

<p>The following <dfn>table for cookie conversion</dfn>
 defines the cookie concepts relevant to WebDriver,
 how these are referred to in [[RFC6265]],
 what keys they map to in a <a>serialized cookie</a>,
 as well as the attribute-value keys needed
 when constructing a list of arguments for <a>creating a cookie</a>.

<p>For informational purposes,
 the table includes a legend of whether the field is optional
 in the <a>serialized cookie</a> provided to <a>Add Cookie</a>,
 and a brief non-normative description of the field
 and the expected input type of its associated value.

<table class=simple>
 <tr>
  <th>Concept
  <th>RFC 6265 Field
  <th>JSON Key
  <th>Attribute Key
  <th>Optional
  <th>Description
 </tr>

 <tr>
  <td><dfn>Cookie name</dfn>
  <td><code>name</code>
  <td>"<code>name</code>"
  <td>
  <td>
  <td>The name of the cookie.
 </tr>

 <tr>
  <td><dfn>Cookie value</dfn>
  <td><code>value</code>
  <td>"<code>value</code>"
  <td>
  <td>
  <td>The cookie value.
 </tr>

 <tr>
  <td><dfn>Cookie path</dfn>
  <td><code>path</code>
  <td>"<code>path</code>"
  <td>"<code>Path</code>"
  <td>✓
  <td>The cookie path.
   Defaults to "<code>/</code>"
   if omitted when <a>adding a cookie</a>.
 </tr>

 <tr>
  <td><dfn>Cookie domain</dfn>
  <td><code>domain</code>
  <td>"<code>domain</code>"
  <td>"<code>Domain</code>"
  <td>✓
  <td>The domain the cookie is visible to.
   Defaults to the <a>current browsing context</a>’s
   <a>active document</a>’s <a>URL</a> <a>domain</a>
   if omitted when <a>adding a cookie</a>.
 </tr>

 <tr>
  <td><dfn>Cookie secure only</dfn>
  <td><code>secure-only-flag</code>
  <td>"<code>secure</code>"
  <td>"<code>Secure</code>"
  <td>✓
  <td>Whether the cookie is a secure cookie.
   Defaults to false if omitted when <a>adding a cookie</a>.
 </tr>

 <tr>
  <td><dfn>Cookie HTTP only</dfn>
  <td><code>http-only-flag</code>
  <td>"<code>httpOnly</code>"
  <td>"<code>HttpOnly</code>"
  <td>✓
  <td>Whether the cookie is an HTTP only cookie.
   Defaults to false if omitted when <a>adding a cookie</a>.
 </tr>

 <tr>
  <td><dfn>Cookie expiry time</dfn>
  <td><code>expiry-time</code>
  <td>"<code>expiry</code>"
  <td>"<code>Max-Age</code>"
  <td>✓
  <td>When the cookie expires, specified in seconds since
   <a>Unix Epoch</a>.  Must not be set if omitted when
   <a>adding a cookie</a>.

 </tr>

 <tr>
  <td><dfn>Cookie same site</dfn>
  <td><code>samesite</code>
  <td>"<code>sameSite</code>"
  <td>"<code>SameSite</code>"
  <td>✓
  <td>Whether the cookie applies to a SameSite policy.
    Defaults to None if omitted when <a>adding a cookie</a>.
    Can be set to either <a><code>lax</code></a> or <a><code>strict</code></a>.
 </tr>
</table>

<p>A <dfn>serialized cookie</dfn> is a JSON <a>Object</a>
 where a <a>cookie</a>’s [[RFC6265]] fields
 listed in the <a>table for cookie conversion</a>
 are mapped using the <i>JSON Key</i>
 and the associated field’s value from the <a>cookie store</a>.
 The optional fields may be omitted.

<p>To get <dfn lt="associated cookies|all associated cookies">all associated cookies</dfn> to a <a>document</a>,
 the user agent must return the enumerated set of <a>cookies</a>
 that meet the requirements set out in the first step of the algorithm in [[RFC6265]] to
 <a>compute <code>cookie-string</code></a> for an ‘HTTP API’, from
 the <a>cookie store</a> of the
 given <a>document</a>’s <a>address</a>. The returned cookies must
 include <a lt="cookie HTTP only">HttpOnly cookies</a>.

<p>When the <a>remote end</a> is instructed
 to <dfn lt="creating a cookie|create a cookie">create a cookie</dfn>,
 this is synonymous to carrying out the steps described in [[RFC6265]]
 <a href=https://tools.ietf.org/html/rfc6265#section-5.3>section 5.3</a>,
 under <a>receiving a cookie</a>,
 except the user agent may not ignore the received cookie in its entirety
 (disregard step 1).

<p>To <dfn>delete cookies</dfn> given an optional filter argument
 <var>name</var> that is a string:

<ol>
 <li><p>For each <a>cookie</a> among <a>all associated cookies</a> of
  the <a>current browsing context</a>’s <a>active document</a>,
  run the substeps of the first matching condition:

  <dl class=switch>
   <dt><var>name</var> is <a>undefined</a>
   <dt><var>name</var> is equal to <a>cookie name</a>
   <dd><p>Set the <a>cookie expiry time</a>
    to a <a>Unix timestamp</a> in the past.

   <dt>Otherwise
   <dd>Do nothing.
  </dl>
</ol>

<section>
<h3 id=get-all-cookies><dfn>Get All Cookies</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/cookie</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a>, and return its value if it is an <a>error</a>.

 <li><p>Let <var>cookies</var> be a new JSON <a>List</a>.

 <li><p>For each <var>cookie</var> in <a>all associated cookies</a> of
  the <a>current browsing context</a>’s <a>active document</a>:

  <ol>
   <li><p>Let <var>serialized cookie</var> be the result
     of <a lt="serialized cookie">serializing</a> <var>cookie</var>.

   <li><p>Append <var>serialized cookie</var> to <var>cookies</var>
  </ol>

 <li><p>Return <a>success</a> with data <var>cookies</var>.
</ol>
</section> <!-- /Get All Cookies -->

<section>
<h3 id=get-named-cookie><dfn>Get Named Cookie</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/cookie/{<var>name</var>}</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a>, and return its value if it is an <a>error</a>.

 <li><p>If the <a>url variable</a> <var>name</var>
  is equal to a <a>cookie</a>’s <a>cookie name</a>
  amongst <a>all associated cookies</a>
  of the <a>current browsing context</a>’s <a>active document</a>,
  return <a>success</a> with the <a>serialized cookie</a> as data.

  <p>Otherwise, return <a>error</a>
   with <a>error code</a> <a>no such cookie</a>.
</ol>
</section> <!-- /Get Named Cookie -->

<section>
<h3 id=add-cookie><dfn lt="adding a cookie|add cookie">Add Cookie</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/cookie</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>Let <var>data</var> be the result of <a>getting a property</a>
  named <code>cookie</code> from the <var>parameters</var> argument.

 <li><p>If <var>data</var> is not a JSON <a>Object</a>
  with all the required (non-optional) JSON keys
  listed in the <a>table for cookie conversion</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a>, and return its value if it is an <a>error</a>.

 <li><p>If the <a>current browsing context</a>’s <a>document element</a>
  is a <a>cookie-averse <code>Document</code> object</a>,
  return <a>error</a> with <a>error code</a> <a>invalid cookie domain</a>.

 <li><p>If <a>cookie name</a> or <a>cookie value</a> is <a><code>null</code></a>,
  <a>cookie domain</a> is not equal to
  the <a>current browsing context</a>’s <a>active document</a>’s <a>domain</a>,
  <a>cookie secure only</a> or <a>cookie HTTP only</a> are not boolean types,
  or <a>cookie expiry time</a> is not an integer type,
  or it less than 0 or greater than the <a>maximum safe integer</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p><a>Create a cookie</a> in
  the <a>cookie store</a> associated with
  the <a>active document</a>’s <a>address</a>
  using <a>cookie name</a> <var>name</var>,
  <a>cookie value</a> <var>value</var>,
  and an attribute-value list of the following cookie concepts
  listed in the <a>table for cookie conversion</a>
  from <var>data</var>:

  <dl>
   <dt><a>Cookie path</a>
   <dd><p>The value if the entry exists, otherwise "<code>/</code>".

   <dt><a>Cookie domain</a>
   <dd><p>The value if the entry exists,
    otherwise the <a>current browsing context</a>’s
    <a>active document</a>’s <a>URL</a> <a>domain</a>.

   <dt><a>Cookie secure only</a>
   <dd><p>The value if the entry exists, otherwise false.

   <dt><a>Cookie HTTP only</a>
   <dd><p>The value if the entry exists, otherwise false.

   <dt><a>Cookie expiry time</a>
   <dd><p>The value if the entry exists, otherwise leave unset to
    indicate that this is a session cookie.

   <dt><a>Cookie same site</a>
   <dd><p>The value if the entry exists, otherwise leave unset to
    indicate that no same site policy is defined.
  </dl>

  <p>If there is an <a>error</a> during this step,
   return <a>error</a> with <a>error code</a> <a>unable to set cookie</a>.


 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /Add Cookie -->

<section>
<h3 id=delete-cookie><dfn>Delete Cookie</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>DELETE</td>
  <td>/session/{<var>session id</var>}/cookie/{<var>name</var>}</td>
  </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a>, and return its value if it is an <a>error</a>.

 <li><p><a>Delete cookies</a> using
  the <a>url variable</a> <var>name</var> parameter
  as the filter argument.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /Delete Cookie -->

<section>
<h3 id=delete-all-cookies><dfn>Delete All Cookies</dfn></h3>

<table class=simple>
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>DELETE</td>
  <td>/session/{<var>session id</var>}/cookie
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a>, and return its value if it is an <a>error</a>.

 <li><p><a>Delete cookies</a>, giving no filtering argument.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /Delete All Cookies -->
</section> <!-- /Cookies -->

<section>
<h2 id=actions><dfn>Actions</dfn></h2>

<p>The Actions API provides a low-level interface
 for providing virtualised device input to the web browser.
 Conceptually, the Actions commands divide time into a series of <a>ticks</a>.
 The <a>local end</a> sends a series of actions
 which correspond to the change in state, if any,
 of each input device during each <a>tick</a>.
 For example, pressing a key
 is represented by an action sequence
 consisting of a single key input device and two <a>ticks</a>,
 the first containing a <a>keyDown</a> action,
 and the second a <a>keyUp</a> action,
 whereas a pinch-zoom input is represented
 by an action sequence consisting of three <a>ticks</a>
 and two pointer input devices of type touch,
 each performing a sequence of actions <a>pointerDown</a>,
 followed by <a>pointerMove</a>, and then <a>pointerUp</a>.

<aside class="example">
 <p>Imagine we have two fingers acting on a touchscreen.
  One finger will press down on element1 at the same moment
  that another finger presses down on element2.
  Once these actions are done, the first finger
  will wait 5 seconds while the other finger moves to element3.
  Then both fingers release from the touchscreen.

 <p>When the <a>remote end</a> receives this,
  it will look at each <a>input source</a>’s action lists.
  It will dispatch the first action of each source together,
  then the second actions together, and lastly, the final actions together.

 <p>The diagram below displays when each action gets executed.
  "Source 1" is the first finger, and "source 2" is the second.

 <p><img src=graphics/note1actions.svg alt="">

 <p>There is no limit to the number of <a>input sources</a>,
  and there is no restriction regarding the length of each input’s action list.
  This means, there is no requirement that all action lists have to be the same length.
  It is possible for one <a>input source</a>’s action list
  may have more actions than another.

 <p>In this case, the action list for the first finger contains 2 actions
  (<a>pointerDown</a>, <a>pointerUp</a>),
  and the action list for the second finger contains 3
  (<a>pointerDown</a>, <a>pointerMove</a>, <a>pointerUp</a>).

 <p>And the execution of each action will be done as follows:

 <p><img src=graphics/note4actions.svg alt="">

 <p>Specific timing for the actions can also be expressed.
  The <a>pause</a> action can be used to either
  (a) indicate a specific amount of time an <a>input source</a> must wait,
  or (b) can be used to signify that the current <a>input source</a>
  must wait until all other actions in the <a>tick</a> are completed.
  For the former case, the current <a>tick</a> being executed
  must wait for the longest pause to complete.
  For example, in this diagram:

 <p><img src=graphics/note2actions.svg alt="">

 <p>The <a>remote end</a> will dispatch
  the <a>pointerDown</a> action in the first <a>tick</a>.
  In the second <a>tick</a>, since source 1 declares a <a>pause</a> of 5 seconds,
  the <a>remote end</a> will dispatch the <a>pointerUp</a> event for source 2,
  and will wait 5 seconds before moving on to executing the third <a>tick</a>.

 <p>In the event that one <a>tick</a> contains multiple <a>pause</a> durations,
  the <a>remote end</a> will wait the maximum duration
  before moving on to executing the next <a>tick</a>.

 <p>As noted before, <a>pause</a> can be used to signify inaction during a <a>tick</a>.
  If <code><a>pause</a></code> is declared without a time period,
  then the <a>input source</a> will not have any actions executed in the containing <a>tick</a>.
  As an example:

 <p><img src=graphics/note3actions.svg alt="">

 <p>During <a>tick</a> 2, source 1 will have its <a>pointerMove</a> action dispatched,
  while source 2 will do nothing.
</aside> <!-- /example -->

<section>
<h3 id=input-sources-0>Input sources</h3>

<p class=note>
The objects and properties defined in this section are spec-internal constructs
and do not correspond to ECMAScript objects.
For convenience the same terminology is used for their manipulation.

<p>An <dfn lt="input sources">input source</dfn> is a virtual device providing input events.
 Each <a>input source</a> has an associated <dfn>input id</dfn>,
 which is a string that identifies the particular device,
 and a <dfn>source type</dfn> which determines
 the kind of input the device can provide.
 As with real devices, virtual devices are stateful;
 this state is recorded in an <a>input source state</a> object
 associated with each <a>input source</a>.


<section>
<h4 id=input-sources>Sources</h4>

<p>A <dfn>null input source</dfn> is an <a>input source</a> that is
 not associated with a specific physical device. A <a>null input source</a>
 supports the following actions:

<table class=simple>
 <tr>
  <th>Action
  <th>Non-normative Description
 </tr>
 <tr>
  <td><dfn>pause</dfn></td>
  <td>Used with an integer argument to specify the duration of
   a <a>tick</a>, or as a placeholder to indicate that an <a>input
   source</a> does nothing during a particular <a>tick</a>.</td>
 </tr>
</table>

<p>A <dfn>key input source</dfn> is an <a>input source</a>
 that is associated with a keyboard-type device.
 A <a>key input source</a> supports the same <a>pause</a> action
 as a <a>null input source</a> plus the following actions:

 <table class=simple>
  <tr>
   <th>Action
   <th>Non-normative Description
  </tr>
  <tr>
   <td><dfn>keyDown</dfn></td>
   <td>Used to indicate that a particular key should be held down.</td>
  </tr>
  <tr>
   <td><dfn>keyUp</dfn></td>
   <td>Used to indicate that a depressed key should be released.</td>
  </tr>
 </table>

<p>A <dfn>pointer input source</dfn> is an <a>input source</a> that is
 associated with a pointer-type input device. Such an <a>input source</a> has
 an associated <dfn>pointer type</dfn> specifying exactly which kind
 of pointing device it is associated with. A <a>pointer input source</a>
 supports the same <a>pause</a> action as a <a>null input source</a>
 plus the following actions:

<table class=simple>
 <tr>
  <th>Action
  <th>Non-normative Description
 </tr>
 <tr>
  <td><dfn>pointerDown</dfn></td>
  <td>Used to indicate that a pointer should be depressed in some way
   e.g. by holding a button down (for a mouse) or by coming into
   contact with the active surface (for a touch or pen device).</td>
 </tr>
 <tr>
  <td><dfn>pointerUp</dfn></td>
  <td>Used to indicate that a pointer should be released in some way
   e.g. by releasing a mouse button or moving a pen or touch device
   away from the active surface.</td>
 </tr>
 <tr>
  <td><dfn>pointerMove</dfn></td>
  <td>Used to indicate a location on the screen that a pointer should
   move to, either in its active (pressed) or inactive state.</td>
 </tr>
 <tr>
  <td><dfn noexport>pointerCancel</dfn></td>
  <td>Used to cancel a pointer action.</td>
 </tr>
</table>

<p>Each <a>session</a> maintains a <a>list</a> of <dfn>active input
sources</dfn>. This list is initially empty. When an <a>input
source</a> is added to the list of <a>active input sources</a>, a
corresponding entry is made in the <a>input state table</a> where the
key is the <a>input source</a>’s <code>input id</code> and the value is
the <a>input source</a>’s <a>input source state</a>. When an
<a>input source</a> is removed from the list of <a>active input
sources</a>, the corresponding entry in the <a>input state table</a>
is also removed.

</section> <!-- /input-sources -->


<section>
<h4 id=input-source-state>State</h4>

<p>
<dfn>Input source state</dfn> is used as a generic term to
describe the state associated with each <a>input source</a>.

<p>The <dfn>corresponding <a>input source state</a> type</dfn>
 for a label <var ignore>action type</var> is given by the following table:

<table class=simple>
 <thead>
  <tr>
   <th><var ignore>Action type</var>
   <th>Input state
  </tr>
 </thead>

 <tr>
  <td>"<code>none</code>"
  <td><a>null input state</a>
 </tr>

 <tr>
  <td>"<code>key</code>"
  <td><a>key input state</a>
 </tr>

 <tr>
  <td>"<code>pointer</code>"
  <td><a>pointer input state</a>
 </tr>
</table>

<p>A <a>null input source</a>’s <a>input source state</a> is
 a <dfn>null input state</dfn>. This is always an empty object.

<p>A <a>key input source</a>’s <a>input source state</a> is a
 <dfn>key input state</dfn> object. This is an object with a
 property, <code>pressed</code>, which is a set of strings
 representing currently pressed keys and
 properties <code>alt</code>, <code>shift</code>, <code>ctrl</code>,
 and <code>meta</code>, which are <a>Boolean</a>s.

<p>When required to <dfn noexport>create a new key input state object</dfn>, an
 implementation must return a <a>key input state</a> object with
 the <code>pressed</code> property set to the empty set
 and <code>alt</code>, <code>shift</code>, <code>ctrl</code>,
 and <code>meta</code> all set to <code>false</code>.

<p>
A <a>pointer input source</a>’s <a>input source state</a>
is a <dfn>pointer input state</dfn> object.
This consists of a <code>subtype</code> property,
which has the possible values
"<code>mouse</code>",
"<code>pen</code>",
and "<code>touch</code>",
a <code>pressed</code> property which is a set of unsigned integers,
an <code>x</code> property which is an unsigned integer,
and a <code>y</code> property which is an unsigned integer.

<p>When required to <dfn noexport>create a new pointer input state</dfn> object
 with arguments <var>subtype</var> an implementation must return
 a <a>pointer input state</a> object with <code>subtype</code> set
 to <var>subtype</var>, <code>pressed</code> set to an empty set and
 both <code>x</code> and <code>y</code> set to <code>0</code>.

<p>Each <a>session</a> has an associated <dfn>input state table</dfn>.
 This is a map between <a>input id</a>
 and the <a>input source state</a> for that <a>input source</a>,
 with one entry for each item in the list of <a>active input sources</a>.

<p>Each <a>session</a> also has an associated <dfn>input cancel
 list</dfn>, which is a list of actions. This list is used to manage
 dispatching events when resetting the state of the <a>input
 source</a>s. For simplicity the algorithms described here only append
 actions to the list and rely on the fact that the reset operations
 are idempotent.

<p>The <dfn>calculated global key state</dfn> is the aggregated key
 state from all <a>key input state</a> objects. It can be calculated
 this way:

<ol>
 <li><p>Let <var>pressed</var> be a new Set.

 <li><p>Let <var>alt</var>, <var>ctrl</var>, <var>meta</var>,
  and <var>shift</var> be the <a>Boolean</a> <code>false</code> value.

 <li><p>For enumerable <a>own property</a> in the <a>input state table</a>:

 <ol>
  <li><p>Let <var>source</var> be the value of the property.

  <li><p>If <var>source</var> is not a <a>key input state</a>,
   continue to the first step of this loop.

  <li><p>Let <var>key state pressed</var> be the result of <a>getting
   a property</a> named <code>pressed</code> from <var>source</var>.

  <li><p>Add all strings from <var>key state pressed</var>
   to <var>pressed</var>.

  <li>Let <var>alt</var> be a logical OR of <var>alt</var> and the
   result of <a>getting a property</a> named <code>alt</code>
   from <var>source</var>.

  <li>Let <var>ctrl</var> be a logical OR of <var>ctrl</var> and the
   result of <a>getting a property</a> named <code>ctrl</code>
   from <var>source</var>.

  <li>Let <var>meta</var> be a logical OR of <var>meta</var> and the
   result of <a>getting a property</a> named <code>meta</code>
   from <var>source</var>.

  <li>Let <var>shift</var> be a logical OR of <var>shift</var> and the
   result of <a>getting a property</a> named <code>shift</code>
   from <var>source</var>.
 </ol>

 <li><p>Let <var>state</var> be a new JSON <a>Object</a>.

 <li><p><a>Set a property</a> on <var>state</var> with
  name <var>pressed</var> and value <var>pressed</var>.

 <li><p><a>Set a property</a> on <var>state</var> with
  name <var>alt</var> and value <var>alt</var>.

 <li><p><a>Set a property</a> on <var>state</var> with
  name <var>ctrl</var> and value <var>ctrl</var>.

 <li><p><a>Set a property</a> on <var>state</var> with
  name <var>meta</var> and value <var>meta</var>.

 <li><p><a>Set a property</a> on <var>state</var> with
  name <var>shift</var> and value <var>shift</var>.

 <li><p>Return <var>state</var>.
</ol>

</section> <!-- /input-source-state -->
</section> <!-- /Input-sources -->


<section>
<h3 id=ticks>Ticks</h3>

<p>A <dfn lt="ticks">tick</dfn> is the basic unit of time over
 which actions can be performed. During a <a>tick</a>, each <a>input source</a> has
 an assigned action — possibly a noop <a>pause</a> action — which may
 result in changes to the user agent internal state and eventually
 cause DOM events to be <a>fired</a> at the page. The next <a>tick</a> begins
 after the user agent has had a chance to process all DOM events
 generated in the current <a>tick</a>.

<p><dfn lt="asynchronously wait|asynchronous waits">Waiting
 asynchronously</dfn> means waiting for something to occur whilst
 allowing the browser to continue processing
 the <a href="https://html.spec.whatwg.org/#event-loop">event
 loop</a>.

<p>At the lowest level, the behavior of actions is intended to mimic
 the <a>remote end</a>’s behavior with an actual input device as
 closely as possible, and the implementation strategy may involve
 e.g. injecting synthesized events into a browser event
 loop. Therefore the steps to dispatch an action will inevitably end
 up in implementation-specific territory. However there are certain
 content observable effects that must be consistent across
 implementations. To accommodate this, the specification requires
 that <a>remote ends</a> <dfn>perform implementation-specific action dispatch
 steps</dfn>, along with a list of events and their properties. This
 list is not comprehensive; in particular the default action of the
 <a>input source</a> may cause additional events to be generated depending on
 the implementation and the state of the browser (e.g. input events
 relating to key actions when the focus is on an
 editable <a>element</a>, scroll events, etc.).

 <!-- todo: define generating DOM events from an input somewhere -->

<aside class=note>
<p>
An <a>activation trigger</a> generated by WebDriver
needs to be indistinguishable from those generated by a real user interacting with the browser.
In particular, the dispatched events
will have the <a><code>isTrusted</code></a> attribute set to true.

<p>
The most robust way to despatch these events
is by creating them in the browser implementation itself.
Sending operating system specific input messages to the browser’s window
has the disadvantage that the browser being automated
may not be properly isolated from a user
accidentally modifying <a>input source state</a>.
Use of an operating system level accessibility API
has the disadvantage that the browser’s window must be focused,
and as a result, multiple WebDriver instances cannot run in parallel.

<p>
The advantage of an operating system level accessibility API
is that it guarantees that inputs correctly mirror user input,
and allows interaction with the host system if necessary.
This might, however, have performance penalties
from a machine utilisation perspective.
</aside>
</section> <!-- /Ticks -->


<section>
<h3 id=processing-actions>Processing actions</h3>

<p>The algorithm for <a lt="extract an action sequence">
 extracting an action sequence from a request</a> takes the
 JSON <a>Object</a> representing an action sequence, validates the
 input, and returns a data structure that is the transpose of the
 input JSON, such that the actions to be performed in a single <a>tick</a>
 are grouped together.

<p>When required to <dfn>extract an action sequence</dfn> with
 argument <var>parameters</var>, a <a>remote end</a> must run the
 following steps:

<ol>
 <li><p>Let <var>actions</var> be the result
  of <a>getting a property</a> from <var>parameters</var>
  named <code>actions</code>.

 <li><p>If <var>actions</var> is <a>undefined</a>
  or is not an <a>Array</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <!-- TODO: not sure if reusing the ES definition of List works here-->
 <li><p>Let <var>actions by tick</var> be an empty <a>List</a>.</li>

 <li><p>For each value <var>action sequence</var>
  corresponding to an indexed property in <var>actions</var>:

  <ol>
   <li><p>Let <var>input source actions</var> be the result
    of <a>trying</a> to <a>process an input source action sequence</a>
    with argument <var>action sequence</var>.

   <li><p>For each <var>action</var> in <var>input source actions</var>:

    <ol>
     <li><p>Let <var>i</var> be the zero-based index
      of <var>action</var> in <var>input source actions</var>.

     <li><p>If the length of <var>actions by tick</var> is less
      than <var>i</var> + 1, append a new <a>List</a> to
      <var>actions by tick</var>.</li>

     <li><p>Append <var>action</var> to the <a>List</a> at
      index <var>i</var> in <var>actions by tick</var>.</li>

    </ol>
  </ol>

 <li><p>Return <a>success</a> with data
  <var>actions by tick</var>.
</ol>

<p>When required to <dfn>process an input source action sequence</dfn>,
 with argument <var>action sequence</var>, a <a>remote end</a>
 must run the following steps:

<ol>
 <li><p>Let <var>type</var> be the result of <a>getting a property</a>
  named <code>type</code> from <var>action sequence</var>.

 <li><p>If <var>type</var> is
  not "<code>key</code>", "<code>pointer</code>",
  or "<code>none</code>", return an <a>error</a> with
  <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>id</var> be the result of
  <a>getting the property</a> <code>id</code> from
  <var>action sequence</var>.

 <!-- TODO: consider picking the current input of the right
  type if one exists -->
 <li><p>If <var>id</var> is <a>undefined</a> or is not a <a>String</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>If <var>type</var> is equal to "<code>pointer</code>",
  let <var>parameters data</var> be the result
  of <a>getting the property</a> "<code>parameters</code>"
  from <var>action sequence</var>.
  Then let <var>parameters</var> be the result
  of <a>trying</a> to <a>process pointer parameters</a>
  with argument <var>parameters data</var>.

 <li><p>Let <var>source</var> be the <a>input source</a>
  in the list of <a>active input sources</a>
  where that <a>input source</a>’s <a>input id</a>
  is equal to <var>id</var>,
  or <a>undefined</a> if there is no matching <a>input source</a>.

 <li><p>If <var>source</var> is <a>undefined</a>:

  <ol>
   <li>Let <var>source</var> be a new <a>input source</a> created from
    the first match against <var>type</var>:

    <dl class=switch>
     <dt>"<code>none</code>"
     <dd>Create a new <a>null input source</a>.

     <dt>"<code>key</code>"
     <dd>Create a new <a>key input source</a>.

     <dt>"<code>pointer</code>"
     <dd>Create a new <a>pointer input source</a>. Let the
      new <a>input source</a>’s <a>pointer type</a> be set to the value
      of <var>parameters</var>’s <code>pointerType</code> property.
    </dl>

   <li><p>Add <var>source</var> to the <a>current session</a>’s list
    of <a>active input sources</a>.

   <li><p>Add <var>source</var>’s <a>input source state</a> to
    the <a>current session</a>’s <a>input state table</a>, keyed
    on <var>source</var>’s <a>input id</a>.
  </ol>

 <li><p>If <var>source</var>’s <a>source type</a> is not equal to
  <var>type</var> return an <a>error</a> with <a>error
  code</a> <a>invalid argument</a>.

 <li><p>If <var>parameters</var> is not <a>undefined</a>,
  then if its <code>pointerType</code> property is not equal to
  <var>source</var>’s <a>pointer type</a>,
  return an <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>action items</var> be the result of <a>getting a
  property</a> named <code>actions</code> from
  <var>action sequence</var>.

 <li><p>If <var>action items</var> is not an <a>Array</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>actions</var> be a new list.

 <li><p>For each <var>action item</var> in <var>action items</var>:

  <ol>
   <li><p>If <var>action item</var> is not an <a>Object</a>
    return <a>error</a> with <a>error code</a>
    <a>invalid argument</a>.

   <li><p>If <var>type</var> is "<code>none</code>"
    let <var>action</var> be the result of <a>trying</a> to <a>process
    a null action</a> with parameters <var>id</var>, and
    <var>action item</var>.

   <li><p>Otherwise, if <var>type</var> is "<code>key</code>"
    let <var>action</var> be the result of <a>trying</a> to <a>process
    a key action</a> with parameters <var>id</var>, and
    <var>action item</var>.

   <li><p>Otherwise, if <var>type</var> is "<code>pointer</code>"
    let <var>action</var> be the result of <a>trying</a> to <a>process
    a pointer action</a> with parameters <var>id</var>,
    <var>parameters</var>, and <var>action item</var>.

   <li><p>Append <var>action</var> to <var>actions</var>.
  </ol>

 <li><p>Return <a>success</a> with data <var>actions</var>.
</ol>

<p>The <dfn>default pointer parameters</dfn> consist of an object with
 property <code>pointerType</code> set to <code>mouse</code>.

<p>When required to <dfn>process pointer parameters</dfn> with
 argument <var>parameters data</var>, a <a>remote end</a> must perform
 the following steps:

<ol>
<li><p>
Let <var>parameters</var> be the <a>default pointer parameters</a>.

<li><p>
If <var>parameters data</var> is <a>undefined</a>,
return <a>success</a> with data <var>parameters</var>.

<li><p>
If <var>parameters data</var> is not an <a>Object</a>,
return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

<li><p>
Let <var>pointer type</var> be the result
of <a>getting a property</a> named <code>pointerType</code>
from <var>parameters data</var>.

<li><p>
If <var>pointer type</var> is not <a>undefined</a>:

  <ol>
  <li><p>
  If <var>pointer type</var> does not have one of the values
  "<code>mouse</code>",
  "<code>pen</code>",
  or "<code>touch</code>",
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

  <li><p>
  Set the <code>pointerType</code> property of <var>parameters</var>
  to <var>pointer type</var>.
  </ol>

<li><p>Return <a>success</a> with data <var>parameters</var>.
</ol>

<p>An <dfn>action object</dfn> constructed with
 arguments <var>id</var>, <var>type</var>, and <var>subtype</var> is
 an object with property <code>id</code> set to <var>id</var>,
 <code>type</code> set to <var>type</var> and <code>subtype</code> set
 to <var>subtype</var>. Specific action objects have further
 properties added by other algorithms in this specification.

<p>
When required to <dfn>process a null action</dfn> with arguments
<var>id</var> and <var>action item</var>,
a <a>remote end</a> must perform the following steps:</p>

<ol>
<li><p>
Let <var>subtype</var> be the result of <a>getting a property</a>
named <code>type</code> from <var>action item</var>.

<li><p>
If <var>subtype</var> is not "<code>pause</code>",
return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

<li><p>
Let <var>action</var> be an <a>action object</a> constructed with arguments
<var>id</var>,
<code>"none"</code>,
and <var>subtype</var>.

<li><p>
Let <var>result</var> be the result
of <a>trying</a> to <a>process a pause action</a>
with arguments <var>action item</var> and <var>action</var>.

<li><p>
Return <var>result</var>.
</ol>

<p>
When required to <dfn>process a key action</dfn> with arguments
<var>id</var> and <var>action item</var>,
a <a>remote end</a> must perform the following steps:</p>

<ol>
<li><p>
Let <var>subtype</var> be the result of <a>getting a property</a>
named <code>type</code> from <var>action item</var>.

<li><p>
If <var>subtype</var> is not one of the values
"<code>keyUp</code>",
"<code>keyDown</code>",
or "<code>pause</code>",
return an <a>error</a> with <a>error code</a> <a>invalid argument</a>.

<li><p>
Let <var>action</var> be an <a>action object</a> constructed with arguments
<var>id</var>,
"<code>key</code>",
and <var>subtype</var>.

<li><p>
If <var>subtype</var> is "<code>pause</code>",
let <var>result</var> be the result
of <a>trying</a> to <a>process a pause action</a> with arguments
<var>action item</var> and <var>action</var>,
and return <var>result</var>.

<li><p>
Let <var>key</var> be the result
of <a>getting a property</a> named <code>value</code>
from <var>action item</var>.

<li><p>
If <var>key</var> is not a <a>String</a> containing a single <a>unicode code point</a>
<span class=issue>or grapheme cluster?</span>
return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

<li><p>
Set the <code>value</code> property on <var>action</var> to <var>key</var>.

<li><p>
Return success with data <var>action</var>.
</ol>

<p>
When required to <dfn>process a pointer action</dfn> with arguments
<var>id</var>,
<var>parameters</var>,
and <var>action item</var>,
a <a>remote end</a> must perform the following steps:</p>

<ol>
<li><p>
Let <var>subtype</var> be the result
of <a>getting a property</a> named <code>type</code>
from <var>action item</var>.

<li><p>
If <var>subtype</var> is not one of the values
"<code>pause</code>",
"<code>pointerUp</code>",
"<code>pointerDown</code>",
"<code>pointerMove</code>",
or "<code>pointerCancel</code>",
return an <a>error</a> with <a>error code</a> <a>invalid argument</a>.

<li><p>
Let <var>action</var> be an <a>action object</a> constructed with arguments
<var>id</var>,
"<code>pointer</code>",
and <var>subtype</var>.

<li><p>
If <var>subtype</var> is "<code>pause</code>",
let <var>result</var> be the result of <a>trying</a> to
<a>process a pause action</a> with arguments
<var>action item</var> and <var>action</var>,
and return <var>result</var>.

<li><p>
Set the <code>pointerType</code> property of <var>action</var>
equal to the <code>pointerType</code> property of <var>parameters</var>.

<li><p>
If <var>subtype</var> is "<code>pointerUp</code>" or "<code>pointerDown</code>",
<a>process a pointer up or pointer down action</a> with arguments
<var>action item</var> and <var>action</var>.
If doing so results in an <a>error</a>, return that <a>error</a>.

<li><p>
If <var>subtype</var> is "<code>pointerMove</code>"
<a>process a pointer move action</a> with arguments
<var>action item</var> and <var>action</var>.
If doing so results in an <a>error</a>, return that <a>error</a>.

<li><p>
If <var>subtype</var> is "<code>pointerCancel</code>"
<span class=issue>process a pointer cancel action</span>.
If doing so results in an <a>error</a>, return that <a>error</a>.

<li><p>
Return <a>success</a> with data <var>action</var>.
</ol>

<p>When required to <dfn>process a pause action</dfn> with
 arguments <var>action item</var>, and <var>action</var>, a
 <a>remote end</a> must run the following steps:</p>

<ol>
 <li><p>Let <var>duration</var> be the result
  of <a>getting the property</a> "<code>duration</code>"
  from <var>action item</var>.

 <li><p>If <var>duration</var> is not <a>undefined</a>
  and <var>duration</var> is not an <a>Integer</a> greater than or
  equal to 0, return <a>error</a> with <a>error code</a> <a>invalid
  argument</a>.

 <li><p>Set the <code>duration</code> property of <var>action</var>
 to <var>duration</var>.

 <li><p>Return success with data <var>action</var>.
</ol>

<p>When required to <dfn>process a pointer up or pointer down action</dfn>
 with arguments <var>action item</var>, and <var>action</var>, a
 <a>remote end</a> must run the following steps:</p>

<ol>
 <li><p>Let <var>button</var> be the result
  of getting the property <code>button</code>
  from <var>action item</var>.

 <li><p>If <var>button</var> is not an <a>Integer</a> greater than or
  equal to 0 return <a>error</a> with <a>error code</a>
  <a>invalid argument</a>.

 <li><p>Set the <code>button</code> property of <var>action</var>
  to <var>button</var>.

 <li><p>Return success with data <a><code>null</code></a>.
</ol>

<p>When required to <dfn>process a pointer move action</dfn> with
 arguments <var>action item</var>, and <var>action</var>, a
 <a>remote end</a> must run the following steps:</p>

<ol>
 <li><p>Let <var>duration</var> be the result
  of getting the property <code>duration</code>
  from <var>action item</var>.

 <li><p>If <var>duration</var> is not <a>undefined</a>
  and <var>duration</var> is not an <a>Integer</a> greater than or equal to 0,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>Set the <code>duration</code> property of <var>action</var>
  to <var>duration</var>.

 <li><p>Let <var>origin</var> be the result
  of <a>getting the property</a> <code>origin</code>
  from <var>action item</var>.

 <li><p>If <var>origin</var> is <a>undefined</a> let
  <var>origin</var> equal "<code>viewport</code>".

 <li><p>If <var>origin</var> is not equal to "<code>viewport</code>"
  or "<code>pointer</code>" and <var>origin</var> is not an <a>Object</a>
  that <a>represents a web element</a>, return <a>error</a> with
  <a>error code</a> <a>invalid argument</a>.

 <li><p>Set the <code>origin</code> property of <var>action</var>
  to <var>origin</var>.

 <li><p>Let <var>x</var> be the result
  of <a>getting the property</a> <code>x</code>
  from <var>action item</var>.

 <li><p>If <var>x</var> is not <a>undefined</a> and is not an <a>Integer</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>Set the <code>x</code> property
  of <var>action</var> to <var>x</var>.

 <li><p>Let <var>y</var> be the result
  of <a>getting the property</a> <code>y</code>
  from <var>action item</var>.

 <li><p>If <var>y</var> is not <a>undefined</a>
  and is not an <a>Integer</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>Set the <code>y</code> property of <var>action</var>
  to <var>y</var>.

 <li><p>Return success with data <a><code>null</code></a>.
</ol>
</section> <!-- /processing-actions -->


<section>
<h3 id=dispatching-actions>Dispatching actions</h3>

<p>The algorithm to <a>dispatch actions</a> takes a list of actions
 grouped by <a>tick</a>, and then causes each action to be run at the
 appropriate point in the sequence.

<p>When asked to <dfn>dispatch actions</dfn> with
    argument <var>actions by tick</var>, a <a>remote end</a> must run the
    following steps:</p>

<ol>
 <li><p>For each item <var>tick actions</var> in
  <var>actions by tick</var>:

  <ol>
   <li><p>Let <var>tick duration</var> be the result of <a>computing
    the tick duration</a> with argument <var>tick actions</var>.

   <li><p><a>Dispatch tick actions</a> with arguments
   <var>tick actions</var> and <var>tick duration</var>.
   If this results in an <a>error</a> return that error.

   <li><p>Wait until the following conditions are all met:

    <ul>
     <li><p>There are no pending <a>asynchronous waits</a> arising
      from the last invocation of the <a>dispatch tick actions</a>
      steps.

     <li><p>The user agent event loop has spun enough times to process
      the DOM events generated by the last invocation of
      the <a>dispatch tick actions</a> steps.

     <li><p>At least <var>tick duration</var> milliseconds have
      passed.
    </ul>
  </ol>

 <li><p>Return success with data <a><code>null</code></a>.
</ol>

<p>When required to
 <dfn lt="computing the tick duration">compute the tick duration</dfn>
 with argument <var>tick actions</var>, a <a>remote end</a>
 must take the following steps:</p>

<ol>
 <li><p>Let <var>max duration</var> be 0.

 <li><p>For each <var>action object</var> in <var>tick actions</var>:

  <ol>
   <li><p>let <var>duration</var> be <a>undefined</a>.

   <li><p>If <var>action object</var> has <code>subtype</code>
    property set to "<code>pause</code>"
    or <var>action object</var> has <code>type</code> property set
    to "<code>pointer</code>" and <code>subtype</code> property set
    to "<code>pointerMove</code>", let <var>duration</var> be equal to
    the <code>duration</code> property of
    <var>action object</var>.

   <li><p>If <var>duration</var> is not <a>undefined</a>,
    and <var>duration</var> is greater than <var>max duration</var>,
    let <var>max duration</var> be equal to duration.
  </ol>

 <li><p>Return <var>max duration</var>.
</ol>

<p>When required to <dfn>dispatch tick actions</dfn> with
 arguments <var>tick actions</var> and <var>tick duration</var>,
 a <a>remote end</a> must run the following steps:

<ol>
 <li><p>For each <var>action object</var> in <var>tick actions</var>:

  <ol>
   <li><p>Let <var>source id</var> be equal to the value
    of <var>action object</var>’s <code>id</code> property.

   <li><p>Let <var>source type</var> be equal to the value
    of <var>action object</var>’s <code>type</code> property.

   <!-- TODO: this next bit doesn’t really link to the right
    point in the spec for creating objects of the right type -->

   <li><p>If the <a>current session</a>’s <a>input state table</a> doesn’t
    have a property corresponding to <var>source id</var>, then let
    the property corresponding to <var>source id</var> be a new object
    of the <a>corresponding input source state type</a> for
    <var>source type</var>.

   <li><p>Let <var>device state</var> be the <a>input source state</a>
    corresponding to <var>source id</var> in the
    <a>current session</a>’s <a>input state table</a>.

   <li><p>Let <var>algorithm</var> be the value of the column
    <i>dispatch action algorithm</i> from the following table of
    <dfn noexport>dispatch action algorithms</dfn> that is equal to the
    <var>source type</var> and the <var>action object</var>’s
    <code>subtype</code> property, to a dispatch action algorithm.

<table class=simple>
<tr><th><var>source type</var>	<th><code>subtype</code> property	<th>Dispatch action algorithm
<tr><td>"<code>none</code>"	<td>"<code>pause</code>"		<td><a>Dispatch a pause action</a>
<tr><td>"<code>key</code>"	<td>"<code>pause</code>"		<td><a>Dispatch a pause action</a>
<tr><td>"<code>key</code>"	<td>"<code>keyDown</code>"		<td><a>Dispatch a keyDown action</a>
<tr><td>"<code>key</code>"	<td>"<code>keyUp</code>"		<td><a>Dispatch a keyUp action</a>
<tr><td>"<code>pointer</code>"	<td>"<code>pause</code>"		<td><a>Dispatch a pause action</a>
<tr><td>"<code>pointer</code>"	<td>"<code>pointerDown</code>"		<td><a>Dispatch a pointerDown action</a>
<tr><td>"<code>pointer</code>"	<td>"<code>pointerUp</code>"		<td><a>Dispatch a pointerUp action</a>
<tr><td>"<code>pointer</code>"	<td>"<code>pointerMove</code>		<td><a>Dispatch a pointerMove action</a>
<tr><td>"<code>pointer</code>"	<td>"<code>pointerCancel</code>		<td><a>Dispatch a pointerCancel action</a>
</table>

   <li><a>Try</a> to run <var>algorithm</var> with arguments
    <var>source id</var>, <var>action object</var>,
    <var>device state</var> and <var>tick duration</var>.
  </ol>

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>


<section>
<h4 id=general-actions>General actions</h4>

<p>When required to <dfn>dispatch a pause action</dfn> with
 arguments <var>source id</var>, <var>action object</var>,
 <var>input state</var> and <var>tick duration</var> a
 <a>remote end</a> must run the following steps:

<ol>
 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section>


<section>
<h4 id=keyboard-actions>Keyboard actions</h4>

<p>The <dfn>normalised key value</dfn> for a raw key <var>key</var>
 is, if <var>key</var> appears in the table below, the string value in
 the second column on the row containing <var>key</var>’s <a>unicode
 code point</a> in the first column, otherwise it is <var>key</var>.

<table class=simple>
 <tr>
  <th><var>key</var>’s codepoint
  <th>Normalised key value
 </tr>
 <tr><td><code>\uE000</code></td><td><code>"Unidentified"</code></td></tr>
 <tr><td><code>\uE001</code></td><td><code>"Cancel"</code></td></tr>
 <tr><td><code>\uE002</code></td><td><code>"Help"</code></td></tr>
 <tr><td><code>\uE003</code></td><td><code>"Backspace"</code></td></tr>
 <tr><td><code>\uE004</code></td><td><code>"Tab"</code></td></tr>
 <tr><td><code>\uE005</code></td><td><code>"Clear"</code></td></tr>
 <tr><td><code>\uE006</code></td><td><code>"Return"</code></td></tr>
 <tr><td><code>\uE007</code></td><td><code>"Enter"</code></td></tr>
 <tr><td><code>\uE008</code></td><td><code>"Shift"</code></td></tr>
 <tr><td><code>\uE009</code></td><td><code>"Control"</code></td></tr>
 <tr><td><code>\uE00A</code></td><td><code>"Alt"</code></td></tr>
 <tr><td><code>\uE00B</code></td><td><code>"Pause"</code></td></tr>
 <tr><td><code>\uE00C</code></td><td><code>"Escape"</code></td></tr>
 <tr><td><code>\uE00D</code></td><td><code>" "</code></td></tr>
 <tr><td><code>\uE00E</code></td><td><code>"PageUp"</code></td></tr>
 <tr><td><code>\uE00F</code></td><td><code>"PageDown"</code></td></tr>
 <tr><td><code>\uE010</code></td><td><code>"End"</code></td></tr>
 <tr><td><code>\uE011</code></td><td><code>"Home"</code></td></tr>
 <tr><td><code>\uE012</code></td><td><code>"ArrowLeft"</code></td></tr>
 <tr><td><code>\uE013</code></td><td><code>"ArrowUp"</code></td></tr>
 <tr><td><code>\uE014</code></td><td><code>"ArrowRight"</code></td></tr>
 <tr><td><code>\uE015</code></td><td><code>"ArrowDown"</code></td></tr>
 <tr><td><code>\uE016</code></td><td><code>"Insert"</code></td></tr>
 <tr><td><code>\uE017</code></td><td><code>"Delete"</code></td></tr>
 <tr><td><code>\uE018</code></td><td><code>";"</code></td></tr>
 <tr><td><code>\uE019</code></td><td><code>"="</code></td></tr>
 <tr><td><code>\uE01A</code></td><td><code>"0"</code></td></tr>
 <tr><td><code>\uE01B</code></td><td><code>"1"</code></td></tr>
 <tr><td><code>\uE01C</code></td><td><code>"2"</code></td></tr>
 <tr><td><code>\uE01D</code></td><td><code>"3"</code></td></tr>
 <tr><td><code>\uE01E</code></td><td><code>"4"</code></td></tr>
 <tr><td><code>\uE01F</code></td><td><code>"5"</code></td></tr>
 <tr><td><code>\uE020</code></td><td><code>"6"</code></td></tr>
 <tr><td><code>\uE021</code></td><td><code>"7"</code></td></tr>
 <tr><td><code>\uE022</code></td><td><code>"8"</code></td></tr>
 <tr><td><code>\uE023</code></td><td><code>"9"</code></td></tr>
 <tr><td><code>\uE024</code></td><td><code>"*"</code></td></tr>
 <tr><td><code>\uE025</code></td><td><code>"+"</code></td></tr>
 <tr><td><code>\uE026</code></td><td><code>","</code></td></tr>
 <tr><td><code>\uE027</code></td><td><code>"-"</code></td></tr>
 <tr><td><code>\uE028</code></td><td><code>"."</code></td></tr>
 <tr><td><code>\uE029</code></td><td><code>"/"</code></td></tr>
 <tr><td><code>\uE031</code></td><td><code>"F1"</code></td></tr>
 <tr><td><code>\uE032</code></td><td><code>"F2"</code></td></tr>
 <tr><td><code>\uE033</code></td><td><code>"F3"</code></td></tr>
 <tr><td><code>\uE034</code></td><td><code>"F4"</code></td></tr>
 <tr><td><code>\uE035</code></td><td><code>"F5"</code></td></tr>
 <tr><td><code>\uE036</code></td><td><code>"F6"</code></td></tr>
 <tr><td><code>\uE037</code></td><td><code>"F7"</code></td></tr>
 <tr><td><code>\uE038</code></td><td><code>"F8"</code></td></tr>
 <tr><td><code>\uE039</code></td><td><code>"F9"</code></td></tr>
 <tr><td><code>\uE03A</code></td><td><code>"F10"</code></td></tr>
 <tr><td><code>\uE03B</code></td><td><code>"F11"</code></td></tr>
 <tr><td><code>\uE03C</code></td><td><code>"F12"</code></td></tr>
 <tr><td><code>\uE03D</code></td><td><code>"Meta"</code></td></tr>
 <tr><td><code>\uE040</code></td><td><code>"ZenkakuHankaku"</code></td></tr>
 <!-- Right position variants -->
 <tr><td><code>\uE050</code></td><td><code>"Shift"</code></td></tr>
 <tr><td><code>\uE051</code></td><td><code>"Control"</code></td></tr>
 <tr><td><code>\uE052</code></td><td><code>"Alt"</code></td></tr>
 <tr><td><code>\uE053</code></td><td><code>"Meta"</code></td></tr>
 <!-- Numpad Variants -->
 <tr><td><code>\uE054</code></td><td><code>"PageUp"</code></td></tr>
 <tr><td><code>\uE055</code></td><td><code>"PageDown"</code></td></tr>
 <tr><td><code>\uE056</code></td><td><code>"End"</code></td></tr>
 <tr><td><code>\uE057</code></td><td><code>"Home"</code></td></tr>
 <tr><td><code>\uE058</code></td><td><code>"ArrowLeft"</code></td></tr>
 <tr><td><code>\uE059</code></td><td><code>"ArrowUp"</code></td></tr>
 <tr><td><code>\uE05A</code></td><td><code>"ArrowRight"</code></td></tr>
 <tr><td><code>\uE05B</code></td><td><code>"ArrowDown"</code></td></tr>
 <tr><td><code>\uE05C</code></td><td><code>"Insert"</code></td></tr>
 <tr><td><code>\uE05D</code></td><td><code>"Delete"</code></td></tr>
</table>

<p>The <dfn>code</dfn> for <var>key</var>
 is the value in the last column of the following table
 on the row with <var>key</var> in either the first or second column,
 if any such row exists,
 otherwise it is <a>undefined</a>.

<p>A <dfn>shifted character</dfn>
 is one that appears in the second column of the following table.

<!-- TODO This should perhaps return undefined when the shift key
 doesn’t match the requirement for producing the character? -->

<table class=simple>
 <tr>
   <th>Key
   <th>Alternate Key
   <th>code
 </tr>

 <tr><td><code>"`"</code></td><td><code>"~"</code></td><td><code>"Backquote"</code></td></tr>
 <tr><td><code>"\"</code></td><td><code>"|"</code></td><td><code>"Backslash"</code></td></tr>
 <tr><td><code>"\uE003"</code></td><td><code></code></td><td><code>"Backspace"</code></td></tr>
 <tr><td><code>"["</code></td><td><code>"{"</code></td><td><code>"BracketLeft"</code></td></tr>
 <tr><td><code>"]"</code></td><td><code>"}"</code></td><td><code>"BracketRight"</code></td></tr>
 <tr><td><code>","</code></td><td><code>"&lt;"</code></td><td><code>"Comma"</code></td></tr>
 <tr><td><code>"0"</code></td><td><code>")"</code></td><td><code>"Digit0"</code></td></tr>
 <tr><td><code>"1"</code></td><td><code>"!"</code></td><td><code>"Digit1"</code></td></tr>
 <tr><td><code>"2"</code></td><td><code>"@"</code></td><td><code>"Digit2"</code></td></tr>
 <tr><td><code>"3"</code></td><td><code>"#"</code></td><td><code>"Digit3"</code></td></tr>
 <tr><td><code>"4"</code></td><td><code>"$"</code></td><td><code>"Digit4"</code></td></tr>
 <tr><td><code>"5"</code></td><td><code>"%"</code></td><td><code>"Digit5"</code></td></tr>
 <tr><td><code>"6"</code></td><td><code>"^"</code></td><td><code>"Digit6"</code></td></tr>
 <tr><td><code>"7"</code></td><td><code>"&amp;"</code></td><td><code>"Digit7"</code></td></tr>
 <tr><td><code>"8"</code></td><td><code>"*"</code></td><td><code>"Digit8"</code></td></tr>
 <tr><td><code>"9"</code></td><td><code>"("</code></td><td><code>"Digit9"</code></td></tr>
 <tr><td><code>"="</code></td><td><code>"+"</code></td><td><code>"Equal"</code></td></tr>
 <tr><td><code>"&lt;"</code></td><td><code>"&gt;"</code></td><td><code>"IntlBackslash"</code></td></tr>
 <tr><td><code>"a"</code></td><td><code>"A"</code></td><td><code>"KeyA"</code></td></tr>
 <tr><td><code>"b"</code></td><td><code>"B"</code></td><td><code>"KeyB"</code></td></tr>
 <tr><td><code>"c"</code></td><td><code>"C"</code></td><td><code>"KeyC"</code></td></tr>
 <tr><td><code>"d"</code></td><td><code>"D"</code></td><td><code>"KeyD"</code></td></tr>
 <tr><td><code>"e"</code></td><td><code>"E"</code></td><td><code>"KeyE"</code></td></tr>
 <tr><td><code>"f"</code></td><td><code>"F"</code></td><td><code>"KeyF"</code></td></tr>
 <tr><td><code>"g"</code></td><td><code>"G"</code></td><td><code>"KeyG"</code></td></tr>
 <tr><td><code>"h"</code></td><td><code>"H"</code></td><td><code>"KeyH"</code></td></tr>
 <tr><td><code>"i"</code></td><td><code>"I"</code></td><td><code>"KeyI"</code></td></tr>
 <tr><td><code>"j"</code></td><td><code>"J"</code></td><td><code>"KeyJ"</code></td></tr>
 <tr><td><code>"k"</code></td><td><code>"K"</code></td><td><code>"KeyK"</code></td></tr>
 <tr><td><code>"l"</code></td><td><code>"L"</code></td><td><code>"KeyL"</code></td></tr>
 <tr><td><code>"m"</code></td><td><code>"M"</code></td><td><code>"KeyM"</code></td></tr>
 <tr><td><code>"n"</code></td><td><code>"N"</code></td><td><code>"KeyN"</code></td></tr>
 <tr><td><code>"o"</code></td><td><code>"O"</code></td><td><code>"KeyO"</code></td></tr>
 <tr><td><code>"p"</code></td><td><code>"P"</code></td><td><code>"KeyP"</code></td></tr>
 <tr><td><code>"q"</code></td><td><code>"Q"</code></td><td><code>"KeyQ"</code></td></tr>
 <tr><td><code>"r"</code></td><td><code>"R"</code></td><td><code>"KeyR"</code></td></tr>
 <tr><td><code>"s"</code></td><td><code>"S"</code></td><td><code>"KeyS"</code></td></tr>
 <tr><td><code>"t"</code></td><td><code>"T"</code></td><td><code>"KeyT"</code></td></tr>
 <tr><td><code>"u"</code></td><td><code>"U"</code></td><td><code>"KeyU"</code></td></tr>
 <tr><td><code>"v"</code></td><td><code>"V"</code></td><td><code>"KeyV"</code></td></tr>
 <tr><td><code>"w"</code></td><td><code>"W"</code></td><td><code>"KeyW"</code></td></tr>
 <tr><td><code>"x"</code></td><td><code>"X"</code></td><td><code>"KeyX"</code></td></tr>
 <tr><td><code>"y"</code></td><td><code>"Y"</code></td><td><code>"KeyY"</code></td></tr>
 <tr><td><code>"z"</code></td><td><code>"Z"</code></td><td><code>"KeyZ"</code></td></tr>
 <tr><td><code>"-"</code></td><td><code>"_"</code></td><td><code>"Minus"</code></td></tr>
 <tr><td><code>"."</code></td><td><code>">"."</code></td><td><code>"Period"</code></td></tr>
 <tr><td><code>"'"</code></td><td><code>"&quot;"</code></td><td><code>"Quote"</code></td></tr>
 <tr><td><code>";"</code></td><td><code>":"</code></td><td><code>"Semicolon"</code></td></tr>
 <tr><td><code>"/"</code></td><td><code>"?"</code></td><td><code>"Slash"</code></td></tr>
 <tr><td><code>"\uE00A"</code></td><td><code></code></td><td><code>"AltLeft"</code></td></tr>
 <tr><td><code>"\uE052"</code></td><td><code></code></td><td><code>"AltRight"</code></td></tr>
 <tr><td><code>"\uE009"</code></td><td><code></code></td><td><code>"ControlLeft"</code></td></tr>
 <tr><td><code>"\uE051"</code></td><td><code></code></td><td><code>"ControlRight"</code></td></tr>
 <tr><td><code>"\uE006"</code></td><td><code></code></td><td><code>"Enter"</code></td></tr>
 <tr><td><code>"\uE03D"</code></td><td><code></code></td><td><code>"OSLeft"</code></td></tr>
 <tr><td><code>"\uE053"</code></td><td><code></code></td><td><code>"OSRight"</code></td></tr>
 <tr><td><code>"\uE008"</code></td><td><code></code></td><td><code>"ShiftLeft"</code></td></tr>
 <tr><td><code>"\uE050"</code></td><td><code></code></td><td><code>"ShiftRight"</code></td></tr>
 <tr><td><code>" "</code></td><td><code>"\uE00D"</code></td><td><code>"Space"</code></td></tr>
 <tr><td><code>"\uE004"</code></td><td><code></code></td><td><code>"Tab"</code></td></tr>
 <tr><td><code>"\uE017"</code></td><td><code></code></td><td><code>"Delete"</code></td></tr>
 <tr><td><code>"\uE010"</code></td><td><code></code></td><td><code>"End"</code></td></tr>
 <tr><td><code>"\uE002"</code></td><td><code></code></td><td><code>"Help"</code></td></tr>
 <tr><td><code>"\uE011"</code></td><td><code></code></td><td><code>"Home"</code></td></tr>
 <tr><td><code>"\uE016"</code></td><td><code></code></td><td><code>"Insert"</code></td></tr>
 <tr><td><code>"\uE00F"</code></td><td><code></code></td><td><code>"PageDown"</code></td></tr>
 <tr><td><code>"\uE00E"</code></td><td><code></code></td><td><code>"PageUp"</code></td></tr>
 <tr><td><code>"\uE015"</code></td><td><code></code></td><td><code>"ArrowDown"</code></td></tr>
 <tr><td><code>"\uE012"</code></td><td><code></code></td><td><code>"ArrowLeft"</code></td></tr>
 <tr><td><code>"\uE014"</code></td><td><code></code></td><td><code>"ArrowRight"</code></td></tr>
 <tr><td><code>"\uE013"</code></td><td><code></code></td><td><code>"ArrowUp"</code></td></tr>
 <tr><td><code>"\uE00C"</code></td><td><code></code></td><td><code>"Escape"</code></td></tr>
 <tr><td><code>"\uE031"</code></td><td><code></code></td><td><code>"F1"</code></td></tr>
 <tr><td><code>"\uE032"</code></td><td><code></code></td><td><code>"F2"</code></td></tr>
 <tr><td><code>"\uE033"</code></td><td><code></code></td><td><code>"F3"</code></td></tr>
 <tr><td><code>"\uE034"</code></td><td><code></code></td><td><code>"F4"</code></td></tr>
 <tr><td><code>"\uE035"</code></td><td><code></code></td><td><code>"F5"</code></td></tr>
 <tr><td><code>"\uE036"</code></td><td><code></code></td><td><code>"F6"</code></td></tr>
 <tr><td><code>"\uE037"</code></td><td><code></code></td><td><code>"F7"</code></td></tr>
 <tr><td><code>"\uE038"</code></td><td><code></code></td><td><code>"F8"</code></td></tr>
 <tr><td><code>"\uE039"</code></td><td><code></code></td><td><code>"F9"</code></td></tr>
 <tr><td><code>"\uE03A"</code></td><td><code></code></td><td><code>"F10"</code></td></tr>
 <tr><td><code>"\uE03B"</code></td><td><code></code></td><td><code>"F11"</code></td></tr>
 <tr><td><code>"\uE03C"</code></td><td><code></code></td><td><code>"F12"</code></td></tr>
 <tr><td><code>"\uE01A"</code></td><td><code>"\uE05C"</code></td><td><code>"Numpad0"</code></td></tr>
 <tr><td><code>"\uE01B"</code></td><td><code>"\uE056"</code></td><td><code>"Numpad1"</code></td></tr>
 <tr><td><code>"\uE01C"</code></td><td><code>"\uE05B"</code></td><td><code>"Numpad2"</code></td></tr>
 <tr><td><code>"\uE01D"</code></td><td><code>"\uE055"</code></td><td><code>"Numpad3"</code></td></tr>
 <tr><td><code>"\uE01E"</code></td><td><code>"\uE058"</code></td><td><code>"Numpad4"</code></td></tr>
 <tr><td><code>"\uE01F"</code></td><td><code></code></td><td><code>"Numpad5"</code></td></tr>
 <tr><td><code>"\uE020"</code></td><td><code>"\uE05A"</code></td><td><code>"Numpad6"</code></td></tr>
 <tr><td><code>"\uE021"</code></td><td><code>"\uE057"</code></td><td><code>"Numpad7"</code></td></tr>
 <tr><td><code>"\uE022"</code></td><td><code>"\uE059"</code></td><td><code>"Numpad8"</code></td></tr>
 <tr><td><code>"\uE023"</code></td><td><code>"\uE054"</code></td><td><code>"Numpad9"</code></td></tr>
 <tr><td><code>"\uE025"</code></td><td><code></code></td><td><code>"NumpadAdd"</code></td></tr>
 <tr><td><code>"\uE026"</code></td><td><code></code></td><td><code>"NumpadComma"</code></td></tr>
 <tr><td><code>"\uE028"</code></td><td><code>"\uE05D"</code></td><td><code>"NumpadDecimal"</code></td></tr>
 <tr><td><code>"\uE029"</code></td><td><code></code></td><td><code>"NumpadDivide"</code></td></tr>
 <tr><td><code>"\uE007"</code></td><td><code></code></td><td><code>"NumpadEnter"</code></td></tr>
 <tr><td><code>"\uE024"</code></td><td><code></code></td><td><code>"NumpadMultiply"</code></td></tr>
 <tr><td><code>"\uE027"</code></td><td><code></code></td><td><code>"NumpadSubtract"</code></td></tr>
</table>

<p>The <dfn>key location</dfn> for <var>key</var> is the value in the
 last column in the table below on the row with <var>key</var> appears
 in the first column, if such a row exists, otherwise it
 is <code>0</code>.

<table class=simple>
 <tr>
  <th><var>key</var>’s codepoint
  <th>Description
  <th>Location
 </tr>
 <tr><td><code>\uE007</code></td><td>Enter</td><td><code>1</code></td></tr>
 <tr><td><code>\uE008</code></td><td>Left Shift</td><td><code>1</code></td></tr>
 <tr><td><code>\uE009</code></td><td>Left Control</td><td><code>1</code></td></tr>
 <tr><td><code>\uE00A</code></td><td>Left Alt</td><td><code>1</code></td></tr>
 <tr><td><code>\uE01A</code></td><td>Numpad 0</td><td><code>3</code></td></tr>
 <tr><td><code>\uE01B</code></td><td>Numpad 1</td><td><code>3</code></td></tr>
 <tr><td><code>\uE01C</code></td><td>Numpad 2</td><td><code>3</code></td></tr>
 <tr><td><code>\uE01D</code></td><td>Numpad 3</td><td><code>3</code></td></tr>
 <tr><td><code>\uE01E</code></td><td>Numpad 4</td><td><code>3</code></td></tr>
 <tr><td><code>\uE01F</code></td><td>Numpad 5</td><td><code>3</code></td></tr>
 <tr><td><code>\uE020</code></td><td>Numpad 6</td><td><code>3</code></td></tr>
 <tr><td><code>\uE021</code></td><td>Numpad 7</td><td><code>3</code></td></tr>
 <tr><td><code>\uE022</code></td><td>Numpad 8</td><td><code>3</code></td></tr>
 <tr><td><code>\uE023</code></td><td>Numpad 9</td><td><code>3</code></td></tr>
 <tr><td><code>\uE024</code></td><td>Numpad *</td><td><code>3</code></td></tr>
 <tr><td><code>\uE025</code></td><td>Numpad +</td><td><code>3</code></td></tr>
 <tr><td><code>\uE026</code></td><td>Numpad ,</td><td><code>3</code></td></tr>
 <tr><td><code>\uE027</code></td><td>Numpad -</td><td><code>3</code></td></tr>
 <tr><td><code>\uE028</code></td><td>Numpad .</td><td><code>3</code></td></tr>
 <tr><td><code>\uE029</code></td><td>Numpad /</td><td><code>3</code></td></tr>
 <tr><td><code>\uE03D</code></td><td>Left Meta</td><td><code>1</code></td></tr>
 <!-- Right position variants -->
 <tr><td><code>\uE050</code></td><td>Right Shift</td><td><code>2</code></td></tr>
 <tr><td><code>\uE051</code></td><td>Right Control</td><td><code>2</code></td></tr>
 <tr><td><code>\uE052</code></td><td>Right Alt</td><td><code>2</code></td></tr>
 <tr><td><code>\uE053</code></td><td>Right Meta</td><td><code>2</code></td></tr>
 <!-- Numpad Variants -->
 <tr><td><code>\uE054</code></td><td>Numpad PageUp<td><code>3</code></td></tr>
 <tr><td><code>\uE055</code></td><td>Numpad PageDown<td><code>3</code></td></tr>
 <tr><td><code>\uE056</code></td><td>Numpad End<td><code>3</code></td></tr>
 <tr><td><code>\uE057</code></td><td>Numpad Home<td><code>3</code></td></tr>
 <tr><td><code>\uE058</code></td><td>Numpad ArrowLeft<td><code>3</code></td></tr>
 <tr><td><code>\uE059</code></td><td>Numpad ArrowUp<td><code>3</code></td></tr>
 <tr><td><code>\uE05A</code></td><td>Numpad ArrowRight<td><code>3</code></td></tr>
 <tr><td><code>\uE05B</code></td><td>Numpad ArrowDown<td><code>3</code></td></tr>
 <tr><td><code>\uE05C</code></td><td>Numpad Insert<td><code>3</code></td></tr>
 <tr><td><code>\uE05D</code></td><td>Numpad Delete<td><code>3</code></td></tr>
</table>

<p>When required to <dfn>dispatch a keyDown action</dfn> with arguments
 <var>source id</var>, <var>action object</var>,
 <var>input state</var> and <var>tick duration</var> a <a>remote end</a>
 must run the following steps:

<ol>
 <li><p>Let <var>raw key</var> be equal to the
  <var>action object</var>’s <code>value</code> property.

 <li><p>Let <var>key</var> be equal to the <a>normalised key value</a>
  for <var>raw key</var>.

 <li><p>If the <var>input state</var>’s <code>pressed</code> property
  contains <var>key</var>, let <var>repeat</var> be true, otherwise
  let <var>repeat</var> be false.

 <li><p>Let <var>code</var> be the <a>code</a> for <var>raw key</var>.

 <li><p>Let <var>location</var> be the <a>key location</a>
  for <var>raw key</var>.

 <li><p>Let <var>charCode</var>, <var>keyCode</var>
  and <var>which</var> be the implementation-specific values of
  the <code>charCode</code>, <code>keyCode</code>
  and <code>which</code> properties appropriate for a key with
  key <var>key</var> and location <var>location</var> on a 102 key US
  keyboard, following the guidelines in [[UI-EVENTS]].

 <li><p>If <var>key</var> is <code>"Alt"</code>, let
  <var>device state’s</var> <code>alt</code> property be true.

 <li><p>If <var>key</var> is <code>"Shift"</code>, let
  <var>device state’s</var> <code>shift</code> property be true.

 <li><p>If <var>key</var> is <code>"Control"</code>, let
  <var>device state’s</var> <code>ctrl</code> property be true.

 <li><p>If <var>key</var> is <code>"Meta"</code>, let
  <var>device state’s</var> <code>meta</code> property be true.

 <li><p>Add <var>key</var> to the set corresponding to
  <var>input state</var>’s <code>pressed</code> property.

 <li><p>Append a copy of <var>action object</var> with
  the <var>subtype</var> property changed to "<code>keyUp</code>"
  to <a>current session</a>’s <a>input cancel list</a>.

 <li><p><a>Perform implementation-specific
  action dispatch steps</a> equivalent to pressing a key on the
  keyboard in accordance with the requirements of [[UI-EVENTS]], and
  producing the following events, as appropriate, with the specified
  properties.  This will always produce events including at least
  a <code>keyDown</code> event.
  <ul>
   <li><a href="https://w3c.github.io/uievents/#keydown"><code>keyDown</code></a>
    with properties:
    <table class=simple>
     <tr>
      <th>Attribute</th>
      <th>Value</th>
     </tr>
     <tr><td><code>key</code><td><var>key</var>
     <tr><td><code>code</code><td><var>code</var>
     <tr><td><code>location</code><td><var>location</var>
     <tr><td><code>altKey</code><td><var>device state</var>’s <code>alt</code> property
     <tr><td><code>shiftKey</code><td><var>device state</var>’s <code>shift</code> property
     <tr><td><code>ctrlKey</code><td><var>device state</var>’s <code>ctrl</code> property
     <tr><td><code>metaKey</code><td><var>device state</var>’s <code>meta</code> property
     <tr><td><code>repeat</code><td><var>repeat</var>
     <tr><td><code>isComposing</code><td><var>false</var>
     <tr><td><code>charCode</code><td><var>charCode</var>
     <tr><td><code>keyCode</code><td><var>keyCode</var>
     <tr><td><code>which</code><td><var>which</var>
    </table>

   <li><a href="https://w3c.github.io/uievents/#keypress"><code>keyPress</code></a>
    with properties:
    <table class=simple>
     <tr>
      <th>Attribute</th>
      <th>Value</th>
     </tr>
     <tr><td><code>key</code><td><var>key</var>
     <tr><td><code>code</code><td><var>code</var>
     <tr><td><code>location</code><td><var>location</var>
     <tr><td><code>altKey</code><td><var>device state</var>’s <code>alt</code> property
     <tr><td><code>shiftKey</code><td><var>device state</var>’s <code>shift</code> property
     <tr><td><code>ctrlKey</code><td><var>device state</var>’s <code>ctrl</code> property
     <tr><td><code>metaKey</code><td><var>device state</var>’s <code>meta</code> property
     <tr><td><code>repeat</code><td><var>repeat</var>
     <tr><td><code>isComposing</code><td><var>false</var>
     <tr><td><code>charCode</code><td><var>charCode</var>
     <tr><td><code>keyCode</code><td><var>keyCode</var>
     <tr><td><code>which</code><td><var>which</var>
    </table>
  </ul>

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>

<aside class=note>
 <p>A single <a>keyDown</a> action produces a single key input,
  irrespective of how long the key is held down; there is no implicit
  key repetition.
</aside>

<p>When required to <dfn>dispatch a keyUp action</dfn> with
 arguments <var>source id</var>, <var>action object</var>,
 <var>input state</var> and <var>tick duration</var>
 a <a>remote end</a> must run the following steps:</p>

<ol>
 <li><p>Let <var>raw key</var> be equal to
  <var>action object</var>’s <code>value</code> property.

 <li><p>Let <var>key</var> be equal to the
  <a>normalised key value</a> for <var>raw key</var>.

 <li><p>If the <var>input state</var>’s <code>pressed</code>
  property does not contain <var>key</var>, return.

 <li><p>Let <var>code</var> be the <a>code</a> for
  <var>raw key</var>.

 <li><p>Let <var>location</var> be the <a>key location</a>
  for <var>raw key</var>.

 <li><p>Let <var>charCode</var>, <var>keyCode</var>
  and <var>which</var> be the implementation-specific values of
  the <code>charCode</code>, <code>keyCode</code>
  and <code>which</code> properties appropriate for a key with
  key <var>key</var> and location <var>location</var> on a 102 key US
  keyboard, following the guidelines in [[UI-EVENTS]].

 <li><p>If <var>key</var> is <code>"Alt"</code>, let
  <var>device state’s</var> <code>alt</code> property be false.

 <li><p>If <var>key</var> is <code>"Shift"</code>, let
  <var>device state’s</var> <code>shift</code> property be false.

 <li><p>If <var>key</var> is <code>"Control"</code>, let
  <var>device state’s</var> <code>ctrl</code> property be false.

 <li><p>If <var>key</var> is <code>"Meta"</code>, let
  <var>device state’s</var> <code>meta</code> property be false.

 <li><p>Remove <var>key</var> from the set corresponding
  to <var>input state</var>’s <code>pressed</code> property.

 <li><p><a>Perform implementation-specific
  action dispatch steps</a> equivalent to releasing a key on the
  keyboard in accordance with the requirements of [[UI-EVENTS]], and
  producing at least the following events with the specified
  properties:
  <ul>
   <li><a href="https://w3c.github.io/uievents/#keyup"><code>keyup</code></a>,
    with properties:
    <table class=simple>
     <tr>
      <th>Attribute</th>
      <th>Value</th>
     </tr>
     <tr><td><code>key</code><td><var>key</var></tr>
     <tr><td><code>code</code><td><var>code</var></tr>
     <tr><td><code>location</code><td><var>location</var></tr>
     <tr><td><code>altKey</code><td><var>device state</var>’s <code>alt</code> property</tr>
     <tr><td><code>shiftKey</code><td><var>device state</var>’s <code>shift</code> property</tr>
     <tr><td><code>ctrlKey</code><td><var>device state</var>’s <code>ctrl</code> property</tr>
     <tr><td><code>metaKey</code><td><var>device state</var>’s <code>meta</code> property</tr>
     <tr><td><code>repeat</code><td><var>false</var></tr>
     <tr><td><code>isComposing</code><td><var>false</var></tr>
     <tr><td><code>charCode</code><td><var>charCode</var></tr>
     <tr><td><code>keyCode</code><td><var>keyCode</var></tr>
     <tr><td><code>which</code><td><var>which</var></tr>
    </table>
  </ul>
 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>

</section> <!-- /keyboard-actions -->


<section>
<h4 id=pointer-actions>Pointer actions</h4>

<p>When required to <dfn>dispatch a pointerDown action</dfn> with
 arguments <var>source id</var>, <var>action object</var>,
 <var>input state</var> and <var>tick duration</var> a
 <a>remote end</a> must run the following steps:

<ol>
 <li><p>Let <var>pointerType</var> be equal to
  <var>action object</var>’s <code>pointerType</code> property.

 <li><p>Let <var>button</var> be equal to
  <var>action object</var>’s <code>button</code> property.

 <li><p>If the <var>input state</var>’s <code>pressed</code> property
  contains <var>button</var> return <a>success</a> with data <a><code>null</code></a>.

 <li><p>Let <var>x</var> be equal to <var>input state</var>’s
  <code>x</code> property.

 <li><p>Let <var>y</var> be equal to <var>input state</var>’s
  <code>y</code> property.

 <li><p>Add <var>button</var> to the set corresponding to
  <var>input state</var>’s <code>pressed</code> property, and
  let <var>buttons</var> be the resulting value of that property.

 <li><p>Append a copy of <var>action object</var> with
  the <var>subtype</var> property changed to "<code>pointerUp</code>" to
  the <a>current session</a>’s <a>input cancel list</a>.

 <li><p><a>Perform implementation-specific
  action dispatch steps</a> equivalent to pressing the button
  numbered <var>button</var> on the pointer with ID
  <var>source id</var>, having type <var>pointerType</var> at
  viewport x coordinate <var>x</var>, viewport y
  coordinate <var>y</var>, with buttons <var>buttons</var> depressed
  in accordance with the requirements of [[UI-EVENTS]] and
  [[POINTER-EVENTS]]. The generated events must
  set <code>ctrlKey</code>, <code>shiftKey</code>, <code>altKey</code>,
  and <code>metaKey</code> from the <a>calculated global key state</a>.
  Type specific properties for the pointer that are not
  exposed through the webdriver API must be set to the default value
  specified for hardware that doesn’t support that property.

 <!-- TODO: add some events that should be emitted? This is a bit
  complicated in this case because e.g. pointerDown is only emitted
  if there were no previous buttons held down -->

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>

<p>When required to <dfn>dispatch a pointerUp action</dfn> with
 arguments <var>source id</var>, <var>action object</var>,
 <var>input state</var> and <var>tick duration</var> a
 <a>remote end</a> must run the following steps:

<ol>
 <li><p>Let <var>pointerType</var> be equal to
  <var>action object</var>’s <code>pointerType</code> property.

 <li><p>Let <var>button</var> be equal to
  <var>action object</var>’s <code>button</code> property.

 <li><p>If the <var>input state</var>’s <code>pressed</code> property
  does not contain <var>button</var>,
  return <a>success</a> with data <a><code>null</code></a>.

 <li><p>Let <var>x</var> be equal to <var>input state</var>’s
  <code>x</code> property.

 <li><p>Let <var>y</var> be equal to <var>input state</var>’s
  <code>y</code> property.

 <li><p>Remove <var>button</var> from the set corresponding
  to <var>input state</var>’s <code>pressed</code> property, and
  let <var>buttons</var> be the resulting value of that
  property.

 <li><p><a>Perform implementation-specific
  action dispatch steps</a> equivalent to releasing the button
  numbered <var>button</var> on the pointer of ID
  <var>source id</var> having type <var>pointerType</var> at
  viewport x coordinate <var>x</var>, viewport y
  coordinate <var>y</var>, with buttons <var>buttons</var> depressed,
  in accordance with the requirements of [[UI-EVENTS]] and
  [[POINTER-EVENTS]].  The generated events must
  set <code>ctrlKey</code>, <code>shiftKey</code>, <code>altKey</code>,
  and <code>metaKey</code> from the <a>calculated global key state</a>.
  Type specific properties for the pointer that are not
  exposed through the webdriver API must be set to the default value
  specified for hardware that doesn’t support that property.

  <!-- TODO: add some events that should be emitted? This is a bit
   complicated in this case because e.g. pointerDown is only emitted
   if there were no previous buttons held down -->

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>

<p>When required to <dfn>dispatch a pointerMove action</dfn> with
 arguments <var>source id</var>, <var>action object</var>,
 <var>input state</var> and <var>tick duration</var> a
 <a>remote end</a> must run the following steps:

<ol>
 <li><p>Let <var>x offset</var> be equal to the <code>x</code>
  property of <var>action object</var>.

 <li><p>Let <var>y offset</var> be equal to the <code>y</code>
  property of <var>action object</var>.

 <li><p>Let <var>start x</var> be equal to the <code>x</code>
  property of <var>input state</var>.

 <li><p>Let <var>start y</var> be equal to the <code>y</code>
  property of <var>input state</var>.

 <li><p>Let <var>origin</var> be equal to the <code>origin</code>
  property of <var>action object</var>.

 <li><p>Run the substeps of the first matching value
  of <var>origin</var>:

  <dl>
   <dt>"<code>viewport</code>"
   <dd><p>Let <var>x</var> equal <var>x offset</var> and
    <var>y</var> equal <var>y offset</var>.</dd>

   <dt>"<code>pointer</code>"
   <dd><p>Let <var>x</var> equal <var>start x</var> +
    <var>x offset</var> and <var>y</var> equal
    <var>start y</var> + <var>y  offset</var>.</dd>

   <dt>An object that <a>represents a web element</a></dt>
   <dd>
    <ol>
     <li><p>Let <var>element</var> be equal to the result
      of <a>trying</a> to <a>get a known connected element</a> with
      argument <var>origin</var>.

     <li><p>Let <var>x element</var> and <var>y element</var> be the
      result of calculating the <a>in-view center point</a>
      of <var>element</var>.

     <li><p>Let <var>x</var> equal <var>x element</var> +
      <var>x offset</var>, and <var>y</var> equal
      <var>y element</var> + <var>y offset</var>.
    </ol>
   </dd>
  </dl>

 <li><p>If <var>x</var> is less than 0 or greater than the width of
  the viewport in <a>CSS pixels</a>, then
  return <a>error</a> with error code <a>move target out of
  bounds</a>.

 <li><p>If <var>y</var> is less than 0 or greater than the height of
  the viewport in <a>CSS pixels</a>, then
  return <a>error</a> with error code <a>move target out of
  bounds</a>.

 <li><p>Let <var>duration</var> be equal to
  <var>action object</var>’s <code>duration</code> property if it
  is not <a>undefined</a>, or <var>tick duration</var>
  otherwise.

 <li><p>If <var>duration</var> is greater than 0 and inside any
  implementation-defined bounds, <a>asynchronously wait</a> for an
  implementation defined amount of time to pass.

  <aside><p>This wait allows the implementation to model the overall
   pointer move as a series of small movements occurring at an
   implementation defined rate (e.g. one movement per
   vsync).</p></aside>
 </li>

 <li><p><a>Perform a pointer move</a> with arguments
  <var>source id</var>, <var>input state</var>, <var>duration</var>,
  <var>start x</var>, <var>start y</var>, <var>x</var>, <var>y</var>.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>

<p>When required to <dfn>perform a pointer move</dfn> with
 arguments <var>source id</var>, <var>input state</var>,
 <var>duration</var>, <var>start x</var>, <var>start y</var>,
 <var>target x</var> and <var>target y</var>, an implementation must
 run the following steps:

<ol>
 <li><p>Let <var>time delta</var> be the time since the beginning of
  the current <a>tick</a>, measured in milliseconds on a monotonic
  clock.

 <li><p>Let <var>duration ratio</var> be the ratio of
  <var>time delta</var> and <var>duration</var>, if <var>duration</var>
  is greater than 0, or 1 otherwise.

 <li><p>If <var>duration ratio</var> is 1, or close enough to 1 that
  the implementation will not further subdivide the move action,
  let <var>last</var> be true. Otherwise let <var>last</var>
  be <code>false</code>.

 <li><p>If <var>last</var> is true, let <var>x</var> equal
  <var>target x</var> and <var>y</var> equal <var>target y</var>.

  <p>Otherwise let <var>x</var> equal an approximation
   to <var>duration ratio</var> &times; (<var>target x</var> -
   <var>start x</var>) + <var>start x</var>, and <var>y</var> equal
   an approximation to <var>duration ratio</var> &times;
   (<var>target y</var> - <var>start y</var>) + <var>start y</var>.

 <li><p>Let <var>current x</var> equal the <code>x</code> property
  of <var>input state</var>.

 <li><p>Let <var>current y</var> equal the <code>y</code> property
  of <var>input state</var>.

 <li><p>If <var>x</var> is not equal to <var>current x</var>
  or <var>y</var> is not equal to <var>current y</var>, run the
  following steps:

  <ol>
   <li><p>Let <var>buttons</var> be equal to input
    state’s <code>buttons</code> property.

   <li><p><a>Perform implementation-specific
    action dispatch steps</a> equivalent to moving the pointer with
    ID <var>source id</var> having type <var>pointerType</var> from
    viewport x coordinate <var>current x</var>, viewport y
    coordinate <var>current y</var> to viewport x coordinate <var>x</var> and
    viewport y coordinate <var>y</var>, with
    buttons <var>buttons</var> depressed, in accordance with the
    requirements of [[UI-EVENTS]] and [[POINTER-EVENTS]]. The
    generated events must set <code>ctrlKey</code>, <code>shiftKey</code>,
    <code>altKey</code>, and <code>metaKey</code> from the
    <a>calculated global key state</a>. Type specific properties for the
    pointer that are not exposed through the WebDriver API must be set to
    the default value specified for hardware that doesn’t support that
    property. In the case where the <var>pointerType</var> is "<code>pen</code>"
    or "<code>touch</code>", and <var>buttons</var> is empty, this may
    be a no-op. For a pointer of type "<code>mouse</code>" this will
    always produce events including at least
    a <code>pointerMove</code> event.

   <li><p>Let <var>input state</var>’s <code>x</code> property
    equal <var>x</var> and <code>y</code> property
    equal <var>y</var>.
  </ol>

 <li><p>If <var>last</var> is true, return.

 <li><p>Run the following substeps <a>in parallel</a>:

  <aside class=note>
   <p>This algorithm may trigger multiple events spread across some
    duration. Parallelism is applied intentionally in order to manage the
    scheduling of these events relative to the events triggered by other
    actions in the same tick.

   <p>The initial pointer movement is performed synchronously. This ensures
    determinism in the sequence of the first event triggered by each action in
    the tick.

   <p>Subsequent movements (if any) are performed asynchronously. This allows
    events from two <a>pointerMove</a> actions in the tick to be interspersed.
  </aside>

 <ol>
   <li><p><a>Asynchronously wait</a> for an implementation defined
    amount of time to pass.

   <aside><p>This wait allows the implementation to model the overall
    pointer move as a series of small movements occurring at an
    implementation defined rate (e.g. one movement per
    vsync).</aside>

   <li><p><a>Perform a pointer move</a> with arguments
    <var>source id</var>, <var>input state</var>, <var>duration</var>,
    <var>start x</var>, <var>start y</var>, <var>target x</var>,
    <var>target y</var>.
 </ol>

</ol>

<p>When required to <dfn>dispatch a pointerCancel action</dfn> with
 arguments <var>source id</var>, <var>action object</var>,
 <var>input state</var> and <var>tick duration</var> a
 <a>remote end</a> must run the following steps:

<ol>
 <li><p><a>Perform implementation-specific
  action dispatch steps</a> equivalent to cancelling the any action of
  the pointer with ID <var>source id</var> having
  type <var>pointerType</var>, in accordance with the requirements of
  [[UI-EVENTS]] and [[POINTER-EVENTS]].

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /pointer-actions -->
</section> <!-- /dispatching-actions -->


<section>
<h3 id=perform-actions><dfn>Perform Actions</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method
  <th>URI Template
 </tr>
 <tr>
  <td>POST
  <td>/session/{<var>session id</var>}/actions
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>Let <var>actions by tick</var> be the result of <a>trying</a>
  to <a>extract an action sequence</a> with
  argument <var>parameters</var>.

 <li><p>If the <a>current browsing context</a> is <a>no longer
  open</a>, return <a>error</a> with <a>error code</a> <a>no such
  window</a>.

 <li><p><a>Handle any user prompts</a>. If this results in
  an <a>error</a>, return that <a>error</a>.

 <li><p><a>Dispatch actions</a> with argument
  <var>actions by tick</var>. If this results in an <a>error</a>
  return that error.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /Perform Actions -->


<section>
<h3 id=release-actions><dfn>Release Actions</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method
  <th>URI Template
 </tr>
 <tr>
  <td>DELETE
  <td>/session/{<var>session id</var>}/actions
 </tr>
</table>

<p class=note>
The <a>Release Actions</a> <a>command</a>
is used to release all the keys and pointer buttons
that are currently depressed.
This causes events to be <a>fired</a>
as if the state was released by an explicit series of actions.
It also clears all the internal state of the virtual devices.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p>Let <var>undo actions</var> be equal to the
  <a>current session</a>’s <a>input cancel list</a> in reverse order.

 <li><p><a>Dispatch tick actions</a> with arguments
  <var>undo actions</var> and duration 0.

 <li><p>Let the <a>current session</a>’s <a>input cancel list</a> be
  an empty <a>List</a>.

 <li><p>Let the <a>current session</a>’s <a>input state table</a> be
  an empty map.

 <li><p>Let the <a>current session</a>’s <a>active input sources</a>
  be an empty <a>list</a>.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section><!-- /Releasing Actions -->
</section><!-- /Actions -->


<section>
<h2 id=user-prompts>User prompts</h2>

<p>This chapter describes interaction with various types of <a>user prompts</a>.
 The common denominator for user prompts is that they are
 modal windows requiring users to interact with them
 before the <a>event loop</a> is <a>unpaused</a>
 and control is returned to the <a>current top-level browsing context</a>.

<p>By default <a>user prompts</a> are not handled automatically
 unless a <a>user prompt handler</a> has been defined.
 When a <a>user prompt</a> appears,
 it is the task of the subsequent <a>command</a> to handle it.
 If the subsequent requested <a>command</a> is not one listed in this chapter,
 an <a>unexpected alert open</a> <a>error</a> will be returned.

<p><a>User prompts</a> that are spawned
 from <a><code>beforeunload</code></a> event handlers,
 are <a>dismissed</a> implicitly upon <a>navigation</a>
 or <a>close window</a>,
 regardless of the defined <a>user prompt handler</a>.

<p>A <a>user prompt</a> has an associated <dfn>user prompt message</dfn>
 that is the string message shown to the user,
 or <a><code>null</code></a> if the message length is <code>0</code>.

<p>The following <dfn>table of simple dialogs</dfn>
 enumerates all supported <a>simple dialogs</a>,
 along with the <a>commands</a> that are allowed to interact with it
 as a non-normative reference:

<table class=simple>
 <tr>
  <th>Definition
  <th>Dialog
  <th>Interactions
 </tr>

 <tr>
  <td><dfn>Alert</dfn>
  <td><a>window.<code>alert</code></a>
  <td>
   <a>Accept Alert</a><br />
   <a>Dismiss Alert</a><br />
   <a>Get Alert Text</a>
 </tr>

 <tr>
  <td><dfn>Confirm</dfn>
  <td><a>window.<code>confirm</code></a>
  <td>
   <a>Dismiss Alert</a><br />
   <a>Accept Alert</a><br />
   <a>Get Alert Text</a>
 </tr>

 <tr>
  <td><dfn>Prompt</dfn>
  <td><a>window.<code>prompt</code></a>
  <td>
   <a>Dismiss Alert</a><br />
   <a>Accept Alert</a><br />
   <a>Get Alert Text</a><br />
   <a>Send Alert Text</a>
 </tr>
</table>

<p>The <dfn>current user prompt</dfn> is said to be the active <a>user prompt</a>,
 which can be one of the entries on the <a>table of simple dialogs</a>.

<p>To <dfn lt="dismissed|dismisses">dismiss</dfn>
 the <a>current user prompt</a>,
 do so as if the user would click the <b>Cancel</b> or <b>OK</b> button,
 whichever is present, in that order.

<p>To <dfn lt="accepting|accepted|accepts">accept</dfn> the <a>current user prompt</a>,
 do so as if the user would click the <b>OK</b> button.

<p>
The <dfn>user prompt handler</dfn> defines what action
the <a>remote end</a> must take when a <a>user prompt</a> is encountered.
This is defined by the <a>unhandled prompt behavior</a> capability.
The following <dfn>known prompt handling approaches table</dfn>
lists the keywords and states for the attribute:

<table class=simple>
 <tr>
  <th>Keyword
  <th>State
  <th>Description
 </tr>

 <tr>
  <td>"<code>dismiss</code>"
  <td><dfn>Dismiss state</dfn>
  <td>All <a>simple dialogs</a> encountered should be <a>dismissed</a>.
 </tr>

 <tr>
  <td>"<code>accept</code>"
  <td><dfn>Accept state</dfn>
  <td>All <a>simple dialogs</a> encountered should be <a>accepted</a>.
 </tr>

 <tr>
  <td>"<code>dismiss and notify</code>"
  <td><dfn>Dismiss and notify state</dfn>
  <td>All <a>simple dialogs</a> encountered should be <a>dismissed</a>,
      and an error returned that the dialog was handled.
 </tr>

 <tr>
  <td>"<code>accept and notify</code>"
  <td><dfn>Accept and notify state</dfn>
  <td>All <a>simple dialogs</a> encountered should be <a>accepted</a>,
      and an error returned that the dialog was handled.
 </tr>

 <tr>
  <td>"<code>ignore</code>"
  <td><dfn>Ignore state</dfn>
  <td>All <a>simple dialogs</a> encountered should be left to the user to handle.
 </tr>
</table>

<p>When required to <dfn>deserialize as an unhandled prompt behavior</dfn> an
argument <var>value</var>:

<ol>
 <li><p>If <var>value</var> is not a <a>string</a> return
  an <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>If <var>value</var> is not present as a <code>keyword</code>
  in the <a>known prompt handling approaches table</a>
  return an <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>Return <a>success</a> with data <var>value</var>.
</ol>

<p>An <dfn>annotated unexpected alert open error</dfn>
 is an <a>error</a> with <a>error code</a> <a>unexpected alert open</a>
 and an optional <a>error data</a> dictionary
 with the following entries:

 <dl>
  <dt>"<code>text</code>"
  <dd>The <a>current user prompt</a>’s
   <a lt="user prompt message">message</a>.
 </dl>

<p>In order to <dfn>handle any user prompts</dfn>
 a <a>remote end</a> must take the following steps:

<ol>
<li><p>
If there is no <a>current user prompt</a>,
abort these steps and return <a>success</a>.

<li><p>
Perform the following substeps
based on the <a>current session</a>’s <a>user prompt handler</a>:

<dl class=switch>
<dt><a>dismiss state</a>
<dd><p><a>Dismiss</a> the <a>current user prompt</a>.

<dt><a>accept state</a>
<dd><p><a>Accept</a> the <a>current user prompt</a>.

<dt><a>dismiss and notify state</a>
<dd>
<ol>
<li><p><a>Dismiss</a> the <a>current user prompt</a>.
<li><p>Return an <a>annotated unexpected alert open error</a>.
</ol>

<dt><a>accept and notify state</a>
<dd>
<ol>
<li><p><a>Accept</a> the <a>current user prompt</a>.
<li><p>Return an <a>annotated unexpected alert open error</a>.
</ol>

<dt><a>ignore state</a>
<dd><p>Return an <a>annotated unexpected alert open error</a>.
</dl>

<li><p>Return <a>success</a>.
</ol>

<aside class=example>
<p>
When returning an <a>error</a> with <a>unexpected alert open</a>,
a <a>remote end</a> may choose to return the <a>user prompt message</a>
as part of an additional "<code>data</code>" <a>Object</a>
on the <a lt="send an error">error representation</a>:

<pre><code>
{
	"error": "unexpected alert open",
	"message": "implementation defined",
	"stacktrace": "",
	"data": {
		"text": "the text from the alert"
	}
}
</code></pre>
</aside>

<section>
<h3 id=dismiss-alert><dfn>Dismiss Alert</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/alert/dismiss</td>
 </tr>
</table>

<p class=note>
The <a>Dismiss Alert</a> <a>command</a>
<a>dismisses</a> a <a>simple dialog</a>
if <a lt="current user prompt">present</a>.
A request to <a>dismiss</a> an <a>alert</a> <a>user prompt</a>,
which may not necessarily have a dismiss button,
has the same effect as <a>accepting</a> it.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p>If there is no <a>current user prompt</a>,
  return <a>error</a> with <a>error code</a> <a>no such alert</a>.

 <li><p><a>Dismiss</a> the <a>current user prompt</a>.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section>

<section>
<h3 id=accept-alert><dfn>Accept Alert</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/alert/accept</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p>If there is no <a>current user prompt</a>,
  return <a>error</a> with <a>error code</a> <a>no such alert</a>.

 <li><p><a>Accept</a> the <a>current user prompt</a>.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section>

<section>
<h3 id=get-alert-text><dfn>Get Alert Text</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/alert/text</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p>If there is no <a>current user prompt</a>,
  return <a>error</a> with <a>error code</a> <a>no such alert</a>.

 <li><p>Let <var>message</var> be the text message
  associated with the <a>current user prompt</a>,
  or otherwise be <a><code>null</code></a>.

 <li><p>Return <a>success</a> with data <var>message</var>.
</ol>
</section>

<section>
<h3 id=send-alert-text><dfn>Send Alert Text</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>POST</td>
  <td>/session/{<var>session id</var>}/alert/text</td>
 </tr>
</table>

<p class=note>
The <a>Send Alert Text</a> <a>command</a>
sets the text field of a <a>window.<code>prompt</code></a>
<a>user prompt</a> to the given value.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>Let <var>text</var> be the result of
  <a>getting the property</a> "<code>text</code>"
  from <var>parameters</var>.

 <li><p>If <var>text</var> is not a <a>String</a>,
  return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p>If there is no <a>current user prompt</a>,
  return <a>error</a> with <a>error code</a> <a>no such alert</a>.

 <li><p>Run the substeps of the first matching
  <a>current user prompt</a>:

  <dl class=switch>
   <dt><a>alert</a>
   <dt><a>confirm</a>
   <dd><p>Return <a>error</a> with
    <a>error code</a> <a>element not interactable</a>.

   <dt><a>prompt</a>
   <dd><p>Do nothing.

   <dt>Otherwise
   <dd><p>Return <a>error</a> with
    <a>error code</a> <a>unsupported operation</a>.
  </dl>

 <li><p>Perform user agent dependent steps
  to set the value of <a>current user prompt</a>’s text field
  to <var>text</var>.

 <li><p>Return <a>success</a> with data <a><code>null</code></a>.
</ol>
</section> <!-- /Send Alert Text -->
</section> <!-- /User prompts -->


<section>
<h2 id=screen-capture>Screen capture</h2>

<p>Screenshots are a mechanism for providing
 additional visual diagnostic information.
 They work by dumping a snapshot of the <a>initial viewport</a>’s
 framebuffer as a lossless PNG image.
 It is returned to the <a>local end</a> as a Base64 encoded string.

<p>WebDriver provides the <a>Take Screenshot</a> <a>command</a>
 to capture the <a>top-level browsing context</a>’s <a>initial viewport</a>,
 and a <a>command</a> <a>Take Element Screenshot</a>
 for doing the same with the visible region of an <a>element</a>’s
 <a>bounding rectangle</a> after it has been <a>scrolled into view</a>.

<p>In order to <dfn>draw a bounding box from the framebuffer</dfn>,
 given a <a>rectangle</a>:

<ol>
 <li><p>If either the <a>initial viewport</a>’s width or height
  is 0 <a>CSS pixels</a>,
  return <a>error</a> with <a>error code</a> <a>unable to capture screen</a>.

 <li><p>Let <var>paint width</var> be the <a>initial viewport</a>’s width –
  <a>min</a>(<a>rectangle x coordinate</a>,
  <a>rectangle x coordinate</a> + <a>rectangle width dimension</a>).

 <li><p>Let <var>paint height</var> be the <a>initial viewport</a>’s height –
  <a>min</a>(<a>rectangle y coordinate</a>,
  <a>rectangle y coordinate</a> + <a>rectangle height dimension</a>).

 <li><p>Let <var>canvas</var> be a new <a><code>canvas</code> element</a>,
  and set its <a lt="canvas width attribute">width</a>
  and <a lt="canvas height attribute">height</a>
  to <var>paint width</var> and <var>paint height</var>, respectively.

 <li><p>Let <var>context</var>, a <a>canvas context mode</a>,
  be the result of invoking the <a>2D context creation algorithm</a>
  given <var>canvas</var> as the target.

 <li><p>Complete implementation specific steps equivalent to
  drawing the region of the framebuffer
  specified by the following coordinates onto <var>context</var>:

  <dl>
   <dt>X coordinate
   <dd><a>rectangle x coordinate</a>

   <dt>Y coordinate
   <dd><a>rectangle y coordinate</a>

   <dt>Width
   <dd><var>paint width</var>

   <dt>Height
   <dd><var>paint height</var>
  </dl>

 <li><p>Return <a>success</a> with <var>canvas</var>.
</ol>

<p>To <dfn lt="encoding a canvas as base64">encode a canvas as
 Base64 a <code>canvas</code> <a>element</a></dfn>:

<ol>
 <li><p>If the <a><code>canvas</code> element</a>’s bitmap’s
  <a>origin-clean</a> flag is set to false,
  return <a>error</a> with <a>error code</a> <a>unable to capture screen</a>.

 <li><p>If the <a><code>canvas</code> element</a>’s bitmap
  has no pixels (i.e. either its horizontal dimension or vertical dimension is zero)
  then return <a>error</a> with <a>error code</a> <a>unable to capture screen</a>.

 <li><p>Let <var>file</var> be
  <a>a serialization of the <code>canvas</code> element’s bitmap as a file</a>,
  using "<code>image/png</code>" as an argument.

 <li><p>Let <var>data url</var> be a <a><code>data:</code> URL</a>
  representing <var>file</var>. [[RFC2397]]

 <li><p>Let <var>index</var> be the <a>index of</a> "<code>,</code>"
  in <var>data url</var>.

 <li><p>Let <var>encoded string</var> be a <a>substring</a>
  of <var>data url</var> using (<var>index</var> + 1) as the <i>start</i> argument.

 <li><p>Return <a>success</a> with data <var>encoded string</var>.
</ol>

<section>
<h3 id=take-screenshot><dfn>Take Screenshot</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method</th>
  <th>URI Template</th>
 </tr>
 <tr>
  <td>GET</td>
  <td>/session/{<var>session id</var>}/screenshot</td>
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p>When the user agent is next to <a>run the animation frame callbacks</a>:
  <ol>
   <li><p>Let <var>root rect</var> be the <a>current top-level browsing context</a>’s
    <a>document element</a>’s <a>rectangle</a>.

   <li><p>Let <var>screenshot result</var> be the result of <a>trying</a> to call
    <a>draw a bounding box from the framebuffer</a>,
    given <var>root rect</var> as an argument.

   <li><p>Let <var>canvas</var> be a <a><code>canvas</code> element</a>
    of <var>screenshot result</var>’s data.

   <li><p>Let <var>encoding result</var> be the result of <a>trying</a>
    <a>encoding a canvas as Base64</a> <var>canvas</var>.

   <li><p>Let <var>encoded string</var> be <var>encoding result</var>’s data.
  </ol>

 <li><p>Return <a>success</a> with data <var>encoded string</var>.
</ol>
</section> <!-- /Take Screenshot -->

<section>
<h3 id=take-element-screenshot><dfn>Take Element Screenshot</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method
  <th>URI Template
 </tr>
 <tr>
  <td>GET
  <td>/session/{<var>session id</var>}/element/{<var>element id</var>}/screenshot
 </tr>
</table>

<p class=note>
The <a>Take Element Screenshot</a> <a>command</a>
takes a screenshot of the visible region encompassed
by the <a>bounding rectangle</a> of an <a>element</a>.
If given a parameter argument <code>scroll</code>
that evaluates to false, the <a>element</a> will not be <a>scrolled into view</a>.

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>Let <var ignore>scroll</var> be the result
  of <a>getting the property</a> <code>scroll</code> from
  <var>parameters</var> if it is not <a>undefined</a>.
  Otherwise let it be true.

 <li><p>If the <a>current browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>element</var> be the result of
  <a>trying</a> to <a>get a known connected element</a>
  with <a>url variable</a> <var>element id</var>.

<li>
  <p><a>Scroll into view</a> the <var>element</var>.

 <li><p>When the user agent is next to <a>run the animation frame callbacks</a>:
  <ol>
   <li><p>Let <var>element rect</var> be <var>element</var>’s
    <a href=https://drafts.fxtf.org/geometry/#rectangle>rectangle</a>.

   <li><p>Let <var>screenshot result</var> be the result
    of <a>trying</a> to call
    <a>draw a bounding box from the framebuffer</a>,
    given <var>element rect</var> as an argument.

   <li><p>Let <var>canvas</var> be a <a><code>canvas</code> element</a>
    of <var>screenshot result</var>’s data.

   <li><p>Let <var>encoding result</var> be the result of <a>trying</a>
    <a>encoding a canvas as Base64</a> <var>canvas</var>.

   <li><p>Let <var>encoded string</var> be <var>encoding result</var>’s data.
  </ol>

 <li><p>Return <a>success</a> with data <var>encoded string</var>.
</ol>
</section> <!-- /Take Element Screenshot -->
</section> <!-- /Screen capture -->

<section>
<h2 id=print>Print</h2>

<p>The print functions are a mechanism to render the document to a
 paginated format. It is returned to the <a>local end</a> as a Base64
 encoded string containing a PDF representation of the paginated
 document.

<p>When required to <dfn>parse a page range</dfn> with
arguments <var>pageRanges</var> and <var>totalPages</var>, an
implementation must:

<ol>
  <li>Let <var>pages</var> be an empty <a>Set</a>

  <li>For each <var>range</var> in <var>pageRanges</var>, run the
  following steps:
    <ol>
      <li>If <var>range</var> is not either a <a>Number</a> or
      a <a>String</a>, return <a>error</a> with <a>error
      code</a> <a>invalid argument</a>.

      <li><p>If <var>range</var> is a <a>Number</a>:
        <ol>
          <li>If <var>range</var> is not an integer or is less than 0,
      return <a>error</a> with <a>error code</a> <a>invalid
      argument</a>

          <li>Append <var>range</var> to <var>pages</var>
        </ol>
      <p>Otherwise:
        <ol>
          <li>Let <var>rangeParts</var> be the result of
          splitting <var>range</var> on a "<code>-</code>" character.

          <li>If <var>rangeParts</var> has fewer than 1 or more than 2
          elements, return <a>error</a> with <a>error code</a> <a>invalid
          argument</a>.

          <li>If rangeParts has one element, append the result
          of <a>trying</a> to <a>parse as an integer</a> the first
          element of <var>rangeParts</var>
          to <var>pages</var>.
            <p>Otherwise:
              <ol>
                <li>If the first element of <var>rangeParts</var>
                  is <a>equivalent to an empty string</a>,
                  let <var>lowerBound</var>
                  be <code>1</code>. Otherwise
                  let <var>lowerBound</var> be the result
                  of <a>trying</a> to <a>parse as an integer</a> the
                  first element of <var>rangeParts</var>.

                <li>If the second element of <var>rangeParts</var>
                  is <a>equivalent to an empty string</a>
                  let <var>upperBound</var>
                  be <var>totalPages</var>. Otherwise
                  let <var>upperBound</var> be the result
                  of <a>trying</a> to <a>parse as an integer</a> the
                  second element of <var>rangeParts</var>.

                <li>If <var>lowerBound</var> is greater
                than <var>upperBound</var>, return <a>error</a>
                with <a>error code</a> <a>invalid argument</a>.

                <li>Append all integers in the inclusive
                range <var>lowerBound</var> to <var>upperBound</var>
                to <var>pages</var>
              </ol>
        </ol>
   <li>Return <a>success</a> with data <var>pages</var>.
</ol>

<p>A <a>String</a> is <dfn>equivalent to an empty string</dfn> if it
has zero length after removing all <a>whitespace</a> characters.

<p>When required to <dfn>parse as an integer</dfn> with
argument <var>input</var> an implementation must:

<ol>
  <li>Let <var>stripped</var> be the result of stripping all leading
  and trailing <a>whitespace</a> characters from <var>input</var>.

  <li>If <var>stripped</var> has zero length, return <a>error</a> with
  status <a>invalid argument</a>.

  <li>If <var>stripped</var> contains any characters outside the
  range <code>U+0030</code> - <code>U+0039</code> (i.e. 0 - 9)
  inclusive, return <a>error</a> with status <a>invalid argument</a>.

  <li>Let <var>output</var> be the result of calling <a>parseInt</a>
  with string <var>stripped</var> and radix <code>10</code>.

  <li>Return <a>success</a> with data <var>output</var>.
</ol>

<section>
<h3 id=print-page><dfn>Print Page</dfn></h3>

<table class="simple jsoncommand">
 <tr>
  <th>HTTP Method
  <th>URI Template
 </tr>
 <tr>
  <td>POST
  <td>/session/{<var>session id</var>}/print
 </tr>
</table>

<p>The <a>remote end steps</a> are:

<ol>
 <li><p>If the <a>current top-level browsing context</a> is <a>no longer open</a>,
  return <a>error</a> with <a>error code</a> <a>no such window</a>.

 <li><p><a>Handle any user prompts</a> and return its value if it is an <a>error</a>.

 <li><p>Let <var>orientation</var> be the result of <a>getting a
  property with default</a> named <code>orientation</code> and with
  default "<code>portrait</code>" from the <var>parameters</var>
  argument.

 <li><p>If <var>orientation</var> is not a <a>String</a> or does not
 have one of the values "<code>landscape</code>" or
 "<code>portrait</code>", return <a>error</a> with <a>error
 code</a> <a>invalid argument</a>.

 <li><p>Let <var>scale</var> be the result of <a>getting a
  property with default</a> named <code>scale</code> and with
  default <code>1</code> from the <var>parameters</var> argument.

 <li><p>If <var>scale</var> is not a <a>Number</a>, or is less
 than <code>0.1</code> or greater than <code>2</code>
 return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>background</var> be the result of <a>getting a
  property with default</a> named <code>background</code> and with
  default <code>false</code> from the <var>parameters</var> argument.

 <li><p>If <var>background</var> is not a <a>Boolean</a>
 return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>page</var> be the result of <a>getting a property
  with default</a> named <code>page</code> and with a default of an
  empty <a>Object</a> from the <var>parameters</var> argument.

 <li><p>Let <var>pageWidth</var> be the result of <a>getting a
  property with default</a> named <code>width</code> and with a
  default of <code>21.59</code> from <var>page</var>.

 <li><p>Let <var>pageHeight</var> be the result of <a>getting a
  property with default</a> named <code>width</code> and with a
  default of <code>27.94</code> from <var>page</var>.

 <li><p>If either of <var>pageWidth</var> or <var>pageHeight</var> is
 not a <a>Number</a>, or is less then 0, return <a>error</a>
 with <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>margin</var> be the result of <a>getting a property
  with default</a> named <code>margin</code> and with a default of an
  empty <a>Object</a> from the <var>parameters</var> argument.

 <li><p>Let <var>marginTop</var> be the result of <a>getting a
  property with default</a> named <code>top</code> and with a
  default of <code>1</code> from <var>margin</var>.

 <li><p>Let <var>marginBottom</var> be the result of <a>getting a
  property with default</a> named <code>bottom</code> and with a
  default of <code>1</code> from <var>margin</var>.

 <li><p>Let <var>marginLeft</var> be the result of <a>getting a
  property with default</a> named <code>left</code> and with a
  default of <code>1</code> from <var>margin</var>.

 <li><p>Let <var>marginRight</var> be the result of <a>getting a
  property with default</a> named <code>right</code> and with a
  default of <code>1</code> from <var>margin</var>.

 <li><p>If any
 of <var>marginTop</var>, <var>marginBottom</var>, <var>marginLeft</var>,
 or <var>marginRight</var> is not a <a>Number</a>, or is less then 0,
 return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>shrinkToFit</var> be the result of <a>getting a
  property with default</a> named <code>shrinkToFit</code> and with
  default <code>true</code> from the <var>parameters</var> argument.

 <li><p>If <var>shrinkToFit</var> is not a <a>Boolean</a>
 return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>Let <var>pageRanges</var> be the result of <a>getting a
  property with default</a> named <code>pageRanges</code> from
  the <var>parameters</var> argument with default of an
  empty <a>Array</a>.

 <li><p>If <var>pageRanges</var> is not an <a>Array</a>
 return <a>error</a> with <a>error code</a> <a>invalid argument</a>.

 <li><p>When the user agent is next to <a>run the animation frame
 callbacks</a>, let <var>pdfData</var> be the result of <a>trying</a>
 to take UA-specific steps to generate a paginated representation of
 the <a>current browsing context</a>, with the CSS <a>media type</a> set
 to <code>print</code>, encoded as a PDF, with the following paper settings:
   <table>
     <tr>
       <th>Property
       <th>Value
     <tr>
       <td>Width in cm
       <td><var>pageWidth</var> if <var>orientation</var> is
         "<code>portrait</code>" otherwise <var>pageHeight</var>
     <tr>
       <td>Height in cm
       <td><var>pageHeight</var> if <var>orientation</var> is
         "<code>portrait</code>" otherwise <var>pageWidth</var>
     <tr>
       <td>Top margin, in cm
       <td><var>marginTop
     <tr>
       <td>Bottom margin, in cm
       <td><var>marginBottom
     <tr>
       <td>Left margin, in cm
       <td><var>marginLeft
     <tr>
       <td>Right margin, in cm
       <td><var>marginRight
   </table>

   <p>In addition, the following formatting hints should be applied by the UA:
     <dl>
       <dt>If <var>scale</var> is not equal to <code>1</code></dt>
       <dd>Zoom the size of the content by a factor <var>scale</var>
       <dt>If <var>background</var> is <code>false</code></dt>
       <dd>Suppress output of background images
       <dt>If <var>shrinkToFit</var> is <code>true</code></dt>
       <dd>Resize the content to match the page width, overriding any
       page width specified in the content
     </dl>

  <li><p>If <var>pageRanges</var> is not an empty <a>Array</a>,
 Let <var>pages</var> be the result of <a>trying</a> to <a>parse a
 page range</a> with arguments <var>pageRanges</var> and the number of
 pages contained in <var>pdfData</var>, then remove any pages
 from <var>pdfData</var> whose one-based index is not contained in
  <var>pages</var>

  <li><p>Let <var>encoding result</var> be the result of
  calling <a>Base64 Encode</a> on <var>pdfData</var>.

  <li><p>Let <var>encoded string</var> be <var>encoding result</var>’s data.

  <li><p>Return <a>success</a> with data <var>encoded string</var>
</section> <!-- /Print Page -->
</section> <!-- /Print -->


<section class=appendix>
<h2 id=privacy>Privacy</h2>

<p>
It is advisable that <a>remote ends</a>
create a new profile when <a lt="new session">creating a new session</a>.
This prevents potentially sensitive session data
from being accessible to new <a>sessions</a>,
ensuring both privacy and preventing state from bleeding through to the next session.
</section>


<section class=appendix>
<h2 id=security>Security</h2>

<p>A user agent can rely on a command-line flag
 or a configuration option
 to test whether to enable WebDriver,
 or alternatively make the user agent initiate
 or confirm the connection through
 a privileged content document or control widget,
 in case the user agent does not
 directly implement the HTTP endpoints.

<p>It is strongly suggested that user agents
 require users to take explicit action to enable WebDriver,
 and that WebDriver remains disabled
 in publicly consumed versions of the user agent.

<p>To prevent arbitrary machines on the network
 from connecting and creating <a>sessions</a>,
 it is suggested that only connections from
 loopback devices are allowed by default.

<p>The <a>remote end</a> can include
 a configuration option to limit
 the accepted IP range allowed to connect and make requests.
 The default setting for this might be
 to limit connections to the IPv4 localhost
 CIDR range <code>127.0.0.0/8</code>
 and the IPv6 localhost address <code>::1</code>. [[RFC4632]]

<p>It is also suggested that user agents
 make an effort to visually distinguish
 a user agent session that is under control of WebDriver
 from those used for normal browsing sessions.
 This can be done through a <a>browser chrome element</a>
 such as a “door hanger”,
 colorful decoration of the OS window,
 or some widget element that is prevalent in the window
 so that it easy to identify automation windows.
</section>


<section class=appendix>
<h2 id=element-displayedness>Element displayedness</h2>

<p>Although WebDriver does not define a primitive
 to ascertain the visibility of an <a>element</a> in the <a>viewport</a>,
 we acknowledge that it is an important feature for many users.
 Here we include a recommended approach
 which will give a simplified approximation of an <a>element</a>’s visibility,
 but please note that it relies only on tree-traversal,
 and only covers a subset of visibility checks.

<p>The visibility of an <a>element</a> is guided
 by what is perceptually visible to the human eye.
 In this context, an <a>element</a>’s displayedness
 does not relate to the <a><code>visibility</code></a>
 or <a><code>display</code></a> style properties.

<p>The approach recommended to implementors to ascertain
 an <a>element</a>’s visibility was originally developed by
 the <a href=https://selenium.dev>Selenium</a> project, and is
 based on crude approximations about an <a>element</a>'s nature and
 relationship in the tree.  An <a>element</a> is in general to be
 considered visible if any part of it is drawn on the canvas within
 the boundaries of the viewport.

<p>The <dfn noexport lt="element displayedness|not displayed">element displayed</dfn> algorithm
 is a boolean state where <code>true</code> signifies that the element is displayed
 and <code>false</code> signifies that the element is not displayed.
 To compute the state on <var>element</var>,
 invoke the <a>Call</a>(<a><code>bot.dom.isShown</code></a>,
 <a><code>null</code></a>, <var>element</var>).
 If doing so does not produce an error,
 return the return value from this function call.
 Otherwise return an <a>error</a> with <a>error code</a> <a>unknown error</a>.

<p>This function is typically exposed to <code>GET</code> requests
 with a <a>URI Template</a> of
 <code>/session/{session id}/element/{element id}/displayed</code>.
</section> <!-- /Element displayedness -->


<section class=appendix>
<h2 id=acknowledgements>Acknowledgements</h2>

<p>
There have been a lot of people that have helped make
<a href=#abstract>browser automation</a> possible over the years
and thereby furthered the goals of this standard.
In particular, thanks goes to the
<a href=https://selenium.dev>Selenium</a> Open Source community,
without which this standard would never have been possible.

<p>
This standard is authored by

<!-- ~~~ run sort(1) on this ~~~ -->

<!-- Aleksey Chemakin --> Aleksey Chemakin,
<!-- Andreas Tolfsen --> <a href=https://sny.no/>Andreas Tolfsen</a>,
<!-- Andrey Botalov --> Andrey Botalov,
<!-- Brian Burg --> Brian Burg,
<!-- Christian Bromann --> Christian Bromann,
<!-- Clayton Martin --> Clayton Martin,
<!-- Daniel Wagner-Hall --> Daniel Wagner-Hall,
<!-- David Burns --> <a href=http://www.theautomatedtester.co.uk/>David Burns</a>,
<!-- Dominique Hazael-Massieux --> Dominique Hazael-Massieux,
<!-- Eran Messeri --> Eran Messeri,
<!-- Erik Wilde --> Erik Wilde,
<!-- Gábor Csárdi --> Gábor Csárdi,
<!-- Henrik Skupin --> Henrik Skupin,
<!-- James Graham --> James Graham,
<!-- Jason Juang --> Jason Juang,
<!-- Jason Leyba --> Jason Leyba,
<!-- Jim Evans --> Jim Evans,
<!-- John Chen --> John Chen,
<!-- John Jansen --> John Jansen,
<!-- Jonathan Lipps --> Jonathan Lipps,
<!-- Jonathon Kereliuk --> Jonathon Kereliuk,
<!-- Luke Inman-Semerau --> Luke Inman-Semerau,
<!-- Maja Frydrychowicz --> <a href=https://www.erranderr.com/>Maja Frydrychowicz</a>,
<!-- Malini Das --> Malini Das,
<!-- Manoj Kumar --> Manoj Kumar,
<!-- Marc Fisher --> Marc Fisher,
<!-- Mike Pennisi --> Mike Pennisi,
<!-- Ondřej Machulda --> Ondřej Machulda,
<!-- Randall Kent --> Randall Kent,
<!-- Sam Sneddon --> Sam Sneddon,
<!-- Seva Lotoshnikov --> Seva Lotoshnikov,
<!-- Simon Stewart --> <a href=http://www.rocketpoweredjetpants.com/>Simon Stewart</a>,
<!-- Titus Fortner --> Titus Fortner,
<!-- Vangelis Katsikaros --> and Vangelis Katsikaros.

<!-- ~~~ end sort ~~~ -->

The work is coordinated and edited by
<a href=http://www.theautomatedtester.co.uk/>David Burns</a>
and <a href=http://www.rocketpoweredjetpants.com/>Simon Stewart</a>.

<p>
Thanks to
Berge Schwebs Bjørlo,
Lukas Tetzlaff,
Malcolm Rowe,
Michael[tm] Smith,
Nathan Bloomfield,
Philippe Le Hégaret,
Robin Berjon,
Ross Patterson,
and Wilhelm Joys Andersen
for proofreading and suggesting areas for improvement.
</section>

<section noexport>
<h2 id=index>Index</h2>

<p>
This specification relies on several other underlying specifications.

<!--
Each item in the list begins with a comment
with term described using the characters [a-zA-Z].
This is so that the list items can be piped through sort(1)
to automatically sort each list alphabetically.
-->

<dl>
 <dt>ARIA and related specifications
 <dd>
   <p>The following terms are defined
     in the Accessible Rich Internet Applications (WAI-ARIA) 1.2 specification: [[wai-aria-1.2]]
     <ul>
       <li><dfn><a href="https://w3c.github.io/aria/#introroles">WAI-ARIA role</a></dfn>
     </ul>

  <dd>
    <p>The following terms are defined
      in the Accessible Name and Description Computation 1.1 specification: [[accname-1.1]]
      <ul>
        <li><dfn><a href="https://www.w3.org/TR/accname-1.1/#dfn-accessible-name">Accessible Name</a></dfn>
        <li><dfn><a href="https://www.w3.org/TR/accname-1.1/#mapping_additional_nd_te">Accessible
              Name and Description Computation</a></dfn>
      </ul>

 <dt>Web App Security
 <dd><p>The following terms are defined
  in the Content Security Policy Level 3 specification: [[CSP3]]
  <ul>
   <li><dfn><a href="https://www.w3.org/TR/CSP/#directives">Directives</a></dfn>
   <li><dfn lt="blocked by content security policy"><a href=https://w3c.github.io/webappsec-csp/#should-block-navigation-response>Should block navigation response</a></dfn>
  </ul>

 <dt>Base16, Base32, and Base64 Data Encodings
 <dd><p>The following terms are defined
  in The Base16, Base32, and Base64 Data Encodings specification: [[RFC4648]]
  <ul>
   <!-- Base64 Encode --> <li><dfn><a href=https://tools.ietf.org/html/rfc4648#section-4>Base64 Encode</a></dfn>
  </ul>


 <dt>DOM
 <dd><p>The following terms are defined
  in the Document Object Model specification: [[DOM]]
  <ul>
   <!-- Attribute --> <li><dfn><a href=https://dom.spec.whatwg.org/#concept-attribute>Attribute</a></dfn>
   <!-- comapreDocumentPosition --> <li><dfn><a href=https://dom.spec.whatwg.org/#dom-node-comparedocumentposition>compareDocumentPosition</a></dfn>
   <!-- connected --> <li><dfn><a href=https://dom.spec.whatwg.org/#connected>connected</a></dfn>
   <!-- context object --><li><dfn><a href="https://dom.spec.whatwg.org/#context-object">context object</a></dfn>
   <!-- Descendant --> <li><dfn><a href=https://dom.spec.whatwg.org/#concept-tree-descendant>Descendant</a></dfn>
   <!-- Document element --> <li><dfn><a href=https://dom.spec.whatwg.org/#document-element>Document element</a></dfn>
   <!-- Document --> <li><dfn><a href=https://dom.spec.whatwg.org/#concept-document>Document</a></dfn>
   <!-- DOCUMENT_POSITION_DISCONNECTED --> <li><dfn><a href=https://dom.spec.whatwg.org/#dom-node-document_position_disconnected>DOCUMENT_POSITION_DISCONNECTED</a></dfn> (1)
   <!-- Document type --> <li><dfn><a href=https://dom.spec.whatwg.org/#concept-document-type>Document type</a></dfn>
   <!-- Document URL --> <li><dfn><a href=https://dom.spec.whatwg.org/#concept-document-url>Document URL</a></dfn>
   <!-- Element --> <li><dfn lt=elements><a href=https://dom.spec.whatwg.org/#concept-element>Element</a></dfn>
   <!-- Equals --> <li><dfn><a href=https://dom.spec.whatwg.org/#concept-node-equals>Equals</a></dfn>
   <!-- Event --> <li><dfn><a href=https://dom.spec.whatwg.org/#event>Event</a></dfn>
   <!-- Fire an event --> <li><dfn lt="fire|fires|fired|event fires|event fired|event firing"><a href=https://dom.spec.whatwg.org/#concept-event-fire>Fire an event</a></dfn>
   <!-- Get an attribute by name --> <li><dfn lt="getting an attribute by name"><a href=https://dom.spec.whatwg.org/#concept-element-attributes-get-by-name>Get an attribute by name</a></dfn>
   <!-- getAttribute --> <li><dfn><a href=https://dom.spec.whatwg.org/#dom-element-getattribute>getAttribute</a></dfn>
   <!-- getElementsByTagName --> <li><dfn><a href="https://dom.spec.whatwg.org/#dom-element-getelementsbytagname"><code>getElementsByTagName</code></a></dfn>
   <!-- hasAttribute --> <li><dfn lt="has the attribute|hasAttribute"><a href=https://dom.spec.whatwg.org/#dom-element-hasattribute>hasAttribute</a></dfn>
   <!-- HTMLCollection --> <li><dfn><a href=https://dom.spec.whatwg.org/#htmlcollection><code>HTMLCollection</code></a></dfn>
   <!-- Inclusive descendant --> <li><dfn><a href=https://dom.spec.whatwg.org/#concept-tree-inclusive-descendant>Inclusive descendant</a></dfn>
   <!-- isTrusted --> <li><dfn lt='is trusted|isTrusted'><a href="https://dom.spec.whatwg.org/#dom-event-istrusted"><code>isTrusted</code></a></dfn>
   <!-- Node document --> <li><dfn><a href=https://dom.spec.whatwg.org/#concept-node-document>Node document</a></dfn>
   <!-- Node length --> <li><dfn><a href="https://dom.spec.whatwg.org/#concept-node-length">Node Length</a></dfn>
   <!-- Node --> <li><dfn><a href=https://dom.spec.whatwg.org/#concept-node>Node</a></dfn>
   <!-- NodeList --> <li><dfn><a href=https://dom.spec.whatwg.org/#nodelist><code>NodeList</code></a></dfn>
   <!-- querySelectorAll --> <li><dfn><a href="https://dom.spec.whatwg.org/#dom-parentnode-queryselectorall"><code>querySelectorAll</code></a></dfn>
   <!-- querySelector --> <li><dfn><a href="https://dom.spec.whatwg.org/#dom-parentnode-queryselector"><code>querySelector</code></a></dfn>
   <!-- tagName --> <li><dfn><a href=https://dom.spec.whatwg.org/#dom-element-tagname>tagName</a></dfn>
   <!-- Text node --> <li><dfn><a href=https://dom.spec.whatwg.org/#text><code>Text</code> node</a></dfn>
  </ul>

 <dd><p>The following attributes are defined
  in the Document Object Model specification: [[DOM]]
  <ul>
   <!-- textContent attribute --> <li><dfn lt=textContent><a href=https://dom.spec.whatwg.org/#dom-node-textcontent><code>textContent</code> attribute</a></dfn>
  </ul>

 <dd><p>The following terms are defined in
  the DOM Parsing and Serialization specification: [[DOM-PARSING]]
  <ul>
   <!-- fragment serializing algorithm --> <li><dfn><a href="https://w3c.github.io/DOM-Parsing/#dfn-fragment-serializing-algorithm">fragment serializing algorithm</a></dfn>
   <!-- innerHTML IDL Attribute--> <li><dfn><a href=https://w3c.github.io/DOM-Parsing/#dom-innerhtml-innerhtml><code>innerHTML</code> IDL attribute</a></dfn>
   <!-- outerHTML IDL Attribute--> <li><dfn><a href=https://w3c.github.io/DOM-Parsing/#dom-element-outerhtml><code>outerHTML</code> IDL attribute</a></dfn>
   <!-- serializeToString --> <li><dfn lt="serializing to string"><a href=https://w3c.github.io/DOM-Parsing/#dom-xmlserializer-serializetostring><code>serializeToString</code> method</a></dfn>
  </ul>

 <dd><p>The following attributes are defined
  in the UI Events specification: [[UI-EVENTS]]
  <ul>
   <!-- Activation trigger --> <li><dfn><a href=https://w3c.github.io/uievents/#activation-trigger>Activation trigger</a></dfn>
   <!-- click event --> <li><dfn><a href="https://w3c.github.io/uievents/#event-type-click">click event</a></dfn>
   <!-- Keyboard Event --> <li><dfn><a href=https://w3c.github.io/uievents/#keyboardevent>Keyboard event</a></dfn>
   <!-- Keyboard event order --> <li><dfn><a href=https://w3c.github.io/uievents/#events-keyboard-event-order>Keyboard event order</a></dfn>
   <!-- keyDown event --> <li><dfn lt="keyDown-Event"><a href=https://w3c.github.io/uievents/#event-type-keydown>keyDown event</a></dfn>
   <!-- keyPress event --> <li><dfn lt="keyPress-Event"><a href=https://w3c.github.io/uievents/#event-type-keypress>keyPress event</a></dfn>
   <!-- keyUp event --> <li><dfn lt="keyUp-Event"><a href=https://w3c.github.io/uievents/#event-type-keyup>keyUp event</a></dfn>
   <!-- mouseDown event --> <li><dfn><a href=https://w3c.github.io/uievents/#event-type-mousedown>mouseDown event</a></dfn>
   <!-- Mouse event --> <li><dfn><a href=https://w3c.github.io/uievents/#mouseevent>Mouse event</a></dfn>
   <!-- Mouse event order --> <li><dfn><a href=https://w3c.github.io/uievents/#events-mouseevent-event-order>Mouse event order</a></dfn>
   <!-- mouseMove event --> <li><dfn><a href="https://w3c.github.io/uievents/#event-type-mousemove">mouseMove event</a></dfn>
   <!-- mouseOver event --> <li><dfn><a href="https://w3c.github.io/uievents/#event-type-mouseover">mouseOver event</a></dfn>
   <!-- mouseUp event --> <li><dfn><a href=https://w3c.github.io/uievents/#event-type-mouseup>mouseUp event</a></dfn>
  </ul>

 <dd><p>The following attributes are defined
  in the UI Events Code specification: [[UIEVENTS-CODE]]
  <ul>
   <li><dfn lt="keyboard event code"><a href=https://www.w3.org/TR/uievents-code/#code-value-tables>Keyboard event code tables</a></dfn>
  </ul>

 <dd><p>The following attributes are defined
  in the UI Events Code specification: [[UIEVENTS-KEY]]
  <ul>
   <li><dfn lt="modifier key"><a href=https://www.w3.org/TR/uievents-key/#keys-modifier>Keyboard modifier keys</a></dfn>
  </ul>

 <dt>ECMAScript
 <dd><p>The following terms are defined in the ECMAScript Language Specification: [[ECMA-262]]
  <ul>
    <!-- Iterable --> <li><dfn><a href=https://tc39.github.io/ecma262/#sec-iterable-interface>Iterable</a></dfn>
   <!-- Completion --> <li><dfn><a href="https://tc39.github.io/ecma262/#sec-completion-record-specification-type">Completion</a></dfn>
   <!-- CreateResolvingFunctions --> <li><dfn><a href=https://tc39.github.io/ecma262/#sec-createresolvingfunctions>CreateResolvingFunctions</a></dfn>
   <!-- Directive prologue --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-14.1>Directive prologue</a></dfn>
   <!-- Early error --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-16>Early error</a></dfn>
   <!-- Function --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-4.3.24>Function</a></dfn>
   <!-- FunctionBody --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-13>FunctionBody</a></dfn>
   <!-- FunctionCreate --> <li><dfn><a href=https://tc39.github.io/ecma262/#sec-functioncreate>FunctionCreate</a></dfn>
   <!-- Get --> <li><dfn><a href=https://tc39.github.io/ecma262/#sec-get-o-p>Get</a></dfn>
   <!-- Global environment --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-10.2.3>Global environment</a></dfn>
   <!-- IsCallable --> <li><dfn><a href=https://tc39.github.io/ecma262/#sec-iscallable>IsCallable</a></dfn>
   <!-- Own property --> <li><dfn lt="own properties"><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-4.3.30>Own property</a></dfn>
   <!-- Promise --> <li><dfn><a href=https://tc39.github.io/ecma262/#sec-promise-constructor>Promise</a></dfn>
   <!-- PromiseResolve --> <li><dfn><a href=https://tc39.github.io/ecma262/#sec-promise-resolve>PromiseResolve</a></dfn>
   <!-- Type --> <li><dfn lt="ecmascript type"><a href=https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values>Type</a></dfn>
   <!-- Use strict directive --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-14.1>Use strict directive</a></dfn>
   <!-- parseInt --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.2>parseInt</a></dfn>
   <!-- parseFloat --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.3>parseFloat</a></dfn>
   <!-- realm --> <li><dfn><a href="https://tc39.github.io/ecma262/#sec-code-realms">realm</a></dfn>
  </ul>

 <dd>This specification also presumes that you are able to call
  some of the <dfn lt="internal method"><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2>internal methods</a></dfn>
  from the ECMAScript Language Specification:
  <ul>
   <!-- Call --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-13.2.1>Call</a></dfn>
   <!-- Class --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2>\[[Class]]</a></dfn>
   <!-- GetOwnProperty --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-8.12.1>\[[GetOwnProperty]]</a></dfn>
   <!-- GetProperty --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-8.12.2>\[[GetProperty]]</a></dfn>
   <!-- Index of --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.7>Index of</a></dfn>
   <!-- Put --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-8.12.5>\[[Put]]</a></dfn>
   <!-- Substring --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.15>Substring</a></dfn>
  </ul>

 <dd>The ECMAScript Language Specification also defines the following
  types, values, and operations that are used throughout this
  specification:
  <ul>
   <!-- Array --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-11.1.4>Array</a></dfn>
   <!-- Boolean type --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-4.3.14>Boolean</a></dfn> type
   <!-- List --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-8.8>List</a></dfn>
   <!-- Max Safe Integer --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer>maximum safe integer</a></dfn>
   <!-- null --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-4.3.11><code>null</code></a></dfn>
   <!-- Number --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-4.3.19>Number</a></dfn>
   <!-- Object --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-4.2.1>Object</a></dfn>
   <!-- Parse --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-15.12.2>\[[Parse]]</a></dfn>
   <!-- String --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-4.3.18>String</a></dfn>
   <!-- Stringify --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-15.12.3>\[[Stringify]]</a></dfn>
   <!-- ToInteger --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/6.0/#sec-tointeger>ToInteger</a></dfn>
   <!-- undefined --> <li><dfn><a href=https://www.ecma-international.org/ecma-262/5.1/#sec-4.3.9>Undefined</a></dfn>
  </ul>

 <dt>Encoding
 <dd><p>The following terms are defined in the WHATWG Encoding specification: [[ENCODING]]
  <ul>
   <!-- UTF-8 Encode --> <li><dfn><a href="https://encoding.spec.whatwg.org/#utf-8-encode">UTF-8 Encode</a></dfn>
  </ul>

 <dt>Fetch
 <dd><p>The following terms are defined in the WHATWG Fetch specification: [[FETCH]]
  <ul>
   <!-- Body --> <li><dfn><a href=https://fetch.spec.whatwg.org/#concept-request-body>Body</a></dfn>
   <!-- Header --> <li><dfn><a href="https://fetch.spec.whatwg.org/#concept-header">Header</a></dfn>
   <!-- Header Name --> <li><dfn><a href="https://fetch.spec.whatwg.org/#concept-header-name">Header Name</a></dfn>
   <!-- Header Value --> <li><dfn><a href="https://fetch.spec.whatwg.org/#concept-header-value">Header Value</a></dfn>
   <!-- Local Scheme --> <li><dfn><a href="https://fetch.spec.whatwg.org/#local-scheme">Local scheme</a></dfn>
   <!-- Method --> <li><dfn><a href=https://fetch.spec.whatwg.org/#concept-request-method>Method</a></dfn>
   <!-- Response --> <li><dfn lt="http response|response"><a href=https://fetch.spec.whatwg.org/#concept-response>Response</a></dfn>
   <!-- Request --> <li><dfn lt="http request|request"><a href=https://fetch.spec.whatwg.org/#concept-request>Request</a></dfn>
   <!-- Set Header --> <li><dfn><a href="https://fetch.spec.whatwg.org/#concept-header-list-set">Set Header</a></dfn>
   <!-- Status --> <li><dfn><a href=https://fetch.spec.whatwg.org/#concept-response-status>HTTP Status</a></dfn>
   <!-- Status message --> <li><dfn><a href=https://fetch.spec.whatwg.org/#concept-response-status-message>Status message</a></dfn>
  </ul>

 <dt>File
 <dd><p>The following interfaces are defined in the W3C File API specification: [[FILEAPI]]
  <ul>
   <!-- FileList --> <li><dfn><a href=https://w3c.github.io/FileAPI/#dfn-filelist><code>FileList</code></a></dfn>
  </ul>

 <dt>Fullscreen
 <dd><p>The following terms are defined in the WHATWG Fullscreen specification: [[FULLSCREEN]]
   <ul>
     <!-- Fullscreen element --> <li><dfn><a href="https://fullscreen.spec.whatwg.org/#fullscreen-element">Fullscreen element</a></dfn>
     <!-- Fullscreen an element --> <li><dfn><a href="https://fullscreen.spec.whatwg.org/#fullscreen-an-element">Fullscreen an element</a></dfn>
     <!-- Fullscreen is supported --> <li><dfn  lt='support fullscreen'><a href="https://fullscreen.spec.whatwg.org/#fullscreen-is-supported">Fullscreen is supported</a></dfn>
     <!-- Fully exit fullscreen --> <li><dfn><a href="https://fullscreen.spec.whatwg.org/#fully-exit-fullscreen">fully exit fullscreen</a></dfn>
     <!-- Unfullscreen a document --> <li><dfn><a href="https://fullscreen.spec.whatwg.org/#unfullscreen-a-document">unfullscreen a document</a></dfn>
   </ul>

 <dt>HTML
 <dd><p>The following terms are defined in the HTML specification: [[HTML]]
  <ul>
   <!-- 2D context creation algorithm --> <li><dfn><a href=https://html.spec.whatwg.org/#2d-context-creation-algorithm>2D context creation algorithm</a></dfn>
   <!-- A browsing context is discarded --> <li><dfn lt=discarded><a href=https://html.spec.whatwg.org/#a-browsing-context-is-discarded>A browsing context is discarded</a></dfn>
   <!-- A serialization of the bitmap as a file --> <li><dfn lt="a serialization of the canvas element’s bitmap as a file"><a href=https://html.spec.whatwg.org/#a-serialisation-of-the-bitmap-as-a-file>A serialization of the bitmap as a file</a></dfn>
   <!-- API length --> <li><dfn><a href="https://html.spec.whatwg.org/#concept-fe-api-value">API value</a></dfn>
   <!-- Active document --> <li><dfn><a href=https://html.spec.whatwg.org/#active-document>Active document</a></dfn>
   <!-- Active element --> <li><dfn>Active element</dfn> being the <a href=https://html.spec.whatwg.org/#dom-document-activeelement><code>activeElement</code></a> attribute on <a href=https://html.spec.whatwg.org/#document><code>Document</code></a>
   <!-- Associated window --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-document-window>Associated window</a></dfn>
   <!-- Body element --> <li><dfn><a href=https://html.spec.whatwg.org/#the-body-element><code>body</code> element</a></dfn>
   <!-- Boolean attribute --> <li><dfn><a href=https://html.spec.whatwg.org/#boolean-attribute>Boolean attribute</a></dfn>
   <!-- Browsing context --> <li><dfn lt="browsing contexts"><a href=https://html.spec.whatwg.org/#browsing-context>Browsing context</a></dfn>
   <!-- Button --> <li><dfn><a href="https://html.spec.whatwg.org/#button-state-%28type=button%29">Button</a></dfn> state
   <!-- Buttons --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-button>Buttons</a></dfn>
   <!-- Candidate for constraint validation --> <li><dfn><a href=https://html.spec.whatwg.org/#candidate-for-constraint-validation>Candidate for constraint validation</a></dfn>
   <!-- Canvas context mode --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-canvas-context-mode>Canvas context mode</a></dfn>
   <!-- Checkbox --> <li><dfn><a href="https://html.spec.whatwg.org/#checkbox-state-%28type=checkbox%29">Checkbox</a></dfn> state
   <!-- Checkedness --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-fe-checked>Checkedness</a></dfn>
   <!-- Child browsing context --> <li><dfn><a href=https://html.spec.whatwg.org/#child-browsing-context>Child browsing context</a></dfn>
   <!-- Clean up after running a callback --> <li><dfn><a href="https://html.spec.whatwg.org/#clean-up-after-running-a-callback">Clean up after running a callback</a></dfn>
   <!-- Clean up after running a script --> <li><dfn><a href="https://html.spec.whatwg.org/#clean-up-after-running-script">Clean up after running a script</a></dfn>
   <!-- Close a browsing context --> <li><dfn lt="close|closes"><a href=https://html.spec.whatwg.org/#close-a-browsing-context>Close a browsing context</a></dfn>
   <!-- Code entry-point --> <li><dfn><a href=https://html.spec.whatwg.org/#code-entry-point>Code entry-point</a></dfn>
   <!-- Cookie-averse Document object --> <li><dfn><a href=https://html.spec.whatwg.org/#cookie-averse-document-object>Cookie-averse <code>Document</code> object</a></dfn>
   <!-- Current entry --> <li><dfn><a href=https://html.spec.whatwg.org/#current-entry>Current entry</a></dfn>
   <!-- Dirty checkedness flag --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-input-checked-dirty-flag>Dirty checkedness flag</a></dfn>
   <!-- Dirty value flag --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-fe-dirty>Dirty value flag</a></dfn>
   <!-- Disabled --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-fe-disabled>Disabled</a></dfn>
   <!-- Document address --> <li><dfn lt=address><a href=https://dom.spec.whatwg.org/#concept-document-url>Document address</a></dfn>
   <!-- Document readiness --> <li><dfn><a href=https://html.spec.whatwg.org/#current-document-readiness>Document readiness</a></dfn>
   <!-- Document title --> <li><dfn lt="title|document title"><a href=https://html.spec.whatwg.org/#document.title>Document title</a></dfn>
   <!-- Element contexts --> <li><dfn lt="element context"><a href=https://html.spec.whatwg.org/#concept-element-contexts>Element contexts</a></dfn>
   <!-- Enumerated attribute --> <li><dfn><a href=https://html.spec.whatwg.org/#enumerated-attribute>Enumerated attribute</a></dfn>
   <!-- Environment settings object --> <li><dfn><a href=https://html.spec.whatwg.org/#environment-settings-object>Environment settings object</a></dfn>
   <!-- Event loop --> <li><dfn><a href=https://html.spec.whatwg.org/#event-loop>Event loop</a></dfn>
   <!-- File --> <li><dfn><a href="https://html.spec.whatwg.org/#file-upload-state-%28type=file%29">File</a></dfn> state
   <!-- File upload state --> <li><dfn><a href="https://html.spec.whatwg.org/#file-upload-state-(type=file)">File upload state</a></dfn>
   <!-- Focusing steps --> <li><dfn><a href="https://html.spec.whatwg.org/#focusing-steps">Focusing steps</a></dfn>
   <!-- Fousable area --><li><dfn><a href=https://html.spec.whatwg.org/#focusable-area>Focusable area</a></dfn>
   <!-- GetOwnProperty of a Window object --> <li><dfn lt="window.\[[getOwnProperty]]"><a href=https://html.spec.whatwg.org/#windowproxy-getownproperty><code>\[[GetOwnProperty]]</code> of a <code>Window</code> object</a></dfn>
   <!-- HTMLAllCollection --> <li><dfn><a href=https://html.spec.whatwg.org/#htmlallcollection><code>HTMLAllCollection</code></a></dfn>
   <!-- HTMLFormControlCollection --> <li><dfn><a href=https://html.spec.whatwg.org/#htmlformcontrolscollection><code>HTMLFormControlsCollection</code></a></dfn>
   <!-- HTMLOptionsCollection --> <li><dfn><a href=https://html.spec.whatwg.org/#htmloptionscollection><code>HTMLOptionsCollection</code></a></dfn>
   <!-- Hidden --> <li><dfn><a href="https://html.spec.whatwg.org/#hidden-state-%28type=hidden%29">Hidden</a></dfn> state
   <!-- Image Button --> <li><dfn><a href="https://html.spec.whatwg.org/#image-button-state-%28type=image%29">Image Button</a></dfn> state
   <!-- In parallel --> <li><dfn><a href="https://html.spec.whatwg.org/#in-parallel">In parallel</a></dfn>
   <!-- Input event applies --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-input-apply><code>input</code> event applies</a></dfn>
   <!-- Input type file selected --> <li><dfn><a href="https://html.spec.whatwg.org/#concept-input-type-file-selected">Selected Files</a></dfn>
   <!-- Joint session history --> <li><dfn><a href=https://html.spec.whatwg.org/#joint-session-history>Joint session history</a></dfn>
   <!-- Mature (navigation) --> <li><dfn lt="matured"><a href=https://html.spec.whatwg.org/#concept-navigate-mature>Mature</a></dfn> navigation.
   <!-- Missing value default state --> <li><dfn><a href=https://html.spec.whatwg.org/#missing-value-default>Missing value default state</a></dfn>
   <!-- Mutable --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-fe-mutable>Mutable</a></dfn>
   <!-- Navigate --> <li><dfn lt="navigating|navigation"><a href=https://html.spec.whatwg.org/#navigate>Navigate</a></dfn>
   <!-- Navigator --> <li><dfn lt="navigator"><a href=https://html.spec.whatwg.org/#navigator>Navigator object</a></dfn>
   <!-- Nested browsing context --> <li><dfn><a href=https://html.spec.whatwg.org/#nested-browsing-context>Nested browsing context</a></dfn>
   <!-- Origin-clean --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-canvas-origin-clean>Origin-clean</a></dfn>
   <!-- Overridden reload --> <li><dfn><a href="https://html.spec.whatwg.org/multipage/dom.html#an-overridden-reload">An overridden reload</a></dfn>
   <!-- Parent browsing context --> <li><dfn><a href=https://html.spec.whatwg.org/#parent-browsing-context>Parent browsing context</a></dfn>
   <!-- Pause --> <li><dfn lt=unpaused><a href=https://html.spec.whatwg.org/#pause>HTML Pause</a></dfn>
   <!-- Prepare to run a callback --> <li><dfn><a href="https://html.spec.whatwg.org/#prepare-to-run-a-callback">Prepare to run a callback</a></dfn>
   <!-- Prepare to run a script --> <li><dfn><a href="https://html.spec.whatwg.org/#prepare-to-run-script">Prepare to run a script</a></dfn>
   <!-- Prompt to unload a document --> <li><dfn lt="prompting to unload"><a href=https://html.spec.whatwg.org/#prompt-to-unload-a-document>Prompt to unload a document</a></dfn>
   <!-- Radio button --> <li><dfn><a href="https://html.spec.whatwg.org/#radio-button-state-%28type=radio%29">Radio Button</a></dfn> state
   <!-- Raw value --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-textarea-raw-value>Raw value</a></dfn>
   <!-- Refresh state pragma directive --> <li><dfn><a href=https://html.spec.whatwg.org/#attr-meta-http-equiv-refresh>Refresh state pragma directive</a></dfn>
   <!-- Reset algorithm --> <li><dfn lt="reset algorithms"><a href=https://html.spec.whatwg.org/#concept-form-reset-control>Reset algorithm</a></dfn>
   <!-- Resettable element --> <li><dfn lt="resettable elements|resettable"><a href=https://html.spec.whatwg.org/#category-reset>Resettable element</a></dfn>
   <!-- Run the animation frame callbacks --> <li><dfn><a href="https://html.spec.whatwg.org/multipage/imagebitmap-and-animations.html#run-the-animation-frame-callbacks">Run the animation frame callbacks</a></dfn>
   <!-- Satisfies its constraints --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-fv-valid>Satisfies its constraints</a></dfn>
   <!-- Script --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-script>Script</a></dfn>
   <!-- Script execution environment --> <li><dfn><a href=https://html.spec.whatwg.org/#environment>Script execution environment</a></dfn>
   <!-- Selectedness --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-option-selectedness>Selectedness</a></dfn>
   <!-- Session history --> <li><dfn><a href=https://html.spec.whatwg.org/#session-history>Session history</a></dfn>
   <!-- Settings object --> <li><dfn><a href=https://html.spec.whatwg.org/#settings-object>Settings object</a></dfn>
   <!-- Simple dialogs --> <li><dfn lt="simple dialog"><a href=https://html.spec.whatwg.org/#simple-dialogs>Simple dialogs</a></dfn>
   <!-- Submit Button --> <li><dfn><a href="https://html.spec.whatwg.org/#submit-button-state-%28type=submit%29">Submit Button</a></dfn> state
   <!-- Submittable elements --> <li><dfn lt="submittable element"><a href=https://html.spec.whatwg.org/#category-submit>Submittable elements</a></dfn>
   <!-- Suffering from bad input --> <li><dfn><a href=https://html.spec.whatwg.org/#suffering-from-bad-input>Suffering from bad input</a></dfn>
   <!-- Top-level browsing context --> <li><dfn lt="top-level browsing contexts"><a href=https://html.spec.whatwg.org/#top-level-browsing-context>Top-level browsing context</a></dfn>
   <!-- Traverse the history --> <li><dfn lt="traversing the history"><a href=https://html.spec.whatwg.org/#traverse-the-history>Traverse the history</a></dfn>
   <!-- Traverse the history by a delta --> <li><dfn><a href=https://html.spec.whatwg.org/#traverse-the-history-by-a-delta>Traverse the history by a delta</a></dfn>
   <!-- Tree order --> <li><dfn><a href=https://html.spec.whatwg.org/#tree-order>Tree order</a></dfn>
   <!-- Unfocusing steps --><li><dfn><a href=https://html.spec.whatwg.org/#unfocusing-steps>unfocusing steps</a></dfn>
   <!-- User prompt --> <li><dfn lt="user prompts"><a href=https://html.spec.whatwg.org/#user-prompts>User prompt</a></dfn>
   <!-- Value --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-fe-value>Value</a></dfn>
   <!-- Value mode flag --> <li><dfn><a href=https://html.spec.whatwg.org/#concept-output-mode>Value mode flag</a></dfn>
   <!-- Value sanitization algorithm --> <li><dfn><a href=https://html.spec.whatwg.org/#value-sanitization-algorithm>Value sanitization algorithm</a></dfn>
   <!-- Window object --> <li><dfn><a href=https://html.spec.whatwg.org/#the-window-object><code>Window</code></a></dfn> object
   <!-- Window open steps --> <li><dfn><a href=https://html.spec.whatwg.org/#window-open-steps>Window open steps</a></dfn>
   <!-- WindowProxy exotic object --> <li><dfn><a href=https://html.spec.whatwg.org/#windowproxy><code>WindowProxy</code></a></dfn> exotic object
   <!-- WorkerNavigator --> <li><dfn lt="workernavigator"><a href=https://html.spec.whatwg.org/#workernavigator>WorkerNavigator object</a></dfn>
   <!-- setSelectionRange --> <li><dfn lt="set selection range"><a href=https://html.spec.whatwg.org/#dom-textarea/input-setselectionrange><code>setSelectionRange</code></a></dfn>
   <!-- window confirm --> <li><dfn>window.<a href=https://html.spec.whatwg.org/#dom-confirm><code>confirm</code></a></dfn>
   <!-- window.alert --> <li><dfn>window.<a href=https://html.spec.whatwg.org/#dom-alert><code>alert</code></a></dfn>
   <!-- window.prompt --> <li><dfn>window.<a href=https://html.spec.whatwg.org/#dom-prompt><code>prompt</code></a></dfn>
  </ul>

 <dd><p>The HTML specification also defines a number of elements
  which this specification has special-cased behavior for:
  <ul>
   <!-- a element --> <li><dfn lt="a elements"><a href=https://html.spec.whatwg.org/#the-a-element><code>a</code> element</a></dfn>
   <!-- area element --> <li><dfn lt=area><a href=https://html.spec.whatwg.org/#the-area-element><code>area</code> element</a></dfn>
   <!-- canvas element --> <li><dfn><a href=https://html.spec.whatwg.org/#the-canvas-element><code>canvas</code> element</a></dfn>
   <!-- datalist element --> <li><dfn lt="datalist|datalist element"><a href=https://html.spec.whatwg.org/#the-datalist-element><code>datalist</code> element</a></dfn>
   <!-- frame element --> <li><dfn lt=frame><a href=https://html.spec.whatwg.org/#frame><code>frame</code> element</a></dfn>
   <!-- HTML Element --> <li><dfn><a href=https://html.spec.whatwg.org/#the-html-element><code>html</code> element</a></dfn>
   <!-- iframe element --> <li><dfn lt=iframe><a href=https://html.spec.whatwg.org/#the-iframe-element><code>iframe</code> element</a></dfn>
   <!-- input element --> <li><dfn lt="input elements"><a href=https://html.spec.whatwg.org/#the-input-element><code>input</code> element</a></dfn>
   <!-- map element --> <li><dfn><a href=https://html.spec.whatwg.org/#the-map-element><code>map</code> element</a></dfn>
   <!-- optgroup element --> <li><dfn lt="optgroup|optgroup element"><a href=https://html.spec.whatwg.org/#the-optgroup-element><code>optgroup</code> element</a></dfn>
   <!-- option element --> <li><dfn lt="option elements|option"><a href=https://html.spec.whatwg.org/#the-option-element><code>option</code> element</a></dfn>
   <!-- output element --> <li><dfn lt=output><a href=https://html.spec.whatwg.org/#the-output-element><code>output</code> element</a></dfn>
   <!-- select element --> <li><dfn lt="code elements|select element"><a href=https://html.spec.whatwg.org/#the-select-element><code>select</code> element</a></dfn>
   <!-- textarea element --> <li><dfn lt="textarea elements|textarea"><a href=https://html.spec.whatwg.org/#the-textarea-element><code>textarea</code> element</a></dfn>
  </ul>

 <dd><p>The HTML specification also defines <em>states</em>
  of the <a><code>input</code> element</a>:
  <ul>
   <!-- Color state --> <li><dfn><a href="https://html.spec.whatwg.org/#color-state-(type=color)">Color state</a></dfn>
   <!-- Date state --> <li><dfn><a href="https://html.spec.whatwg.org/#date-state-(type=date)">Date state</a></dfn>
   <!-- Email state --> <li><dfn><a href="https://html.spec.whatwg.org/#e-mail-state-(type=email)">Email state</a></dfn>
   <!-- Local Date and Time state --> <li><dfn><a href="https://html.spec.whatwg.org/#local-date-and-time-state-(type=datetime-local)">Local Date and Time state</a></dfn>
   <!-- Month state --> <li><dfn><a href="https://html.spec.whatwg.org/#month-state-(type=month)">Month state</a></dfn>
   <!-- Number state --> <li><dfn><a href="https://html.spec.whatwg.org/#number-state-(type=number)">Number state</a></dfn>
   <!-- Password state --> <li><dfn><a href="https://html.spec.whatwg.org/#password-state-(type=password)">Password state</a></dfn>
   <!-- Range state --> <li><dfn><a href="https://html.spec.whatwg.org/#range-state-(type=range)">Range state</a></dfn>
   <!-- Telephone state --> <li><dfn><a href="https://html.spec.whatwg.org/#telephone-state-(type=tel)">Telephone state</a></dfn>
   <!-- Text and Search state --> <li><dfn><a href="https://html.spec.whatwg.org/#text-(type=text)-state-and-search-state-(type=search)">Text and Search state</a></dfn>
   <!-- Time state --> <li><dfn><a href="https://html.spec.whatwg.org/#time-state-(type=time)">Time state</a></dfn>
   <!-- URL state --> <li><dfn><a href="https://html.spec.whatwg.org/#url-state-(type=url)">URL state</a></dfn>
   <!-- Week state --> <li><dfn><a href="https://html.spec.whatwg.org/#week-state-(type=week)">Week state</a></dfn>
  </ul>

 <dd><p>The HTML specification also defines a range of different attributes:
  <ul>
   <!-- Canvas height attribute --> <li><dfn lt="canvas height attribute"><a href=https://html.spec.whatwg.org/#attr-canvas-height><code>canvas</code>’s height attribute</a></dfn>
   <!-- Canvas width attribute --> <li><dfn lt="canvas width attribute"><a href=https://html.spec.whatwg.org/#attr-canvas-width><code>canvas</code>’ width attribute</a></dfn>
   <!-- Checked content attribute --> <li><dfn><a href=https://html.spec.whatwg.org/#attr-input-checked>Checked</a></dfn>
   <!-- Multiple attribute --> <li><dfn><a href=https://html.spec.whatwg.org/#attr-input-multiple><code>multiple</code> attribute</a></dfn>
   <!-- readOnly attribute --> <li><dfn><a href=https://html.spec.whatwg.org/#the-readonly-attribute><code>readOnly</code> attribute</a></dfn>
   <!-- Type attribute --> <li><dfn lt="type|type attribute"><a href=https://html.spec.whatwg.org/#attr-input-type><code>type</code> attribute</a></dfn>
   <!-- Value attribute --><li><dfn><a href=https://html.spec.whatwg.org/#dom-input-value><code>value</code> attribute</a></dfn>
  </ul>

 <dd><p>The HTML Editing APIs specification defines the following terms: [[EDITING]]
  <ul>
   <!-- Content editable --> <li><dfn><a href=https://w3c.github.io/editing/contentEditable.html>Content editable</a></dfn>
   <!-- Editing host --> <li><dfn lt="editing hosts"><a href=https://w3c.github.io/editing/execCommand.html#editing-host>Editing host</a></dfn>
  </ul>

 <dd><p>The following events are also defined in the HTML specification:
  <ul>
   <!-- beforeunload --> <li><dfn><a href=https://html.spec.whatwg.org/#event-beforeunload><code>beforeunload</code></a></dfn>
   <!-- change --> <li><dfn><a href="https://html.spec.whatwg.org/multipage/indices.html#event-change"><code>change</code></a></dfn>
   <!-- DOMContentLoaded --> <li><dfn><a href=https://html.spec.whatwg.org/#event-domcontentloaded><code>DOMContentLoaded</code></a></dfn>
   <!-- input --> <li><dfn><a href=https://html.spec.whatwg.org/#event-input><code>input</code></a></dfn>
   <!-- load --> <li><dfn><a href="https://html.spec.whatwg.org/multipage/indices.html#event-load"><code>load</code></a></dfn>
   <!-- PageHide --> <li><dfn><a href="https://html.spec.whatwg.org/multipage/indices.html#event-pagehide"><code>pageHide</code></a></dfn>
   <!-- PageShow --> <li><dfn><a href="https://html.spec.whatwg.org/multipage/indices.html#event-pageshow"><code>pageShow</code></a></dfn>
  </ul>

 <dd><p>The “data” URL scheme specification defines the following terms: [[RFC2397]]
  <ul>
   <!-- data: url --> <li><dfn><a href=https://tools.ietf.org/html/rfc2397#section-2><code>data:</code> URL</a></dfn>
  </ul>

 <dt>HTTP and related specifications
 <dd><p>To be <dfn>HTTP compliant</dfn>,
  it is supposed that the implementation supports the relevant subsets of
  [[RFC7230]], [[RFC7231]], [[RFC7232]], [[RFC7234]], and [[RFC7235]].

 <dd><p>The following terms are defined in the Cookie specification: [[RFC6265]]
  <ul>
   <!-- Compute cookie-string --> <li><dfn><a href=https://tools.ietf.org/html/rfc6265#section-5.4>Compute <code>cookie-string</code></a></dfn>
   <!-- Cookie --> <li><dfn lt=cookies><a href=https://tools.ietf.org/html/rfc6265#section-5.3>Cookie</a></dfn>
   <!-- Cookie store --> <li><dfn><a href=https://tools.ietf.org/html/rfc6265#section-5.3>Cookie store</a></dfn>
   <!-- Receives a cookie --> <li><dfn lt="receiving a cookie"><a href=https://tools.ietf.org/html/rfc6265#section-5.3>Receives a cookie</a></dfn>
  </ul>

<dd><p>The following terms are defined in the Same Site Cookie specification: [[RFC6265bis]]
  <ul>
    <!-- lax --> <li><dfn><a href="https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-06#section-4.1.2.7"><code>lax</code></a></dfn>
    <!-- strict --> <li><dfn><a href="https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-06#section-4.1.2.7"><code>strict</code></a></dfn>
  </ul>

 <dd><p>The following terms are defined in
  the Hypertext Transfer Protocol (HTTP) Status Code Registry:
  <ul>
   <!-- Status code registry --> <li><dfn><a href=https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml>Status code registry</a></dfn>
  </ul>

 <dd>The following terms are defined in
  the Netscape Navigator Proxy Auto-Config File Format:
  <ul>
   <!-- Proxy autoconfiguration --> <li><dfn><a href=https://web.archive.org/web/20070602031929/http://wp.netscape.com/eng/mozilla/2.0/relnotes/demo/proxy-live.html>Proxy autoconfiguration</a></dfn>
  </ul>

  <dd><p>The specification uses
   <dfn lt="uri template">URI Templates</dfn>. [[URI-TEMPLATE]]

 <dt>Infra
 <dd>The following terms are defined
  in the Infra standard: [[INFRA]]
   <ul>
    <!-- ASCII lowercase --> <li><dfn lt="lowercase"><a href=https://infra.spec.whatwg.org/#ascii-lowercase>ASCII lowercase</a></dfn>
    <!-- string length --> <li><dfn><a href="https://infra.spec.whatwg.org/#string-length">string length</a></dfn>
    <!-- queue --> <li><dfn><a href=https://infra.spec.whatwg.org/#queues>queue</a></dfn>
    <!-- set --> <li><dfn><a href=https://infra.spec.whatwg.org/#sets>Set</a></dfn>
   </ul>

 <dt>Interaction
 <dd>The following terms are defined in the
   Page Visibility Specification [[PAGE-VISIBILITY]]
   <ul>
    <!-- visibility hidden --> <li><dfn lt="visibility hidden"><a href="https://www.w3.org/TR/page-visibility/#dom-visibilitystate-hidden">Visibility state <code>hidden</code></a></dfn>
    <!-- visibility state --> <li><dfn>Visibility state</dfn> being the <a href="https://www.w3.org/TR/page-visibility/#visibility-states-and-the-visibilitystate-enum"><code>visibilityState</code></a> attribute on <a>Document</a>
    <!-- visibility visible --> <li><dfn lt="visibility visible"><a href="https://www.w3.org/TR/page-visibility/#dom-visibilitystate-visible">Visibility state <code>visible</code></a></dfn>
   </ul>

 <dt>Selenium
 <dd>The following functions are defined within
  the <a href=https://selenium.dev>Selenium</a> project, at
  revision <code>1721e627e3b5ab90a06e82df1b088a33a8d11c20</code>.
  <ul>
   <!-- bot.dom.getVisibleText --> <li><dfn><a href=https://github.com/SeleniumHQ/selenium/blob/e09e28f016c9f53196cf68d6f71991c5af4a35d4/javascript/atoms/dom.js#L981><code>bot.dom.getVisibleText</code></a></dfn>
   <!-- bot.dom.isShown --> <li><dfn><a href=https://github.com/SeleniumHQ/selenium/blob/e09e28f016c9f53196cf68d6f71991c5af4a35d4/javascript/atoms/dom.js#L437><code>bot.dom.isShown</code></a></dfn>
  </ul>

 <dt>Styling
 <dd>The following terms are defined in
  the CSS Values and Units Module Level 3 specification: [[CSS3-VALUES]]
  <ul>
   <!-- CSS pixels --> <li><dfn><a href=https://www.w3.org/TR/css-values-3/#px>CSS pixels</a></dfn>
  </ul>

 <dd>The following properties are defined in
  the CSS Basic Box Model Level 3 specification: [[CSS3-BOX]]
   <ul>
    <!-- Visibility property --> <li>The <dfn><a href=https://drafts.csswg.org/css-box/#visibility-prop><code>visibility</code></a></dfn> property
   </ul>

 <dd>The following terms are defined in
  the CSS Device Adaptation Module Level 1 specification: [[CSS-DEVICE-ADAPT]]
   <ul>
    <!-- Initial viewport --><li><dfn lt="viewport|initial viewport"><a href=https://drafts.csswg.org/css-device-adapt/#initial-viewport>Initial viewport</a></dfn>,
     sometimes here referred to as the <i>viewport</i>.
   </ul>

 <dd>The following properties are defined in
  the CSS Display Module Level 3 specification: [[CSS3-DISPLAY]]
  <ul>
   <!-- Display property --> <li>The <dfn><a href=https://drafts.csswg.org/css-display/#the-display-properties><code>display</code></a></dfn> property
  </ul>

 <dd>The following terms are defined in
  the Geometry Interfaces Module Level 1 specification: [[GEOMETRY-1]]
  <ul>
   <!-- DOMRect --> <li><dfn><a href="https://www.w3.org/TR/geometry-1/#dom-domrect"><code>DOMRect</code></a></dfn>
   <!-- Rectangle --> <li><dfn lt="bounding rectangle|rectangle"><a href=https://drafts.fxtf.org/geometry/#rectangle>Rectangle</a></dfn>
   <!-- Rectangle height dimension --> <li><dfn lt="height dimension|rectangle height dimension"><a href=https://drafts.fxtf.org/geometry/#rectangle-height-dimension>Rectangle height dimension</a></dfn>
   <!-- Rectangle width dimension --> <li><dfn lt="width dimension|rectangle width dimension"><a href=https://drafts.fxtf.org/geometry/#rectangle-width-dimension>Rectangle width dimension</a></dfn>
   <!-- Rectangle x coordinate --> <li><dfn lt="x coordinate|rectangle x coordinate"><a href=https://drafts.fxtf.org/geometry/#rectangle-x-coordinate>Rectangle x coordinate</a></dfn>
   <!-- Rectangle y coordinate --> <li><dfn lt="y coordinate|rectangle y coordinate"><a href=https://drafts.fxtf.org/geometry/#rectangle-y-coordinate>Rectangle y coordinate</a></dfn>
  </ul>

 <dd>The following terms are defined in
  the CSS Cascading and Inheritance Level 4 specification: [[CSS-CASCADE-4]]
  <ul>
   <!-- Computed Value --> <li><dfn><a href=https://drafts.csswg.org/css-cascade-4/#computed-value>Computed value</a></dfn>
  </ul>

 <dd>The following terms are defined in the CSS Object Model: [[CSSOM]]:
  <ul>
   <!-- Resolved value --> <li><dfn><a href=https://drafts.csswg.org/cssom/#resolved-value>Resolved value</a></dfn>
  </ul>

 <dd>The following functions are defined in
  the CSSOM View Module: [[CSSOM-VIEW]]:
  <ul>
   <!-- getBoundingClientRect() --> <li><dfn><a href="https://drafts.csswg.org/cssom-view/#dom-element-getboundingclientrect">getBoundingClientRect</a></dfn>
   <!-- elementFromPoint --> <li><dfn>Element from point</dfn> as <a href="https://drafts.csswg.org/cssom-view/#dom-document-elementfrompoint">elementFromPoint()</a>
   <!-- elementsFromPoint --> <li><dfn lt="paint order|paint tree|elements from point">Elements from point</dfn> as <a href=https://drafts.csswg.org/cssom-view/#dom-document-elementsfrompoint>elementsFromPoint()</a>
   <!-- getClientRects --> <li><dfn lt="DOM client rectangle|getClientRects"><a href=https://drafts.csswg.org/cssom-view/#dom-range-getclientrects>getClientRects</a></dfn>
   <!-- innerHeight --> <li><dfn><a href=https://drafts.csswg.org/cssom-view/#dom-window-innerheight>innerHeight</a></dfn>
   <!-- innerWidth --> <li><dfn><a href=https://drafts.csswg.org/cssom-view/#dom-window-innerwidth>innerWidth</a></dfn>
   <!-- moveTo --> <li><dfn method for=Window><a href=https://drafts.csswg.org/cssom-view/#dom-window-moveto>moveTo(x, y)</a></dfn>
   <!-- offsetLeft --> <li><dfn><a href=https://drafts.csswg.org/cssom-view/#dom-htmlelement-offsetleft>offsetLeft</a></dfn>
   <!-- offsetParent --> <li><dfn><a href=https://drafts.csswg.org/cssom-view/#dom-htmlelement-offsetparent>offsetParent</a></dfn>
   <!-- offsetTop --> <li><dfn><a href=https://drafts.csswg.org/cssom-view/#dom-htmlelement-offsettop>offsetTop</a></dfn>
   <!-- outerHeight --> <li><dfn><a href=https://drafts.csswg.org/cssom-view/#dom-window-outerheight>outerHeight</a></dfn>
   <!-- outerWidth --> <li><dfn><a href=https://drafts.csswg.org/cssom-view/#dom-window-outerwidth>outerWidth</a></dfn>
   <!-- screenX --> <li><dfn><a href=https://drafts.csswg.org/cssom-view/#dom-window-screenx>screenX</a></dfn>
   <!-- screenY --> <li><dfn><a href=https://drafts.csswg.org/cssom-view/#dom-window-screeny>screenY</a></dfn>
   <!-- scrollX --> <li><dfn><a href="https://drafts.csswg.org/cssom-view/#dom-window-scrollx">scrollX</a></dfn>
   <!-- scrollY --> <li><dfn><a href="https://drafts.csswg.org/cssom-view/#dom-window-scrolly">scrollY</a></dfn>
   <!-- scrollIntoView --> <li><dfn><a href=https://drafts.csswg.org/cssom-view/#dom-element-scrollintoview>scrollIntoView</a></dfn>
   <!-- ScrollIntoViewOptions --> <li><dfn><a href=https://drafts.csswg.org/cssom-view/#dictdef-scrollintoviewoptions><code>ScrollIntoViewOptions</code></a></dfn>
   <!-- ScrollIntoViewOptions block --> <li><dfn><a href=https://drafts.csswg.org/cssom-view/#dom-scrollintoviewoptions-block>Logical scroll position "<code>block</code>"</a></dfn>
   <!-- ScrollIntoViewOptions inline --> <li><dfn><a href=https://drafts.csswg.org/cssom-view/#dom-scrollintoviewoptions-inline>Logical scroll position "<code>inline</code>"</a></dfn>
  </ul>

 <dd>The following terms are defined in  [[mediaqueries-4]]:
  <ul>
   <!-- media type --> <li><dfn><a href=https://www.w3.org/TR/mediaqueries-4/#media-types>media type</a></dfn>
  </ul>

 <dt>SOCKS Proxy and related specification:
 <dd><p>To be <dfn>SOCKS Proxy</dfn>
  and <dfn lt=authenticating>SOCKS authentication</dfn> compliant,
  it is supposed that the implementation supports the relevant subsets of
  [[RFC1928]] and [[RFC1929]].

 <dt>Unicode
 <dd>The following terms are defined in the  standard: [[Unicode]]
  <ul>
   <!-- Code point --> <li><dfn lt="unicode code point"><a href=https://www.unicode.org/versions/Unicode9.0.0/ch03.pdf#G2212>Code Point</a></dfn>
   <!-- Extended grapheme cluster --> <li><dfn lt="grapheme cluster|extended grapheme cluster"><a href=https://www.unicode.org/versions/Unicode9.0.0/ch03.pdf#G2213>Extended grapheme cluster</a></dfn>
  </ul>

 <dt>Unicode Standard Annex #29
 <dd>The following terms are defined in the standard: [[UAX29]]
  <ul>
   <!-- Breaking text into extended grapheme clusters --><li><dfn lt="breaking text into extended grapheme clusters"><a href=https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries>Grapheme cluster boundaries</a></dfn>
  </ul>

 <dt>Unicode Standard Annex #44
 <dd>The following terms are defined in the standard: [[UAX44]]
  <ul>
   <!-- Unicode character property --> <li><dfn><a href=https://unicode.org/reports/tr44/#Properties>Unicode character property</a></dfn>
  </ul>

 <dt>URLs
 <dd>The following terms are defined in the WHATWG URL standard: [[URL]]
  <ul>
   <!-- Absolute URL --> <li><dfn><a href=https://url.spec.whatwg.org/#syntax-url-absolute>Absolute URL</a></dfn>
   <!-- Absolute URL with fragment --> <li><dfn><a href=https://url.spec.whatwg.org/#syntax-url-absolute-with-fragment>Absolute URL with fragment</a></dfn>
   <!-- Default port --> <li><dfn><a href="https://url.spec.whatwg.org/#default-port">Default port</a></dfn>
   <!-- Domain --><li><dfn lt="domains"><a href="https://url.spec.whatwg.org/#concept-domain">Domain</a></dfn>
   <!-- Host --> <li><dfn><a href="https://url.spec.whatwg.org/#concept-host">Host</a></dfn>
   <!-- includes credentials --> <li><dfn><a href="https://url.spec.whatwg.org/#include-credentials">Includes credentials</a></dfn>
   <!-- IPv4 address --> <li><dfn lt="ipv4 addresses"><a href="https://url.spec.whatwg.org/#concept-ipv4">IPv4 address</a></dfn>
   <!-- IPv6 address --> <li><dfn lt="ipv6 addresses"><a href="https://url.spec.whatwg.org/#concept-ipv6">IPv6 address</a></dfn>
   <!-- Is Special --> <li><dfn><a href="https://url.spec.whatwg.org/#is-special">Is special</a></dfn>
   <!-- Path-absolute URL --> <li><dfn><a href=https://url.spec.whatwg.org/#syntax-url-path-absolute>Path-absolute URL</a></dfn>
   <!-- Path --> <li><dfn><a href=https://url.spec.whatwg.org/#concept-url-path>Path</a></dfn>
   <!-- Port --> <li><dfn><a href="https://url.spec.whatwg.org/#concept-url-port">Port</a></dfn>
   <!-- URL --> <li><dfn><a href=https://url.spec.whatwg.org/#concept-url>URL</a></dfn>
   <!-- URL serializer --> <li><dfn><a href=https://url.spec.whatwg.org/#concept-url-serializer>URL serializer</a></dfn>
  </ul>

 <dt>Web IDL
 <dd><p>The IDL fragments in this specification
  must be interpreted as required for conforming IDL fragments,
  as described in the Web IDL specification. [[WEBIDL]]
  <ul>
   <!-- DOMException --> <li><dfn><a href="https://heycam.github.io/webidl/#dfn-DOMException"><code>DOMException</code></a></dfn>
   <!-- Sequence --> <li><dfn><a href="https://heycam.github.io/webidl/#idl-sequence">Sequence</a></dfn>
   <!-- Supported property indices --> <li><dfn lt="supported property index"><a href=https://heycam.github.io/webidl/#dfn-supported-property-indices>Supported property indices</a></dfn>
   <!-- SyntaxError --> <li><dfn><a href="https://heycam.github.io/webidl/#syntaxerror"><code>SyntaxError</code></a></dfn></li>

  </ul>

  <dt>Promises Guide <!-- Eventually this will be merged into WebIDL -->
  <dd><p>The following terms are defined in the Promises Guide. [[PROMISES-GUIDE]]
    <ul>
      <!-- a new promise --> <li><dfn><a href="https://www.w3.org/2001/tag/doc/promises-guide#a-new-promise">A new promise</a></dfn>
      <!-- Promise calling --> <li><dfn lt='promise-call'><a href="https://www.w3.org/2001/tag/doc/promises-guide#promise-calling">Promise-calling</a></dfn>
      <!-- Reject --> <li><dfn><a href="https://www.w3.org/2001/tag/doc/promises-guide#reject-promise">reject</a></dfn>
      <!-- Resolve --> <li><dfn><a href="https://www.w3.org/2001/tag/doc/promises-guide#resolve-promise">resolve</a></dfn>
    </ul>

  <dt>XML Namespaces
  <dd><p>The following terms are defined in the Namespaces in XML [[XML-NAMES]]
    <ul>
      <!-- qualified element name --><li><dfn><a href="https://www.w3.org/TR/REC-xml-names/#ns-using">qualified element name</a></dfn>
    </ul>

  <dt>XPATH
  <dd><p>The following terms are defined in the Document Object Model XPath standard [[XPATH]]
    <ul>
      <!-- evaluate --><li><dfn><a href="https://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathEvaluator-evaluate"><code>evaluate</code></a></dfn>
      <!-- ORDERED_NODE_SNAPSHOT_TYPE --><li><dfn><a href="https://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathResult-ORDERED-NODE-SNAPSHOT-TYPE"><code>ORDERED_NODE_SNAPSHOT_TYPE</code></a></dfn>
      <!-- snapshotItem --><li><dfn><a href="https://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathResult-snapshotItem"><code>snapshotItem</code></a></dfn>
      <!-- XPathException --><li><dfn><a href="https://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathException"><code>XPathException</code></a></dfn>
    </ul>
</dl>
</section>
